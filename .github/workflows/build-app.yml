name: build-app

permissions:
  contents: write
  pull-requests: write

on:
  workflow_call:
    inputs:
      application:
        required: true
        type: string
      runner:
        required: true
        type: string
      disable_auto_upload:
        required: false
        type: string
      force_push_dockerhub:
        required: false
        type: string
      skip_docker_build:
        required: false
        type: string

# Workflow needs the following set in GitHub
# - secrets.DOCKERHUB_USERNAME  
# - secrets.DOCKERHUB_PASSWORD
# - secrets.DOCKERHUB_ORG (should be 'astewartau')

jobs:
  config:
    runs-on: ubuntu-22.04
    outputs:
      APPLICATION: ${{ steps.envars.outputs.APPLICATION }}
      BUILDDATE: ${{ steps.envars.outputs.BUILDDATE }}
      IMAGETAG: ${{ steps.envars.outputs.IMAGETAG }}
      IMAGENAME: ${{ steps.imgvars.outputs.IMAGENAME }}
      ROOTFS_CACHE: ${{ steps.getrootfs.outputs.ROOTFS_CACHE }}
    steps:
      - name: Configure runner
        run: |
          sudo mkdir -p /mnt/tmp
          sudo chown $USER /mnt/tmp
          sudo mkdir -p /mnt/docker
          echo '{"data-root": "/mnt/docker"}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set environment variables
        id: envars
        run: |
          APPLICATION=${{ inputs.application }}
          SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)
          BUILDDATE=`date +%Y%m%d`
          echo "APPLICATION=$APPLICATION" >> $GITHUB_ENV
          echo "APPLICATION=$APPLICATION" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV
          echo "BUILDDATE=$BUILDDATE" >> $GITHUB_OUTPUT
          if [ "${{ inputs.skip_docker_build }}" = "true" ]; then
            echo "IMAGETAG=latest" >> $GITHUB_OUTPUT
          else
            echo "IMAGETAG=${BUILDDATE}" >> $GITHUB_OUTPUT
          fi

      - name: Install builder dependencies
        run: |
          pip install -r requirements.txt

      - name: Generate Dockerfile and Release file
        id: generate
        run: |
          echo "APPLICATION: $APPLICATION"
          ./builder/build.py generate $APPLICATION --recreate --auto-build --generate-release

      - name: Set image variables
        id: imgvars
        run: |
          DOCKERFILE=`basename $(find ./build/$APPLICATION/ -type f -iname "*.Dockerfile" | head -1)`
          # if the dockerfile is not found, exit with error
          if [ -z "$DOCKERFILE" ]; then
            echo "Dockerfile not found for $APPLICATION"
            exit 1
          fi
          IMAGENAME=$(echo $(basename $DOCKERFILE .Dockerfile) | tr '[A-Z]' '[a-z]')
          echo "IMAGENAME: $IMAGENAME"
          echo "IMAGENAME=$IMAGENAME" >> $GITHUB_OUTPUT
          echo "IMAGENAME=$IMAGENAME" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Pull latest image from registry and get rootfs
        id: getrootfs
        if: inputs.skip_docker_build != 'true'
        env:
          DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
        run: |
          docker pull ${DOCKERHUB_ORG}/${{ env.IMAGENAME }}:latest && ROOTFS_CACHE=$(docker inspect --format='{{.RootFS}}' ${DOCKERHUB_ORG}/${{ env.IMAGENAME }}:latest) || true
          echo "ROOTFS_CACHE=$ROOTFS_CACHE" >> $GITHUB_OUTPUT

  build-image:
    needs: config
    runs-on: ${{ inputs.runner }}
    outputs:
      IMGDIFFERS: ${{ steps.imgcompare.outputs.IMGDIFFERS }}

    permissions:
      contents: write
    env:
      APPLICATION: ${{ needs.config.outputs.APPLICATION }}
      BUILDDATE: ${{ needs.config.outputs.BUILDDATE }}
      IMAGENAME: ${{ needs.config.outputs.IMAGENAME }}
      IMAGETAG: ${{ needs.config.outputs.IMAGETAG }}
      ROOTFS_CACHE: ${{ needs.config.outputs.ROOTFS_CACHE }}
    steps:
      - name: Configure runner
        run: |
          sudo swapoff -a && sudo rm -rf /mnt/*
          BASE_PATH=/mnt
          if [ "${{ inputs.runner }}" = "self-hosted" ]; then
            BASE_PATH=/storage
          fi
          echo "BASE_PATH=$BASE_PATH" >> $GITHUB_ENV
          sudo mkdir -p $BASE_PATH/tmp
          sudo chown $USER $BASE_PATH/tmp
          sudo mkdir -p $BASE_PATH/docker
          echo "{\"data-root\": \"$BASE_PATH/docker\"}" | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Install builder dependencies
        run: |
          pip install -r requirements.txt

      - name: Generate Dockerfile and Release file
        id: generate
        run: |
          echo "APPLICATION: $APPLICATION"
          ./builder/build.py generate $APPLICATION --recreate --auto-build --generate-release

      - name: Set image variables
        id: imgvars
        run: |
          DOCKERFILE=`basename $(find ./build/$APPLICATION/ -type f -iname "*.Dockerfile" | head -1)`
          # if the dockerfile is not found, exit with error
          if [ -z "$DOCKERFILE" ]; then
            echo "Dockerfile not found for $APPLICATION"
            exit 1
          fi
          echo "IMAGENAME: $IMAGENAME"
          echo "IMAGENAME_TEST=${IMAGENAME//_/ }" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Debug Dockerfile
        run: cat ./build/${APPLICATION}/${IMAGENAME}.Dockerfile

      - name: Debug storage
        run: |
          sudo df -ha
          sudo du -sh /mnt

      - name: Build new image
        if: inputs.skip_docker_build != 'true'
        env:
          DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
        run: |
          cd ./build/${APPLICATION}
          docker build . --file ${IMAGENAME}.Dockerfile --tag ${DOCKERHUB_ORG}/${IMAGENAME}:${BUILDDATE} --cache-from ${DOCKERHUB_ORG}/${IMAGENAME}:latest --label "GITHUB_REPOSITORY=${GITHUB_REPOSITORY}" --label "GITHUB_SHA=${SHORT_SHA}"
        continue-on-error: true
          
      - name: Debug storage
        run: |
          sudo df -ha
          sudo du -sh /mnt

      - name: Compare new and cached images
        id: imgcompare
        if: inputs.skip_docker_build != 'true'
        env:
          DISABLE_AUTO_UPLOAD: ${{ inputs.disable_auto_upload }}
          DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
        run: |
          ROOTFS_NEW=$(docker inspect --format='{{.RootFS}}' ${DOCKERHUB_ORG}/${IMAGENAME}:${BUILDDATE})
          echo "ROOTFS_NEW=$ROOTFS_NEW" >> $GITHUB_ENV
          
          if [ "$DISABLE_AUTO_UPLOAD" = "true" ]; then
            echo "Auto-upload is disabled. Skipping push to registry."
          elif [ "$ROOTFS_NEW" = "$ROOTFS_CACHE" ]; then
            echo "No changes found. Skipping push to registry. "
          else
            echo "Pushing to registry. Changes found"
            echo "IMGDIFFERS=true" >> $GITHUB_OUTPUT
          fi

      - name: Push to DockerHub
        if: steps.imgcompare.outputs.IMGDIFFERS == 'true' || inputs.force_push_dockerhub == 'true'
        env:
          DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
        run: |
          docker tag ${DOCKERHUB_ORG}/${IMAGENAME}:${BUILDDATE} ${DOCKERHUB_ORG}/${IMAGENAME}:latest
          docker push ${DOCKERHUB_ORG}/${IMAGENAME}:${BUILDDATE}
          docker push ${DOCKERHUB_ORG}/${IMAGENAME}:latest

  create-pr:
    needs: [config, build-image]
    if: ${{ needs.build-image.outputs.IMGDIFFERS == 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    env:
      APPLICATION: ${{ needs.config.outputs.APPLICATION }}
      BUILDDATE: ${{ needs.config.outputs.BUILDDATE }}
      IMAGENAME: ${{ needs.config.outputs.IMAGENAME }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      
    - name: Install Builder Dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Generate Dockerfile and Release File
      id: generate
      run: |
        echo "APPLICATION: $APPLICATION"
        ./builder/build.py generate $APPLICATION --recreate --auto-build --generate-release

    - name: Create Release File Pull Request
      if: steps.generate.outputs.container_name
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CONTAINER_NAME: ${{ steps.generate.outputs.container_name }}
        CONTAINER_VERSION: ${{ steps.generate.outputs.container_version }}
        RELEASE_CONTENT: ${{ steps.generate.outputs.release_file_content }}
        DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
      run: |
        gh auth setup-git

        # Configure git
        git config --global user.name "neurocontainers-bot"
        git config --global user.email "neurocontainers-bot@astewartau.github.io"

        # Create a new branch for the release
        BRANCH_NAME="release/${CONTAINER_NAME}-${CONTAINER_VERSION}-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"

        # Create the release file
        RELEASE_DIR="releases/${CONTAINER_NAME}"
        RELEASE_FILE="${RELEASE_DIR}/${CONTAINER_VERSION}.json"

        mkdir -p "$RELEASE_DIR"
        echo "$RELEASE_CONTENT" > "$RELEASE_FILE"

        # Check if this is a new file or an update
        if git ls-files --error-unmatch "$RELEASE_FILE" 2>/dev/null; then
          ACTION="Update"
        else
          ACTION="Add"
        fi

        # Add and commit the release file
        git add "$RELEASE_FILE"
        git commit -m "${ACTION} release file for ${CONTAINER_NAME} ${CONTAINER_VERSION}

        Auto-generated release file from container build.

        🤖 Generated by astewartau/neurocontainers CI"

        # Push the branch
        git push origin "$BRANCH_NAME"

        # Create pull request
        gh pr create \
          --title "${ACTION} release for ${CONTAINER_NAME} ${CONTAINER_VERSION}" \
          --body "## Summary

        This PR ${ACTION,,}s the release file for **${CONTAINER_NAME} ${CONTAINER_VERSION}**.

        ## Changes

        - ${ACTION} \`${RELEASE_FILE}\` with container metadata
        - Generated automatically from successful container build
        - Contains categories and GUI applications from build.yaml

        ## Testing Instructions

        To test this container with Docker:
        \`\`\`bash
        docker run --rm -it ${DOCKERHUB_ORG}/${IMAGENAME}:${BUILDDATE}
        \`\`\`

        Or with Singularity/Apptainer:
        \`\`\`bash
        singularity run docker://${DOCKERHUB_ORG}/${IMAGENAME}:${BUILDDATE}
        \`\`\`

        ## Review Checklist

        - [ ] Release file format is correct
        - [ ] Categories are appropriate for this container
        - [ ] GUI applications (if any) are correctly defined
        - [ ] Version and build date are accurate
        - [ ] Container has been tested using the commands above

        🤖 Generated with astewartau/neurocontainers"