name: auto-build

permissions:
  contents: write
  pull-requests: write
  packages: write
  id-token: write

on:
  push:
    paths:
      - recipes/**
    branches:
      - master

jobs:
  list-apps:
    runs-on: ubuntu-22.04
    if: ${{ !contains(github.event.head_commit.message, 'skipci') }}
    outputs:
      app_list: ${{ steps.find_changed_recipes.outputs.app_list }}
      runner: ${{ steps.select_runner.outputs.runner }}
      workflows_json: ${{ steps.check_workflows.outputs.workflows_json }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Find all recipe directories with changes
      id: find_changed_dirs
      uses: tj-actions/changed-files@2f7c5bfce28377bc069a65ba478de0a74aa0ca32
      with:
        files: "recipes/**"
        dir_names: "true"
        json: "true"
    - name: Filter down to changed recipes
      id: find_changed_recipes
      if: steps.find_changed_dirs.outputs.any_changed == 'true'
      run: |
        # Get dir changelist -> convert list to json -> extract app name only -> remove duplicate apps
        changed_recipes=$(echo "${{ steps.find_changed_dirs.outputs.all_changed_files }}" | jq -rc '.[]'  | cut -d/ -s -f 2-2 | jq -ncR '[inputs]' | jq -rc 'unique')
        echo "changed_recipes=${changed_recipes}"
        
        app_list='['
        for APPLICATION in $(echo "${changed_recipes}" | jq -r '.[]'); do
          AUTOBUILD=$(cat .github/workflows/build-config.json | jq -r ".\"${APPLICATION}\".autoBuild")
          [ "$AUTOBUILD" == "null" ] && AUTOBUILD=$(cat .github/workflows/build-config.json | jq -r ".default.autoBuild")
          if [ "$AUTOBUILD" = "true" ]; then
              app_list+="\"${APPLICATION}\","
          else
              echo "$APPLICATION:autoBuild:$AUTOBUILD in build-config.json"
          fi
        done
        app_list=$(sed '$s/,$//' <<< $app_list)
        app_list+=']'
        echo "app_list=${app_list}"
        echo "app_list=${app_list}" >> $GITHUB_OUTPUT
        echo "changed_recipes=${changed_recipes}" >> $GITHUB_OUTPUT

    - name: Check for evaluation workflows
      id: check_workflows
      if: steps.find_changed_dirs.outputs.any_changed == 'true'
      run: |
        echo "Checking for evaluation workflows in changed recipes..."

        # Create a JSON object to store workflow -> recipes mapping
        workflows_json="{}"

        for APPLICATION in $(echo '${{ steps.find_changed_recipes.outputs.changed_recipes }}' | jq -r '.[]'); do
          echo "Checking $APPLICATION for evaluation tags..."
          if [ -f "recipes/$APPLICATION/build.yaml" ]; then
            # Extract evaluation tag value
            EVALUATION=$(grep -oP 'evaluation:\s*\K[^\s]+' "recipes/$APPLICATION/build.yaml" 2>/dev/null || echo "")
            if [ -n "$EVALUATION" ]; then
              echo "✓ Found evaluation workflow '$EVALUATION' for recipe: $APPLICATION"

              # Add to JSON object
              workflows_json=$(echo "$workflows_json" | jq --arg workflow "$EVALUATION" --arg recipe "$APPLICATION" '
                if has($workflow) then
                  .[$workflow] += [$recipe]
                else
                  .[$workflow] = [$recipe]
                end
              ')
            fi
          fi
        done

        # Compact the JSON to avoid multiline issues
        workflows_json_compact=$(echo "$workflows_json" | jq -c .)
        echo "workflows_json=$workflows_json_compact" >> $GITHUB_OUTPUT
        echo "Evaluation workflows found: $workflows_json_compact"

        # Debug: show if workflows were found
        if [ "$workflows_json_compact" = "{}" ]; then
          echo "⚠️  No evaluation workflows found in changed recipes"
        else
          echo "✅ Found evaluation workflows to trigger"
        fi

    - name: Select runner
      id: select_runner
      run: |
        echo "runner=ubuntu-22.04" >> $GITHUB_OUTPUT
        # if [ "${{ github.repository }}" = "neurodesk/neurocontainers" ]; then
        #   echo "runner=self-hosted" >> $GITHUB_OUTPUT
        # else
        #   echo "runner=ubuntu-22.04" >> $GITHUB_OUTPUT
        # fi

  build-app:
    needs: list-apps
    strategy:
      fail-fast: false
      matrix:
        application: ${{ fromJSON(needs.list-apps.outputs.app_list) }}
    uses: ./.github/workflows/build-app.yml
    with:
      application: ${{ matrix.application }}
      runner: ${{ needs.list-apps.outputs.runner }}
    secrets: inherit

  trigger-evaluation-workflows:
    needs: list-apps
    if: needs.list-apps.outputs.workflows_json != '{}'
    runs-on: ubuntu-22.04
    steps:
    - name: Debug workflows JSON
      run: |
        echo "Workflows JSON: ${{ needs.list-apps.outputs.workflows_json }}"
        echo "Condition check: ${{ needs.list-apps.outputs.workflows_json != '{}' }}"

    - name: Trigger evaluation workflows
      uses: actions/github-script@v7
      with:
        script: |
          const workflowsData = JSON.parse('${{ needs.list-apps.outputs.workflows_json }}');

          for (const [workflowFile, recipes] of Object.entries(workflowsData)) {
            console.log(`Triggering workflow: ${workflowFile} for recipes: ${recipes.join(', ')}`);

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: workflowFile,
              ref: 'master',
              inputs: {
                algorithms: recipes.join(',')
              }
            });

            console.log(`Successfully triggered ${workflowFile}`);
          }
