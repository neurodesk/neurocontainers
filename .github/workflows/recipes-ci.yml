name: Recipes CI

on:
  workflow_dispatch:
    inputs:
      debug:
        description: "Debug mode (only run niimath test)"
        type: boolean
        default: true
      run-tests:
        description: "Run tests for each built container"
        type: boolean
        default: false
      architecture:
        description: "Target architecture (x86_64 or arm64)"
        type: choice
        required: true
        default: x86_64
        options:
          - x86_64
          - arm64

jobs:
  build-builder-sif:
    name: Build builder.sif
    runs-on: ${{ github.event.inputs.architecture == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    env:
      ARCH: ${{ github.event.inputs.architecture || 'x86_64' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Apptainer
        run: |
          set -euxo pipefail
          sudo add-apt-repository -y ppa:apptainer/ppa
          sudo apt-get update
          sudo apt-get install -y apptainer

      - name: Install builder tooling
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          # Install this repo as a package to expose sf-* entry points
          pip install -e .

      - name: Build builder SIF
        run: |
          set -euxo pipefail
          # Build via Docker and convert to SIF (avoids requiring host BuildKit)
          sf-make builder --ignore-architectures --architecture "${ARCH}" --use-docker

      - name: Upload builder SIF artifact
        uses: actions/upload-artifact@v4
        with:
          name: builder-sif
          path: sifs/*.sif

  prepare-matrix:
    name: Discover recipes
    runs-on: ${{ github.event.inputs.architecture == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    outputs:
      recipes: ${{ steps.set-matrix.outputs.recipes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build recipe list (debug or full)
        id: set-matrix
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ github.event.inputs.debug }}" == "true" ]]; then
            # Debug mode: only test niimath
            RECIPES='["niimath"]'
          else
            # Full mode: discover all recipes with build.yaml under recipes/*/
            mapfile -t files < <(find recipes -mindepth 2 -maxdepth 2 -name build.yaml | sort)
            names=()
            for f in "${files[@]}"; do
              # Extract recipe directory name (recipes/<name>/build.yaml)
              n=$(basename "$(dirname "$f")")
              # Skip the builder recipe itself in matrix to avoid recursion
              if [[ "$n" == "builder" ]]; then continue; fi
              names+=("\"$n\"")
            done
            if [[ ${#names[@]} -eq 0 ]]; then
              echo "No recipes found" >&2
              RECIPES='[]'
            else
              # Join the JSON-quoted names with commas to form valid JSON array
              RECIPES="[$(IFS=,; echo "${names[*]}")]"
            fi
          fi
          echo "recipes=$RECIPES" >> "$GITHUB_OUTPUT"

  build-or-test-recipe:
    name: Recipe ${{ matrix.recipe }}
    needs: [prepare-matrix, build-builder-sif]
    runs-on: ${{ github.event.inputs.architecture == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    strategy:
      fail-fast: false
      matrix:
        recipe: ${{ fromJSON(needs.prepare-matrix.outputs.recipes) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Apptainer
        run: |
          set -euxo pipefail
          sudo add-apt-repository -y ppa:apptainer/ppa
          sudo apt-get update
          sudo apt-get install -y apptainer

      - name: Download builder SIF artifact
        uses: actions/download-artifact@v4
        with:
          name: builder-sif
          path: sifs

      - name: List artifacts
        run: ls -la sifs

      - name: Prepare /mnt for container /tmp
        run: |
          set -euxo pipefail
          # Ensure a writable tmp area on the host we can bind into the container
          sudo mkdir -p /mnt/tmp
          sudo chown "$USER" /mnt/tmp

      - name: Build SIF via builder image (BuildKit inside container)
        env:
          RECIPE: ${{ matrix.recipe }}
          ARCH: ${{ github.event.inputs.architecture || 'x86_64' }}
        run: |
          set -euxo pipefail
          # Use the builder SIF to run sf-make; bind the repo so it can access recipes
          BUILDER_SIF=$(ls sifs/*.sif | head -n1)
          echo "Using builder SIF: $BUILDER_SIF"
          # Bind current workspace inside the container and execute sf-make against the recipe
          # The builder image clones neurocontainers at build time; we prefer mounting our checkout
          apptainer exec \
            --fakeroot \
            --writable-tmpfs \
            --bind "/mnt/tmp:/tmp" \
            --bind "$PWD:/workspace" \
            "$BUILDER_SIF" \
            bash -lc "cd /workspace && sf-make \"${RECIPE}\" --ignore-architectures --architecture \"${ARCH}\""

      - name: Set up Python for testing
        if: ${{ github.event.inputs['run-tests'] == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install builder tooling (for tests)
        if: ${{ github.event.inputs['run-tests'] == 'true' }}
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install -e .

      - name: Determine recipe version
        if: ${{ github.event.inputs['run-tests'] == 'true' }}
        id: get-version
        run: |
          python - <<'PY'
          import yaml, os
          p = f"recipes/${{ matrix.recipe }}/build.yaml"
          with open(p) as f:
              d = yaml.safe_load(f)
          version = d.get('version','latest')
          print(f"Detected version: {version}")
          with open(os.environ['GITHUB_OUTPUT'], 'a') as out:
              out.write(f"version={version}\n")
          PY

      - name: Run container tests (apptainer)
        if: ${{ github.event.inputs['run-tests'] == 'true' }}
        env:
          RECIPE: ${{ matrix.recipe }}
          VERSION: ${{ steps.get-version.outputs.version }}
        run: |
          set -euxo pipefail
          echo "Testing ${RECIPE}:${VERSION} using local SIF"
          mkdir -p builder
          python - <<'PY'
          from pathlib import Path
          import os

          from workflows.test_runner import ContainerTestRunner, TestRequest

          recipe = os.environ["RECIPE"]
          version = os.environ["VERSION"]

          runner = ContainerTestRunner()
          request = TestRequest(
              recipe=recipe,
              version=version,
              runtime="apptainer",
              location="local",
              test_config=Path(f"recipes/{recipe}/build.yaml"),
              cleanup=False,
              auto_cleanup=False,
              verbose=True,
              allow_missing_release=True,
              output_dir=Path("builder"),
              results_path=Path(f"builder/test-results-{recipe}.json"),
          )

          outcome = runner.run(request)
          print(f"Status: {outcome.status}")
          if outcome.reason:
              print(f"Reason: {outcome.reason}")
          PY
