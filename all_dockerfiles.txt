========================================
Recipe: afib1
File: build/afib1/afib1_1.6.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  bzip2 \
                  ca-certificates \
                  git \
                  python-is-python3 \
                  python3-pip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/code
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  cmake \
                  dos2unix \
                  g++ \
                  git \
                  libboost-all-dev \
                  libboost-program-options1.74.0 \
                  libfftw3-dev \
                  libhdf5-dev \
                  libpugixml-dev \
                  libpugixml1v5 \
                  libxml2-dev \
                  libxslt1-dev \
                  libxslt1.1 \
                  vim \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/ismrmrd/ismrmrd.git \
        && cd ./ismrmrd \
        && cmake . \
        && make -j 16 \
        && make install
RUN  git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \
        && cd siemens_to_ismrmrd \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make -j 16 \
        && make install
RUN  pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image
RUN  git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \
        && cd ismrmrd-python-tools \
        && pip3 install --no-cache-dir .
RUN  git clone https://github.com/kspaceKelvin/python-ismrmrd-server \
        && find /opt/code/python-ismrmrd-server -name "*.sh" -exec chmod +x {} \; \
        && find /opt/code/python-ismrmrd-server -name "*.sh" | xargs dos2unix \
        && sed -i 's/invertcontrast/default_replace_with_valid_name/g' /opt/code/python-ismrmrd-server/main.py
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  gcc-aarch64-linux-gnu cmake make build-essential \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/code
RUN  git clone https://github.com/Bostrix/FSL-BET2 \
        && cd FSL-BET2 \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make
ENV PATH="${PATH}:/opt/code/FSL-BET2/bin"
COPY ["afib1.py", \
      "/opt/code/python-ismrmrd-server/afib1.py"]
ENV DEPLOY_PATH="/opt/code/FSL-BET2/bin"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "bzip2", \
          "ca-certificates", \
          "git", \
          "wget", \
          "build-essential", \
          "python3-pip", \
          "python-is-python3" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           bzip2 \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           python-is-python3 \\\\\\n           python3-pip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "libxslt1.1", \
          "libboost-program-options1.74.0", \
          "libpugixml1v5", \
          "vim", \
          "dos2unix", \
          "git", \
          "cmake", \
          "g++", \
          "libhdf5-dev", \
          "libxml2-dev", \
          "libxslt1-dev", \
          "libboost-all-dev", \
          "libfftw3-dev", \
          "libpugixml-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           dos2unix \\\\\\n           g++ \\\\\\n           git \\\\\\n           libboost-all-dev \\\\\\n           libboost-program-options1.74.0 \\\\\\n           libfftw3-dev \\\\\\n           libhdf5-dev \\\\\\n           libpugixml-dev \\\\\\n           libpugixml1v5 \\\\\\n           libxml2-dev \\\\\\n           libxslt1-dev \\\\\\n           libxslt1.1 \\\\\\n           vim \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd.git \\\\\\n && cd ./ismrmrd \\\\\\n && cmake . \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \\\\\\n && cd siemens_to_ismrmrd \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \\\\\\n && cd ismrmrd-python-tools \\\\\\n && pip3 install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/kspaceKelvin/python-ismrmrd-server \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" -exec chmod +x {} \\\\; \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" | xargs dos2unix \\\\\\n && sed -i '"'"'s/invertcontrast/default_replace_with_valid_name/g'"'"' /opt/code/python-ismrmrd-server/main.py" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "gcc-aarch64-linux-gnu cmake make build-essential" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           gcc-aarch64-linux-gnu cmake make build-essential \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/Bostrix/FSL-BET2 \\\\\\n && cd FSL-BET2 \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "${PATH}:/opt/code/FSL-BET2/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "afib1.py", \
          "/opt/code/python-ismrmrd-server/afib1.py" \
        ], \
        "destination": "/opt/code/python-ismrmrd-server/afib1.py" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/code/FSL-BET2/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: afni
File: build/afni/afni_25.2.03.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  software-properties-common \
           && rm -rf /var/lib/apt/lists/*
RUN  add-apt-repository universe -y
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  bc \
                  build-essential \
                  cmake \
                  curl \
                  eog \
                  evince \
                  firefox \
                  gedit \
                  git \
                  gnome-terminal \
                  gnome-tweaks \
                  gsl-bin \
                  libcurl4-openssl-dev \
                  libgdal-dev \
                  libgfortran-14-dev \
                  libglib2.0-dev \
                  libglu1-mesa-dev \
                  libglut-dev \
                  libglw1-mesa-dev \
                  libgomp1 \
                  libgsl-dev \
                  libjpeg62 \
                  libnode-dev \
                  libopenblas-dev \
                  libssl-dev \
                  libudunits2-dev \
                  libxext-dev \
                  libxi-dev \
                  libxm4 \
                  libxml2-dev \
                  libxmu-dev \
                  libxpm-dev \
                  nautilus \
                  netpbm \
                  python-is-python3 \
                  python3-flask \
                  python3-flask-cors \
                  python3-matplotlib \
                  python3-numpy \
                  python3-pil \
                  r-base \
                  r-base-dev \
                  r-base-dev \
                  tcsh \
                  vim \
                  xfonts-100dpi \
                  xfonts-base \
                  xterm \
                  xvfb \
           && rm -rf /var/lib/apt/lists/*
RUN  cd /usr/include/GL \
        && mv GLwDrawA.h GLwDrawA.h.orig \
        && sed 's/GLAPI WidgetClass/extern GLAPI WidgetClass/' GLwDrawA.h.orig > /tmp/GLwDrawA.h \
        && mv /tmp/GLwDrawA.h GLwDrawA.h
WORKDIR /opt
RUN  curl -O https://afni.nimh.nih.gov/pub/dist/bin/misc/@update.afni.binaries \
        && tcsh @update.afni.binaries -package linux_ubuntu_24_64 -do_extras \
        && mv /root/abin /usr/local/abin
ENV PATH="/usr/local/abin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV R_LIBS="/usr/local/share/R-4.3"
RUN  curl -O https://afni.nimh.nih.gov/pub/dist/tgz/package_libs/linux_ubuntu_24_R-4.3_libs.tgz \
        && tar -xf linux_ubuntu_24_R-4.3_libs.tgz \
        && mv linux_ubuntu_24_R-4.3_libs /usr/local/share/R-4.3 \
        && rm -f linux_ubuntu_24_R-4.3_libs.tgz
RUN  rPkgsInstall -pkgs ALL
RUN  # AFNI Version Check - validate installed version matches expected version \
    && echo "=== AFNI Version Check ===" \
    && echo "Expected version: 25.2.03" \
    # Check if AFNI is installed
    && if ! command -v afni_system_check.py >/dev/null 2>&1; then \
         echo "✗ ERROR: afni_system_check.py not found - AFNI may not be installed" \
    &&   exit 1 \
    fi \
    && if ! command -v afni >/dev/null 2>&1; then \
         echo "✗ ERROR: afni executable not found" \
    &&   exit 1 \
    fi \
    # Check AFNI binaries directory
    && if [ ! -d "/usr/local/abin" ]; then \
         echo "✗ ERROR: AFNI binaries directory not found" \
    &&   exit 1 \
    fi \
    && echo "✓ AFNI installation checks passed" \
    # Get version from afni_system_check.py
    && echo "=== Getting AFNI Version ===" \
    && VERSION_OUTPUT=$(afni_system_check.py -check_all 2>&1) \
    # Check if we can find expected version in the output
    && if echo "$VERSION_OUTPUT" | grep -q "25.2.03"; then \
         echo "✓ SUCCESS: Found expected version 25.2.03" \
    && else \
    &&   echo "✗ ERROR: Expected version 25.2.03 not found in system check output" \
    &&   echo "Version check output (first 20 lines):" \
    &&   echo "$VERSION_OUTPUT" | head -20 \
    &&   echo "This indicates a version mismatch. Build failed." \
    &&   exit 1 \
    fi \
    && echo "✓ AFNI version validation completed successfully"
ENV OS="Linux" \
    PATH="/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH" \
    FREESURFER_HOME="/opt/freesurfer-7.4.1" \
    FREESURFER="/opt/freesurfer-7.4.1" \
    SUBJECTS_DIR="/opt/freesurfer-7.4.1/subjects" \
    LOCAL_DIR="/opt/freesurfer-7.4.1/local" \
    FSFAST_HOME="/opt/freesurfer-7.4.1/fsfast" \
    FMRI_ANALYSIS_DIR="/opt/freesurfer-7.4.1/fsfast" \
    FUNCTIONALS_DIR="/opt/freesurfer-7.4.1/sessions" \
    FS_OVERRIDE="0" \
    FIX_VERTEX_AREA="" \
    FSF_OUTPUT_FORMAT="nii.gz" \
    MINC_BIN_DIR="/opt/freesurfer-7.4.1/mni/bin" \
    MINC_LIB_DIR="/opt/freesurfer-7.4.1/mni/lib" \
    MNI_DIR="/opt/freesurfer-7.4.1/mni" \
    MNI_DATAPATH="/opt/freesurfer-7.4.1/mni/data" \
    MNI_PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5" \
    PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           libgomp1 \
           libxmu6 \
           libxt6 \
           perl \
           tcsh \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading FreeSurfer ..." \
    && mkdir -p /opt/freesurfer-7.4.1 \
    && curl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \
    | tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='s,freesurfer/,,' \
         --exclude='average/mult-comp-cor' \
         --exclude='lib/cuda' \
         --exclude='lib/qt' \
         --exclude='subjects/V1_average' \
         --exclude='subjects/bert' \
         --exclude='subjects/cvs_avg35' \
         --exclude='subjects/cvs_avg35_inMNI152' \
         --exclude='subjects/fsaverage3' \
         --exclude='subjects/fsaverage4' \
         --exclude='subjects/fsaverage5' \
         --exclude='subjects/fsaverage6' \
         --exclude='subjects/fsaverage_sym' \
         --exclude='trctrain'
ENV SUBJECTS_DIR="~/freesurfer-subjects-dir"
ENV DEPLOY_PATH="/usr/local/abin/"
COPY ["dependencies.R", \
      "/opt"]
COPY ["test.tgz", \
      "/opt/test.tgz"]
COPY ["license.txt", \
      "/opt/freesurfer-7.4.1/license.txt"]
RUN  Rscript /opt/dependencies.R
WORKDIR /opt
ENV DEPLOY_PATH="/usr/local/abin/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "software-properties-common" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           software-properties-common \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " add-apt-repository universe -y" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "libgdal-dev", \
          "libopenblas-dev", \
          "libnode-dev", \
          "libudunits2-dev", \
          "r-base", \
          "r-base-dev", \
          "tcsh", \
          "xfonts-base", \
          "libssl-dev", \
          "python-is-python3", \
          "python3-matplotlib", \
          "python3-numpy", \
          "python3-flask", \
          "python3-flask-cors", \
          "python3-pil", \
          "gsl-bin", \
          "netpbm", \
          "gnome-tweaks", \
          "libjpeg62", \
          "xvfb", \
          "xterm", \
          "vim", \
          "curl", \
          "gedit", \
          "evince", \
          "eog", \
          "libglu1-mesa-dev", \
          "libglw1-mesa-dev", \
          "libxm4", \
          "build-essential", \
          "libcurl4-openssl-dev", \
          "libxml2-dev", \
          "libgfortran-14-dev", \
          "libgomp1", \
          "gnome-terminal", \
          "nautilus", \
          "firefox", \
          "xfonts-100dpi", \
          "r-base-dev", \
          "cmake", \
          "bc", \
          "git", \
          "libxext-dev", \
          "libxmu-dev", \
          "libxpm-dev", \
          "libgsl-dev", \
          "libglut-dev", \
          "libxi-dev", \
          "libglib2.0-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           bc \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           curl \\\\\\n           eog \\\\\\n           evince \\\\\\n           firefox \\\\\\n           gedit \\\\\\n           git \\\\\\n           gnome-terminal \\\\\\n           gnome-tweaks \\\\\\n           gsl-bin \\\\\\n           libcurl4-openssl-dev \\\\\\n           libgdal-dev \\\\\\n           libgfortran-14-dev \\\\\\n           libglib2.0-dev \\\\\\n           libglu1-mesa-dev \\\\\\n           libglut-dev \\\\\\n           libglw1-mesa-dev \\\\\\n           libgomp1 \\\\\\n           libgsl-dev \\\\\\n           libjpeg62 \\\\\\n           libnode-dev \\\\\\n           libopenblas-dev \\\\\\n           libssl-dev \\\\\\n           libudunits2-dev \\\\\\n           libxext-dev \\\\\\n           libxi-dev \\\\\\n           libxm4 \\\\\\n           libxml2-dev \\\\\\n           libxmu-dev \\\\\\n           libxpm-dev \\\\\\n           nautilus \\\\\\n           netpbm \\\\\\n           python-is-python3 \\\\\\n           python3-flask \\\\\\n           python3-flask-cors \\\\\\n           python3-matplotlib \\\\\\n           python3-numpy \\\\\\n           python3-pil \\\\\\n           r-base \\\\\\n           r-base-dev \\\\\\n           r-base-dev \\\\\\n           tcsh \\\\\\n           vim \\\\\\n           xfonts-100dpi \\\\\\n           xfonts-base \\\\\\n           xterm \\\\\\n           xvfb \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " cd /usr/include/GL \\\\\\n && mv GLwDrawA.h GLwDrawA.h.orig \\\\\\n && sed '"'"'s/GLAPI WidgetClass/extern GLAPI WidgetClass/'"'"' GLwDrawA.h.orig > /tmp/GLwDrawA.h \\\\\\n && mv /tmp/GLwDrawA.h GLwDrawA.h" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -O https://afni.nimh.nih.gov/pub/dist/bin/misc/@update.afni.binaries \\\\\\n && tcsh @update.afni.binaries -package linux_ubuntu_24_64 -do_extras \\\\\\n && mv /root/abin /usr/local/abin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/usr/local/abin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "R_LIBS": "/usr/local/share/R-4.3" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -O https://afni.nimh.nih.gov/pub/dist/tgz/package_libs/linux_ubuntu_24_R-4.3_libs.tgz \\\\\\n && tar -xf linux_ubuntu_24_R-4.3_libs.tgz \\\\\\n && mv linux_ubuntu_24_R-4.3_libs /usr/local/share/R-4.3 \\\\\\n && rm -f linux_ubuntu_24_R-4.3_libs.tgz" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " rPkgsInstall -pkgs ALL" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " # AFNI Version Check - validate installed version matches expected version\\necho \\"=== AFNI Version Check ===\\"\\necho \\"Expected version: 25.2.03\\"\\n\\n# Check if AFNI is installed\\nif ! command -v afni_system_check.py >/dev/null 2>&1; then\\n  echo \\"\\u2717 ERROR: afni_system_check.py not found - AFNI may not be installed\\"\\n  exit 1\\nfi\\n\\nif ! command -v afni >/dev/null 2>&1; then\\n  echo \\"\\u2717 ERROR: afni executable not found\\"\\n  exit 1\\nfi\\n\\n# Check AFNI binaries directory\\nif [ ! -d \\"/usr/local/abin\\" ]; then\\n  echo \\"\\u2717 ERROR: AFNI binaries directory not found\\"\\n  exit 1\\nfi\\n\\necho \\"\\u2713 AFNI installation checks passed\\"\\n\\n# Get version from afni_system_check.py\\necho \\"=== Getting AFNI Version ===\\"\\nVERSION_OUTPUT=$\(afni_system_check.py -check_all 2>&1\)\\n\\n# Check if we can find expected version in the output\\nif echo \\"$VERSION_OUTPUT\\" | grep -q \\"25.2.03\\"; then\\n  echo \\"\\u2713 SUCCESS: Found expected version 25.2.03\\"\\nelse\\n  echo \\"\\u2717 ERROR: Expected version 25.2.03 not found in system check output\\"\\n  echo \\"Version check output \(first 20 lines\):\\"\\n  echo \\"$VERSION_OUTPUT\\" | head -20\\n  echo \\"This indicates a version mismatch. Build failed.\\"\\n  exit 1\\nfi\\n\\necho \\"\\u2713 AFNI version validation completed successfully\\"" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "OS": "Linux", \
        "PATH": "/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH", \
        "FREESURFER_HOME": "/opt/freesurfer-7.4.1", \
        "FREESURFER": "/opt/freesurfer-7.4.1", \
        "SUBJECTS_DIR": "/opt/freesurfer-7.4.1/subjects", \
        "LOCAL_DIR": "/opt/freesurfer-7.4.1/local", \
        "FSFAST_HOME": "/opt/freesurfer-7.4.1/fsfast", \
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer-7.4.1/fsfast", \
        "FUNCTIONALS_DIR": "/opt/freesurfer-7.4.1/sessions", \
        "FS_OVERRIDE": "0", \
        "FIX_VERTEX_AREA": "", \
        "FSF_OUTPUT_FORMAT": "nii.gz", \
        "MINC_BIN_DIR": "/opt/freesurfer-7.4.1/mni/bin", \
        "MINC_LIB_DIR": "/opt/freesurfer-7.4.1/mni/lib", \
        "MNI_DIR": "/opt/freesurfer-7.4.1/mni", \
        "MNI_DATAPATH": "/opt/freesurfer-7.4.1/mni/data", \
        "MNI_PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5", \
        "PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libgomp1 \\\\\\n    libxmu6 \\\\\\n    libxt6 \\\\\\n    perl \\\\\\n    tcsh\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading FreeSurfer ...\\"\\nmkdir -p /opt/freesurfer-7.4.1\\ncurl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \\\\\\n| tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='"'"'s,freesurfer/,,'"'"' \\\\\\n  --exclude='"'"'average/mult-comp-cor'"'"' \\\\\\n  --exclude='"'"'lib/cuda'"'"' \\\\\\n  --exclude='"'"'lib/qt'"'"' \\\\\\n  --exclude='"'"'subjects/V1_average'"'"' \\\\\\n  --exclude='"'"'subjects/bert'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35_inMNI152'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage3'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage4'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage5'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage6'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage_sym'"'"' \\\\\\n  --exclude='"'"'trctrain'"'"'" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SUBJECTS_DIR": "~/freesurfer-subjects-dir" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/usr/local/abin/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "dependencies.R", \
          "/opt" \
        ], \
        "destination": "/opt" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "test.tgz", \
          "/opt/test.tgz" \
        ], \
        "destination": "/opt/test.tgz" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "license.txt", \
          "/opt/freesurfer-7.4.1/license.txt" \
        ], \
        "destination": "/opt/freesurfer-7.4.1/license.txt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " Rscript /opt/dependencies.R" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/usr/local/abin/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: amico
File: build/amico/amico_2.1.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "dmri-amico"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV DEPLOY_BINS="python"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"dmri-amico\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: ants
File: build/ants/ants_2.6.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV ANTSPATH="/opt/ants-2.6.0/bin" \
    PATH="/opt/ants-2.6.0/bin:/opt/ants-2.6.0/Scripts:$PATH" \
    LD_LIBRARY_PATH="/opt/ants-2.6.0/lib:$LD_LIBRARY_PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           cmake \
           g++ \
           gcc \
           git \
           make \
           zlib1g-dev \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /tmp/ants/build \
    && git clone https://github.com/ANTsX/ANTs.git /tmp/ants/source \
    && cd /tmp/ants/source \
    && git fetch --tags \
    && git -c advice.detachedHead=false checkout v2.6.0 \
    && cd /tmp/ants/build \
    && cmake -DCMAKE_INSTALL_PREFIX=/opt/ants-2.6.0 -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF /tmp/ants/source \
    && make -j8 \
    && mkdir -p /opt/ants-2.6.0 \
    # Recent versions of ants create ANTS-build.
    && if [ -d ANTS-build ]; then \
         cd ANTS-build \
         && make install \
         && mv ../../source/Scripts/ /opt/ants-2.6.0; \
       else \
         mv bin lib /opt/ants-2.6.0/ \
         mv ../Scripts/* /opt/ants-2.6.0 ; \
    fi \
    && rm -rf /tmp/ants \
    && chmod a+rx /opt/ants-2.6.0 -R
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  bc \
           && rm -rf /var/lib/apt/lists/*
ENV DEPLOY_PATH="/opt/ants-2.6.0/bin:/opt/ants-2.6.0/Scripts"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "ANTSPATH": "/opt/ants-2.6.0/bin", \
        "PATH": "/opt/ants-2.6.0/bin:/opt/ants-2.6.0/Scripts:$PATH", \
        "LD_LIBRARY_PATH": "/opt/ants-2.6.0/lib:$LD_LIBRARY_PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    cmake \\\\\\n    g++ \\\\\\n    gcc \\\\\\n    git \\\\\\n    make \\\\\\n    zlib1g-dev\\nrm -rf /var/lib/apt/lists/*\\nmkdir -p /tmp/ants/build\\ngit clone https://github.com/ANTsX/ANTs.git /tmp/ants/source\\ncd /tmp/ants/source\\ngit fetch --tags\\ngit -c advice.detachedHead=false checkout v2.6.0\\ncd /tmp/ants/build\\ncmake -DCMAKE_INSTALL_PREFIX=/opt/ants-2.6.0 -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF /tmp/ants/source\\nmake -j8\\nmkdir -p /opt/ants-2.6.0\\n# Recent versions of ants create ANTS-build.\\nif [ -d ANTS-build ]; then \\\\\\n  cd ANTS-build \\\\\\n  && make install \\\\\\n  && mv ../../source/Scripts/ /opt/ants-2.6.0; \\\\\\nelse \\\\\\n  mv bin lib /opt/ants-2.6.0/ \\\\\\n  mv ../Scripts/* /opt/ants-2.6.0 ; \\\\\\nfi\\nrm -rf /tmp/ants\\nchmod a+rx /opt/ants-2.6.0 -R" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "bc" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           bc \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/ants-2.6.0/bin:/opt/ants-2.6.0/Scripts" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: arfiproc
File: build/arfiproc/arfiproc_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  bzip2 \
                  ca-certificates \
                  git \
                  python-is-python3 \
                  python3-pip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/code
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  cmake \
                  dos2unix \
                  g++ \
                  git \
                  libboost-all-dev \
                  libboost-program-options1.74.0 \
                  libfftw3-dev \
                  libhdf5-dev \
                  libpugixml-dev \
                  libpugixml1v5 \
                  libxml2-dev \
                  libxslt1-dev \
                  libxslt1.1 \
                  vim \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/ismrmrd/ismrmrd.git \
        && cd ./ismrmrd \
        && cmake . \
        && make -j 16 \
        && make install
RUN  git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \
        && cd siemens_to_ismrmrd \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make -j 16 \
        && make install
RUN  pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image
RUN  git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \
        && cd ismrmrd-python-tools \
        && pip3 install --no-cache-dir .
RUN  git clone https://github.com/kspaceKelvin/python-ismrmrd-server \
        && find /opt/code/python-ismrmrd-server -name "*.sh" -exec chmod +x {} \; \
        && find /opt/code/python-ismrmrd-server -name "*.sh" | xargs dos2unix \
        && sed -i 's/invertcontrast/default_replace_with_valid_name/g' /opt/code/python-ismrmrd-server/main.py
COPY ["arfiproc.py", \
      "/opt/code/python-ismrmrd-server/arfiproc.py"]
ENV DEPLOY_BINS="python3"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "bzip2", \
          "ca-certificates", \
          "git", \
          "wget", \
          "build-essential", \
          "python3-pip", \
          "python-is-python3" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           bzip2 \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           python-is-python3 \\\\\\n           python3-pip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "libxslt1.1", \
          "libboost-program-options1.74.0", \
          "libpugixml1v5", \
          "vim", \
          "dos2unix", \
          "git", \
          "cmake", \
          "g++", \
          "libhdf5-dev", \
          "libxml2-dev", \
          "libxslt1-dev", \
          "libboost-all-dev", \
          "libfftw3-dev", \
          "libpugixml-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           dos2unix \\\\\\n           g++ \\\\\\n           git \\\\\\n           libboost-all-dev \\\\\\n           libboost-program-options1.74.0 \\\\\\n           libfftw3-dev \\\\\\n           libhdf5-dev \\\\\\n           libpugixml-dev \\\\\\n           libpugixml1v5 \\\\\\n           libxml2-dev \\\\\\n           libxslt1-dev \\\\\\n           libxslt1.1 \\\\\\n           vim \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd.git \\\\\\n && cd ./ismrmrd \\\\\\n && cmake . \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \\\\\\n && cd siemens_to_ismrmrd \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \\\\\\n && cd ismrmrd-python-tools \\\\\\n && pip3 install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/kspaceKelvin/python-ismrmrd-server \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" -exec chmod +x {} \\\\; \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" | xargs dos2unix \\\\\\n && sed -i '"'"'s/invertcontrast/default_replace_with_valid_name/g'"'"' /opt/code/python-ismrmrd-server/main.py" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "arfiproc.py", \
          "/opt/code/python-ismrmrd-server/arfiproc.py" \
        ], \
        "destination": "/opt/code/python-ismrmrd-server/arfiproc.py" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python3" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: aslprep
File: build/aslprep/aslprep_0.7.5.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM pennlinc/aslprep:0.7.5
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV HOME="~/"
ENV DEPLOY_BINS="aslprep"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "pennlinc/aslprep:0.7.5" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "HOME": "~/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "aslprep" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: b0map
File: build/b0map/b0map_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  bzip2 \
                  ca-certificates \
                  git \
                  python-is-python3 \
                  python3-pip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/code
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  cmake \
                  dos2unix \
                  g++ \
                  git \
                  libboost-all-dev \
                  libboost-program-options1.74.0 \
                  libfftw3-dev \
                  libhdf5-dev \
                  libpugixml-dev \
                  libpugixml1v5 \
                  libxml2-dev \
                  libxslt1-dev \
                  libxslt1.1 \
                  vim \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/ismrmrd/ismrmrd.git \
        && cd ./ismrmrd \
        && cmake . \
        && make -j 16 \
        && make install
RUN  git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \
        && cd siemens_to_ismrmrd \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make -j 16 \
        && make install
RUN  pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image
RUN  git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \
        && cd ismrmrd-python-tools \
        && pip3 install --no-cache-dir .
RUN  git clone https://github.com/kspaceKelvin/python-ismrmrd-server \
        && find /opt/code/python-ismrmrd-server -name "*.sh" -exec chmod +x {} \; \
        && find /opt/code/python-ismrmrd-server -name "*.sh" | xargs dos2unix \
        && sed -i 's/invertcontrast/default_replace_with_valid_name/g' /opt/code/python-ismrmrd-server/main.py
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  gcc-aarch64-linux-gnu cmake make build-essential \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/code
RUN  git clone https://github.com/Bostrix/FSL-BET2 \
        && cd FSL-BET2 \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make
ENV PATH="${PATH}:/opt/code/FSL-BET2/bin"
COPY ["b0map.py", \
      "/opt/code/python-ismrmrd-server/b0map.py"]
ENV DEPLOY_PATH="/opt/code/FSL-BET2/bin"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "bzip2", \
          "ca-certificates", \
          "git", \
          "wget", \
          "build-essential", \
          "python3-pip", \
          "python-is-python3" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           bzip2 \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           python-is-python3 \\\\\\n           python3-pip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "libxslt1.1", \
          "libboost-program-options1.74.0", \
          "libpugixml1v5", \
          "vim", \
          "dos2unix", \
          "git", \
          "cmake", \
          "g++", \
          "libhdf5-dev", \
          "libxml2-dev", \
          "libxslt1-dev", \
          "libboost-all-dev", \
          "libfftw3-dev", \
          "libpugixml-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           dos2unix \\\\\\n           g++ \\\\\\n           git \\\\\\n           libboost-all-dev \\\\\\n           libboost-program-options1.74.0 \\\\\\n           libfftw3-dev \\\\\\n           libhdf5-dev \\\\\\n           libpugixml-dev \\\\\\n           libpugixml1v5 \\\\\\n           libxml2-dev \\\\\\n           libxslt1-dev \\\\\\n           libxslt1.1 \\\\\\n           vim \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd.git \\\\\\n && cd ./ismrmrd \\\\\\n && cmake . \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \\\\\\n && cd siemens_to_ismrmrd \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \\\\\\n && cd ismrmrd-python-tools \\\\\\n && pip3 install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/kspaceKelvin/python-ismrmrd-server \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" -exec chmod +x {} \\\\; \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" | xargs dos2unix \\\\\\n && sed -i '"'"'s/invertcontrast/default_replace_with_valid_name/g'"'"' /opt/code/python-ismrmrd-server/main.py" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "gcc-aarch64-linux-gnu cmake make build-essential" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           gcc-aarch64-linux-gnu cmake make build-essential \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/Bostrix/FSL-BET2 \\\\\\n && cd FSL-BET2 \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "${PATH}:/opt/code/FSL-BET2/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "b0map.py", \
          "/opt/code/python-ismrmrd-server/b0map.py" \
        ], \
        "destination": "/opt/code/python-ismrmrd-server/b0map.py" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/code/FSL-BET2/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: bart
File: build/bart/bart_0.9.00.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM docker.io/nvidia/cuda:12.0.0-devel-ubuntu22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  gcc \
                  libfftw3-dev \
                  liblapacke-dev \
                  libopenblas-dev \
                  libpng-dev \
                  make \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/bart-0.9.00/
RUN  curl -fsSL --retry 5 https://github.com/mrirecon/bart/archive/v0.9.00.tar.gz | tar -xz -C /opt/bart-0.9.00/ --strip-components 1
RUN  CUDA_BASE=/usr/local/cuda/ CUDA_LIB=lib64 CUDA=1 make -j 8
ENV PATH="/opt/bart-0.9.00:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV TOOLBOX_PATH="/opt/bart-0.9.00/"
ENV DEPLOY_PATH="/opt/bart-0.9.00/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "docker.io/nvidia/cuda:12.0.0-devel-ubuntu22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "make", \
          "gcc", \
          "libfftw3-dev", \
          "liblapacke-dev", \
          "libpng-dev", \
          "libopenblas-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           gcc \\\\\\n           libfftw3-dev \\\\\\n           liblapacke-dev \\\\\\n           libopenblas-dev \\\\\\n           libpng-dev \\\\\\n           make \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/bart-0.9.00/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://github.com/mrirecon/bart/archive/v0.9.00.tar.gz | tar -xz -C /opt/bart-0.9.00/ --strip-components 1" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " CUDA_BASE=/usr/local/cuda/ CUDA_LIB=lib64 CUDA=1 make -j 8" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/bart-0.9.00:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TOOLBOX_PATH": "/opt/bart-0.9.00/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/bart-0.9.00/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: batchheudiconv
File: build/batchheudiconv/batchheudiconv_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM kytk/batch-heudiconv:latest
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEPLOY_PATH="/opt/batch-heudiconv"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "kytk/batch-heudiconv:latest" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/batch-heudiconv" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: bidsappmrtrix3connectome
File: build/bidsappmrtrix3connectome/bidsappmrtrix3connectome_0.5.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM bids/mrtrix3_connectome:0.5.3
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
ENV PATH="${PATH}:/"
ENTRYPOINT ["bash"]
ENV DEPLOY_PATH="/opt/mrtrix3/bin:/usr/lib/ants:/opt/freesurfer/bin:/opt/freesurfer/mni/bin:/opt/fsl/bin:/opt/ROBEX:/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "bids/mrtrix3_connectome:0.5.3" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "${PATH}:/" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "bash" \
        ] \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/mrtrix3/bin:/usr/lib/ants:/opt/freesurfer/bin:/opt/freesurfer/mni/bin:/opt/fsl/bin:/opt/ROBEX:/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: bidscoin
File: build/bidscoin/bidscoin_4.6.2.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
ENV FSLDIR="/opt/miniconda-latest"
ENV FSLOUTPUTTYPE="NIFTI_GZ"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  dbus \
                  libgl1 \
                  libxcb-cursor0 \
                  python3-pyqt6 \
                  qt6-wayland \
                  tk \
           && rm -rf /var/lib/apt/lists/*
ENV PATH="/opt/dcm2niix-latest:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           curl \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /opt/dcm2niix-latest \
    && cd /opt/dcm2niix-latest \
    && curl -fsSL -o dcm2niix.zip https://github.com/rordenlab/dcm2niix/releases/latest/download/dcm2niix_lnx.zip \
    && unzip dcm2niix.zip \
    && rm dcm2niix.zip \
    && chmod +x dcm2niix
RUN if [ ! -z `which node` ] ; then \
         echo "node is installed, skipping its install." ; \
       else \
         apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           ca-certificates \
           curl \
           gnupg \
    && rm -rf /var/lib/apt/lists/* \
    &&     curl -SLO https://deb.nodesource.com/nsolid_setup_deb.sh \
    &&     chmod 500 nsolid_setup_deb.sh \
    &&     ./nsolid_setup_deb.sh 20 \
    &&     apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           nodejs \
    && rm -rf /var/lib/apt/lists/* ; \
         fi \
    && node --version \
    && npm --version \
    && npm install -g bids-validator@1.13.0
ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "-c" \
           "conda-forge" \
           "-c" \
           "https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public/" \
           "fsl-libvis" \
           "fsl-avwutils" \
           "fsl-flirt" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "bidscoin[spec2nii2bids,deface]==4.6.2"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV DEPLOY_BINS="bidscoin:bidscoiner:bidseditor:bidsmapper:bidsparticipants:deface:dicomsort:echocombine:medeface:physio2tsv:plotphysio:rawmapper:slicereport:fixmeta:dcm2niix:spec2nii:bids-validator"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLDIR": "/opt/miniconda-latest" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLOUTPUTTYPE": "NIFTI_GZ" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "python3-pyqt6", \
          "build-essential", \
          "libgl1", \
          "libxcb-cursor0", \
          "tk", \
          "dbus", \
          "qt6-wayland" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           dbus \\\\\\n           libgl1 \\\\\\n           libxcb-cursor0 \\\\\\n           python3-pyqt6 \\\\\\n           qt6-wayland \\\\\\n           tk \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/dcm2niix-latest:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nmkdir -p /opt/dcm2niix-latest\\ncd /opt/dcm2niix-latest\\ncurl -fsSL -o dcm2niix.zip https://github.com/rordenlab/dcm2niix/releases/latest/download/dcm2niix_lnx.zip\\nunzip dcm2niix.zip\\nrm dcm2niix.zip\\nchmod +x dcm2niix" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "if [ ! -z `which node` ] ; then \\\\\\n  echo \\"node is installed, skipping its install.\\" ; \\\\\\nelse \\\\\\n  apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    gnupg\\nrm -rf /var/lib/apt/lists/*\\n    curl -SLO https://deb.nodesource.com/nsolid_setup_deb.sh\\n    chmod 500 nsolid_setup_deb.sh\\n    ./nsolid_setup_deb.sh 20\\n    apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    nodejs\\nrm -rf /var/lib/apt/lists/* ; \\\\\\n  fi\\nnode --version\\nnpm --version\\nnpm install -g bids-validator@1.13.0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"-c\\" \\\\\\n    \\"conda-forge\\" \\\\\\n    \\"-c\\" \\\\\\n    \\"https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/public/\\" \\\\\\n    \\"fsl-libvis\\" \\\\\\n    \\"fsl-avwutils\\" \\\\\\n    \\"fsl-flirt\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"bidscoin[spec2nii2bids,deface]==4.6.2\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "bidscoin:bidscoiner:bidseditor:bidsmapper:bidsparticipants:deface:dicomsort:echocombine:medeface:physio2tsv:plotphysio:rawmapper:slicereport:fixmeta:dcm2niix:spec2nii:bids-validator" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: bidsme
File: build/bidsme/bidsme_1.9.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM bradley987/bidsme:1.9.3
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV MPLCONFIGDIR="~/.config/matplotlib-bidsme"
ENV DEPLOY_BINS="bidsme"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "bradley987/bidsme:1.9.3" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MPLCONFIGDIR": "~/.config/matplotlib-bidsme" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "bidsme" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: bidstools
File: build/bidstools/bidstools_1.0.4.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  gcc \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    && conda install -yq -nbase conda-libmamba-solver \
    && conda config --set solver libmamba \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.11" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "heudiconv" \
             "traits"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  dcmtk \
                  libgl1 \
                  libgtk2.0-0 \
                  libxcb-cursor0 \
                  pigz \
                  wget \
                  xmedcon \
                  zip \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/bru2
RUN  wget https://github.com/neurolabusc/Bru2Nii/releases/download/v1.0.20180303/Bru2_Linux.zip \
        && unzip Bru2_Linux.zip
ENV PATH="/opt/dcm2niix-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           cmake \
           g++ \
           gcc \
           git \
           make \
           pigz \
           zlib1g-dev \
    && rm -rf /var/lib/apt/lists/* \
    && git clone https://github.com/rordenlab/dcm2niix /tmp/dcm2niix \
    && mkdir /tmp/dcm2niix/build \
    && cd /tmp/dcm2niix/build \
    && cmake  -DCMAKE_INSTALL_PREFIX:PATH=/opt/dcm2niix-latest .. \
    && make -j1 \
    && make install \
    && rm -rf /tmp/dcm2niix
ENV PATH="$PATH:/opt/bru2"
ENV DEPLOY_BINS="heudiconv"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "gcc" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           gcc \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\nconda install -yq -nbase conda-libmamba-solver\\nconda config --set solver libmamba\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.11\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"heudiconv\\" \\\\\\n      \\"traits\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "zip", \
          "libgl1", \
          "libgtk2.0-0", \
          "dcmtk", \
          "xmedcon", \
          "pigz", \
          "libxcb-cursor0" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           dcmtk \\\\\\n           libgl1 \\\\\\n           libgtk2.0-0 \\\\\\n           libxcb-cursor0 \\\\\\n           pigz \\\\\\n           wget \\\\\\n           xmedcon \\\\\\n           zip \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/bru2" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://github.com/neurolabusc/Bru2Nii/releases/download/v1.0.20180303/Bru2_Linux.zip \\\\\\n && unzip Bru2_Linux.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/dcm2niix-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    cmake \\\\\\n    g++ \\\\\\n    gcc \\\\\\n    git \\\\\\n    make \\\\\\n    pigz \\\\\\n    zlib1g-dev\\nrm -rf /var/lib/apt/lists/*\\ngit clone https://github.com/rordenlab/dcm2niix /tmp/dcm2niix\\nmkdir /tmp/dcm2niix/build\\ncd /tmp/dcm2niix/build\\ncmake  -DCMAKE_INSTALL_PREFIX:PATH=/opt/dcm2niix-latest ..\\nmake -j1\\nmake install\\nrm -rf /tmp/dcm2niix" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/bru2" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "heudiconv" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: brainlesion
File: build/brainlesion/brainlesion_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "loguru==0.7.3" \
             "panoptica" \
             "deep_quality_estimation" \
             "petu" \
             "gliomoda" \
             "brainles-aurora" \
             "brats" \
             "brainles-preprocessing"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV DEPLOY_BINS="python"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"loguru==0.7.3\\" \\\\\\n      \\"panoptica\\" \\\\\\n      \\"deep_quality_estimation\\" \\\\\\n      \\"petu\\" \\\\\\n      \\"gliomoda\\" \\\\\\n      \\"brainles-aurora\\" \\\\\\n      \\"brats\\" \\\\\\n      \\"brainles-preprocessing\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: brainlifecli
File: build/brainlifecli/brainlifecli_1.7.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  curl \
                  gnupg \
           && rm -rf /var/lib/apt/lists/*
RUN  mkdir -p /etc/apt/keyrings \
        && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
        && echo 'deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main' | tee /etc/apt/sources.list.d/nodesource.list
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  nodejs \
           && rm -rf /var/lib/apt/lists/*
RUN  npm install -g npm@10.2.4 \
        && npm install -g brainlife
ENV PATH="/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV DEPLOY_BINS="bl"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "ca-certificates", \
          "curl", \
          "gnupg" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           gnupg \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mkdir -p /etc/apt/keyrings \\\\\\n && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \\\\\\n && echo '"'"'deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main'"'"' | tee /etc/apt/sources.list.d/nodesource.list" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "nodejs" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           nodejs \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " npm install -g npm@10.2.4 \\\\\\n && npm install -g brainlife" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "bl" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: brainstorm
File: build/brainstorm/brainstorm_3.211130.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:18.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  curl \
                  dbus-x11 \
                  openjdk-8-jre \
                  unzip \
           && rm -rf /var/lib/apt/lists/*
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR/v98/runtime/glnxa64:/opt/MCR/v98/bin/glnxa64:/opt/MCR/v98/sys/os/glnxa64:/opt/MCR/v98/extern/bin/glnxa64" \
    MATLABCMD="/opt/MCR/2020a/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/MCR/v98/x11/app-defaults" \
    MCRROOT="/opt/MCR/2020a"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2020a/Release/7/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020a_Update_7_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/MCR -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
WORKDIR /opt/brainstorm-3.211130/
RUN  curl -fsSL --retry 5 https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/brainstorm3.211130_mcr2020a.tar.gz       | tar -xz -C /opt/brainstorm-3.211130/ --strip-components 1
ENV PATH="/opt/brainstorm-3.211130/:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV DEPLOY_PATH="/opt/brainstorm-3.211130/"
ENV DEPLOY_BINS="brainstorm3.command"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:18.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "curl", \
          "unzip", \
          "ca-certificates", \
          "openjdk-8-jre", \
          "dbus-x11" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           dbus-x11 \\\\\\n           openjdk-8-jre \\\\\\n           unzip \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR/v98/runtime/glnxa64:/opt/MCR/v98/bin/glnxa64:/opt/MCR/v98/sys/os/glnxa64:/opt/MCR/v98/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/MCR/2020a/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/MCR/v98/x11/app-defaults", \
        "MCRROOT": "/opt/MCR/2020a" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2020a/Release/7/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020a_Update_7_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/MCR -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/brainstorm-3.211130/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/brainstorm3.211130_mcr2020a.tar.gz       | tar -xz -C /opt/brainstorm-3.211130/ --strip-components 1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/brainstorm-3.211130/:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/brainstorm-3.211130/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "brainstorm3.command" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: civet
File: build/civet/civet_2.1.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:18.04
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  automake \
                  bison \
                  build-essential \
                  ca-certificates \
                  flex \
                  freeglut3-dev \
                  git-lfs \
                  gnuplot-nox \
                  gsfonts \
                  imagemagick \
                  libjpeg-dev \
                  liblcms2-dev \
                  libpng-dev \
                  libqt4-dev \
                  libtext-format-perl \
                  libtiff-dev \
                  libtool \
                  libx11-dev \
                  libxi-dev \
                  libxmu-dev \
                  libz-dev \
                  locales \
                  perl \
           && rm -rf /var/lib/apt/lists/*
RUN rm /bin/sh && ln -s /bin/bash /bin/sh
RUN git config --global url.https://github.com/.insteadOf git@github.com:
WORKDIR /
RUN git clone git@github.com:aces/CIVET_Full_Project.git
WORKDIR /CIVET_Full_Project/
RUN git lfs pull
RUN mkdir -p Linux-x86_64/SRC
RUN tar -zxf TGZ/netpbm-10.35.94.tgz -C /CIVET_Full_Project/Linux-x86_64/SRC
RUN cp provision/netpbm/Makefile.config /CIVET_Full_Project/Linux-x86_64/SRC/netpbm-10.35.94
RUN sed -i 's/make /make -j 4 /g' install.sh && bash install.sh
WORKDIR /CIVET_Full_Project/Linux-x86_64
RUN rm -r SRC building man info
RUN chmod --recursive u+rX,g+rX,o+rX /CIVET_Full_Project
ENV BRAINVIEW="/CIVET_Full_Project/Linux-x86_64/share/brain-view"
ENV CIVET_JOB_SCHEDULER="DEFAULT"
ENV LD_LIBRARY_PATH="/CIVET_Full_Project/Linux-x86_64/lib"
ENV MINC_COMPRESS="4"
ENV MINC_FORCE_V2="1"
ENV MNI_DATAPATH="/CIVET_Full_Project/Linux-x86_64/share"
ENV PATH="/CIVET_Full_Project/Linux-x86_64/CIVET-2.1.1:/CIVET_Full_Project/Linux-x86_64/CIVET-2.1.1/progs:/CIVET_Full_Project/Linux-x86_64/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV PERL5LIB="/CIVET_Full_Project/Linux-x86_64/perl"
ENV R_LIBS="/CIVET_Full_Project/Linux-x86_64/R_LIBS"
ENV VOLUME_CACHE_THRESHOLD="-1"
COPY ["README.md", \
      "/README.md"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:18.04" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "perl", \
          "imagemagick", \
          "gnuplot-nox", \
          "locales", \
          "gsfonts", \
          "libtext-format-perl", \
          "build-essential", \
          "automake", \
          "libtool", \
          "bison", \
          "libz-dev", \
          "libjpeg-dev", \
          "libxmu-dev", \
          "libxi-dev", \
          "libqt4-dev", \
          "libpng-dev", \
          "libtiff-dev", \
          "liblcms2-dev", \
          "flex", \
          "libx11-dev", \
          "freeglut3-dev", \
          "git-lfs", \
          "ca-certificates" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           automake \\\\\\n           bison \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           flex \\\\\\n           freeglut3-dev \\\\\\n           git-lfs \\\\\\n           gnuplot-nox \\\\\\n           gsfonts \\\\\\n           imagemagick \\\\\\n           libjpeg-dev \\\\\\n           liblcms2-dev \\\\\\n           libpng-dev \\\\\\n           libqt4-dev \\\\\\n           libtext-format-perl \\\\\\n           libtiff-dev \\\\\\n           libtool \\\\\\n           libx11-dev \\\\\\n           libxi-dev \\\\\\n           libxmu-dev \\\\\\n           libz-dev \\\\\\n           locales \\\\\\n           perl \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "rm /bin/sh && ln -s /bin/bash /bin/sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "git config --global url.https://github.com/.insteadOf git@github.com:" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "git clone git@github.com:aces/CIVET_Full_Project.git" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/CIVET_Full_Project/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "git lfs pull" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p Linux-x86_64/SRC" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "tar -zxf TGZ/netpbm-10.35.94.tgz -C /CIVET_Full_Project/Linux-x86_64/SRC" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "cp provision/netpbm/Makefile.config /CIVET_Full_Project/Linux-x86_64/SRC/netpbm-10.35.94" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "sed -i '"'"'s/make /make -j 4 /g'"'"' install.sh && bash install.sh" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/CIVET_Full_Project/Linux-x86_64" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "rm -r SRC building man info" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod --recursive u+rX,g+rX,o+rX /CIVET_Full_Project" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "BRAINVIEW": "/CIVET_Full_Project/Linux-x86_64/share/brain-view" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CIVET_JOB_SCHEDULER": "DEFAULT" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "/CIVET_Full_Project/Linux-x86_64/lib" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MINC_COMPRESS": "4" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MINC_FORCE_V2": "1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MNI_DATAPATH": "/CIVET_Full_Project/Linux-x86_64/share" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/CIVET_Full_Project/Linux-x86_64/CIVET-2.1.1:/CIVET_Full_Project/Linux-x86_64/CIVET-2.1.1/progs:/CIVET_Full_Project/Linux-x86_64/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PERL5LIB": "/CIVET_Full_Project/Linux-x86_64/perl" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "R_LIBS": "/CIVET_Full_Project/Linux-x86_64/R_LIBS" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "VOLUME_CACHE_THRESHOLD": "-1" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.


========================================
Recipe: clinica
File: build/clinica/clinica_0.10.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV LD_LIBRARY_PATH=""
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.10" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "clinica"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV FSLDIR="/opt/fsl-6.0.7.16" \
    PATH="/opt/fsl-6.0.7.16/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.7.16/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.7.16/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libopenblas0 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           nano \
           python3 \
           sudo \
           wget \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing FSL ..." \
    && curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16
ENV FORCE_SPMMCR="1" \
    SPM_HTML_BROWSER="0" \
    SPMMCRCMD="/opt/spm12-r7771/run_spm12.sh /opt/matlab-compiler-runtime-2010a/v713 script" \
    LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlab-compiler-runtime-2010a/v713/runtime/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/bin/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/sys/os/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/extern/bin/glnxa64" \
    MATLABCMD="/opt/matlab-compiler-runtime-2010a/v713/toolbox/matlab"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           multiarch-support \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && _reproenv_tmppath="$(mktemp -t tmp.XXXXXXXXXX.deb)" \
    && curl -fsSL --retry 5 -o "${_reproenv_tmppath}" http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
    && apt-get install --yes -q "${_reproenv_tmppath}" \
    && rm "${_reproenv_tmppath}" \
    && apt-get update -qq \
    && apt-get install --yes --quiet --fix-missing \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl -fL -o "$TMPDIR/MCRInstaller.bin" https://dl.dropbox.com/s/zz6me0c3v4yq5fd/MCR_R2010a_glnxa64_installer.bin \
    && chmod +x "$TMPDIR/MCRInstaller.bin" \
    && "$TMPDIR/MCRInstaller.bin" -silent -P installLocation="/opt/matlab-compiler-runtime-2010a" \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR \
    # Install spm12
    && echo "Downloading standalone SPM12 ..." \
    && curl -fL -o /tmp/spm12.zip https://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/previous/spm12_r7771_R2010a.zip \
    && unzip -q /tmp/spm12.zip -d /tmp \
    && mkdir -p /opt/spm12-r7771 \
    && mv /tmp/spm12/* /opt/spm12-r7771/ \
    && chmod -R 777 /opt/spm12-r7771 \
    && rm -rf /tmp/spm* \
    # Test
    && /opt/spm12-r7771/run_spm12.sh /opt/matlab-compiler-runtime-2010a/v713 quit
ENV OS="Linux" \
    PATH="/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH" \
    FREESURFER_HOME="/opt/freesurfer-7.4.1" \
    FREESURFER="/opt/freesurfer-7.4.1" \
    SUBJECTS_DIR="/opt/freesurfer-7.4.1/subjects" \
    LOCAL_DIR="/opt/freesurfer-7.4.1/local" \
    FSFAST_HOME="/opt/freesurfer-7.4.1/fsfast" \
    FMRI_ANALYSIS_DIR="/opt/freesurfer-7.4.1/fsfast" \
    FUNCTIONALS_DIR="/opt/freesurfer-7.4.1/sessions" \
    FS_OVERRIDE="0" \
    FIX_VERTEX_AREA="" \
    FSF_OUTPUT_FORMAT="nii.gz" \
    MINC_BIN_DIR="/opt/freesurfer-7.4.1/mni/bin" \
    MINC_LIB_DIR="/opt/freesurfer-7.4.1/mni/lib" \
    MNI_DIR="/opt/freesurfer-7.4.1/mni" \
    MNI_DATAPATH="/opt/freesurfer-7.4.1/mni/data" \
    MNI_PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5" \
    PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           libgomp1 \
           libxmu6 \
           libxt6 \
           perl \
           tcsh \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading FreeSurfer ..." \
    && mkdir -p /opt/freesurfer-7.4.1 \
    && curl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \
    | tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='s,freesurfer/,,' \
         --exclude='average/mult-comp-cor' \
         --exclude='lib/cuda' \
         --exclude='lib/qt' \
         --exclude='subjects/V1_average' \
         --exclude='subjects/bert' \
         --exclude='subjects/cvs_avg35' \
         --exclude='subjects/cvs_avg35_inMNI152' \
         --exclude='subjects/fsaverage3' \
         --exclude='subjects/fsaverage4' \
         --exclude='subjects/fsaverage5' \
         --exclude='subjects/fsaverage6' \
         --exclude='subjects/fsaverage_sym' \
         --exclude='trctrain'
ENV ANTSPATH="/opt/ants-2.4.3/" \
    PATH="/opt/ants-2.4.3:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           curl \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading ANTs ..." \
    && curl -fsSL -o ants.zip https://github.com/ANTsX/ANTs/releases/download/v2.4.3/ants-2.4.3-centos7-X64-gcc.zip \
    && unzip ants.zip -d /opt \
    && mv /opt/ants-2.4.3/bin/* /opt/ants-2.4.3 \
    && rm ants.zip
ENV PATH="/opt/mrtrix3-3.0.4/bin:$PATH" \
    LD_LIBRARY_PATH="/opt/mrtrix3-3.0.4/lib:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
           libpng16-16 \
           libtiff5 \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MRtrix3 ..." \
    && mkdir -p /opt/mrtrix3-3.0.4 \
    && curl -fsSL https://github.com/MRtrix3/mrtrix3/releases/download/3.0.4/conda-linux-mrtrix3-3.0.4-h2bc3f7f_0.tar.bz2 \
    | tar -xj -C /opt/mrtrix3-3.0.4
ENV PATH="/opt/dcm2niix-latest:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           curl \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /opt/dcm2niix-latest \
    && cd /opt/dcm2niix-latest \
    && curl -fsSL -o dcm2niix.zip https://github.com/rordenlab/dcm2niix/releases/latest/download/dcm2niix_lnx.zip \
    && unzip dcm2niix.zip \
    && rm dcm2niix.zip \
    && chmod +x dcm2niix
ENV DEPLOY_BINS="clinica"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.10\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"clinica\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLDIR": "/opt/fsl-6.0.7.16", \
        "PATH": "/opt/fsl-6.0.7.16/bin:$PATH", \
        "FSLOUTPUTTYPE": "NIFTI_GZ", \
        "FSLMULTIFILEQUIT": "TRUE", \
        "FSLTCLSH": "/opt/fsl-6.0.7.16/bin/fsltclsh", \
        "FSLWISH": "/opt/fsl-6.0.7.16/bin/fslwish", \
        "FSLLOCKDIR": "", \
        "FSLMACHINELIST": "", \
        "FSLREMOTECALL": "", \
        "FSLGECUDAQ": "cuda.q" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    dc \\\\\\n    file \\\\\\n    libfontconfig1 \\\\\\n    libfreetype6 \\\\\\n    libgl1-mesa-dev \\\\\\n    libgl1-mesa-dri \\\\\\n    libglu1-mesa-dev \\\\\\n    libgomp1 \\\\\\n    libice6 \\\\\\n    libopenblas0 \\\\\\n    libxcursor1 \\\\\\n    libxft2 \\\\\\n    libxinerama1 \\\\\\n    libxrandr2 \\\\\\n    libxrender1 \\\\\\n    libxt6 \\\\\\n    nano \\\\\\n    python3 \\\\\\n    sudo \\\\\\n    wget\\nrm -rf /var/lib/apt/lists/*\\n\\necho \\"Installing FSL ...\\"\\ncurl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FORCE_SPMMCR": "1", \
        "SPM_HTML_BROWSER": "0", \
        "SPMMCRCMD": "/opt/spm12-r7771/run_spm12.sh /opt/matlab-compiler-runtime-2010a/v713 script", \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlab-compiler-runtime-2010a/v713/runtime/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/bin/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/sys/os/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/matlab-compiler-runtime-2010a/v713/toolbox/matlab" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    multiarch-support \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\n_reproenv_tmppath=\\"$\(mktemp -t tmp.XXXXXXXXXX.deb\)\\"\\ncurl -fsSL --retry 5 -o \\"${_reproenv_tmppath}\\" http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb\\napt-get install --yes -q \\"${_reproenv_tmppath}\\"\\nrm \\"${_reproenv_tmppath}\\"\\napt-get update -qq\\napt-get install --yes --quiet --fix-missing\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl -fL -o \\"$TMPDIR/MCRInstaller.bin\\" https://dl.dropbox.com/s/zz6me0c3v4yq5fd/MCR_R2010a_glnxa64_installer.bin\\nchmod +x \\"$TMPDIR/MCRInstaller.bin\\"\\n\\"$TMPDIR/MCRInstaller.bin\\" -silent -P installLocation=\\"/opt/matlab-compiler-runtime-2010a\\"\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR\\n# Install spm12\\necho \\"Downloading standalone SPM12 ...\\"\\ncurl -fL -o /tmp/spm12.zip https://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/previous/spm12_r7771_R2010a.zip\\nunzip -q /tmp/spm12.zip -d /tmp\\nmkdir -p /opt/spm12-r7771\\nmv /tmp/spm12/* /opt/spm12-r7771/\\nchmod -R 777 /opt/spm12-r7771\\nrm -rf /tmp/spm*\\n# Test\\n/opt/spm12-r7771/run_spm12.sh /opt/matlab-compiler-runtime-2010a/v713 quit" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "OS": "Linux", \
        "PATH": "/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH", \
        "FREESURFER_HOME": "/opt/freesurfer-7.4.1", \
        "FREESURFER": "/opt/freesurfer-7.4.1", \
        "SUBJECTS_DIR": "/opt/freesurfer-7.4.1/subjects", \
        "LOCAL_DIR": "/opt/freesurfer-7.4.1/local", \
        "FSFAST_HOME": "/opt/freesurfer-7.4.1/fsfast", \
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer-7.4.1/fsfast", \
        "FUNCTIONALS_DIR": "/opt/freesurfer-7.4.1/sessions", \
        "FS_OVERRIDE": "0", \
        "FIX_VERTEX_AREA": "", \
        "FSF_OUTPUT_FORMAT": "nii.gz", \
        "MINC_BIN_DIR": "/opt/freesurfer-7.4.1/mni/bin", \
        "MINC_LIB_DIR": "/opt/freesurfer-7.4.1/mni/lib", \
        "MNI_DIR": "/opt/freesurfer-7.4.1/mni", \
        "MNI_DATAPATH": "/opt/freesurfer-7.4.1/mni/data", \
        "MNI_PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5", \
        "PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libgomp1 \\\\\\n    libxmu6 \\\\\\n    libxt6 \\\\\\n    perl \\\\\\n    tcsh\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading FreeSurfer ...\\"\\nmkdir -p /opt/freesurfer-7.4.1\\ncurl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \\\\\\n| tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='"'"'s,freesurfer/,,'"'"' \\\\\\n  --exclude='"'"'average/mult-comp-cor'"'"' \\\\\\n  --exclude='"'"'lib/cuda'"'"' \\\\\\n  --exclude='"'"'lib/qt'"'"' \\\\\\n  --exclude='"'"'subjects/V1_average'"'"' \\\\\\n  --exclude='"'"'subjects/bert'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35_inMNI152'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage3'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage4'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage5'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage6'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage_sym'"'"' \\\\\\n  --exclude='"'"'trctrain'"'"'" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "ANTSPATH": "/opt/ants-2.4.3/", \
        "PATH": "/opt/ants-2.4.3:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading ANTs ...\\"\\ncurl -fsSL -o ants.zip https://github.com/ANTsX/ANTs/releases/download/v2.4.3/ants-2.4.3-centos7-X64-gcc.zip\\nunzip ants.zip -d /opt\\nmv /opt/ants-2.4.3/bin/* /opt/ants-2.4.3\\nrm ants.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/mrtrix3-3.0.4/bin:$PATH", \
        "LD_LIBRARY_PATH": "/opt/mrtrix3-3.0.4/lib:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libpng16-16 \\\\\\n    libtiff5\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MRtrix3 ...\\"\\nmkdir -p /opt/mrtrix3-3.0.4\\ncurl -fsSL https://github.com/MRtrix3/mrtrix3/releases/download/3.0.4/conda-linux-mrtrix3-3.0.4-h2bc3f7f_0.tar.bz2 \\\\\\n| tar -xj -C /opt/mrtrix3-3.0.4" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/dcm2niix-latest:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nmkdir -p /opt/dcm2niix-latest\\ncd /opt/dcm2niix-latest\\ncurl -fsSL -o dcm2niix.zip https://github.com/rordenlab/dcm2niix/releases/latest/download/dcm2niix_lnx.zip\\nunzip dcm2niix.zip\\nrm dcm2niix.zip\\nchmod +x dcm2niix" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "clinica" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: clinicadl
File: build/clinicadl/clinicadl_1.6.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "['python=3.10'," \
           "'pip']" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  source /opt/miniconda/bin/activate && conda create -y -n clinicadlEnv python=3.10 pip \
        && conda run -n clinicadlEnv pip install clinicadl clinica
ENV FSLDIR="/opt/fsl-6.0.7.16" \
    PATH="/opt/fsl-6.0.7.16/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.7.16/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.7.16/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libopenblas0 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           nano \
           python3 \
           sudo \
           wget \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing FSL ..." \
    && curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16
ENV FORCE_SPMMCR="1" \
    SPM_HTML_BROWSER="0" \
    SPMMCRCMD="/opt/spm12-r7771/run_spm12.sh /opt/matlab-compiler-runtime-2010a/v713 script" \
    LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlab-compiler-runtime-2010a/v713/runtime/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/bin/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/sys/os/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/extern/bin/glnxa64" \
    MATLABCMD="/opt/matlab-compiler-runtime-2010a/v713/toolbox/matlab"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           multiarch-support \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && _reproenv_tmppath="$(mktemp -t tmp.XXXXXXXXXX.deb)" \
    && curl -fsSL --retry 5 -o "${_reproenv_tmppath}" http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb \
    && apt-get install --yes -q "${_reproenv_tmppath}" \
    && rm "${_reproenv_tmppath}" \
    && apt-get update -qq \
    && apt-get install --yes --quiet --fix-missing \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl -fL -o "$TMPDIR/MCRInstaller.bin" https://dl.dropbox.com/s/zz6me0c3v4yq5fd/MCR_R2010a_glnxa64_installer.bin \
    && chmod +x "$TMPDIR/MCRInstaller.bin" \
    && "$TMPDIR/MCRInstaller.bin" -silent -P installLocation="/opt/matlab-compiler-runtime-2010a" \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR \
    # Install spm12
    && echo "Downloading standalone SPM12 ..." \
    && curl -fL -o /tmp/spm12.zip https://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/previous/spm12_r7771_R2010a.zip \
    && unzip -q /tmp/spm12.zip -d /tmp \
    && mkdir -p /opt/spm12-r7771 \
    && mv /tmp/spm12/* /opt/spm12-r7771/ \
    && chmod -R 777 /opt/spm12-r7771 \
    && rm -rf /tmp/spm* \
    # Test
    && /opt/spm12-r7771/run_spm12.sh /opt/matlab-compiler-runtime-2010a/v713 quit
ENV OS="Linux" \
    PATH="/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH" \
    FREESURFER_HOME="/opt/freesurfer-7.4.1" \
    FREESURFER="/opt/freesurfer-7.4.1" \
    SUBJECTS_DIR="/opt/freesurfer-7.4.1/subjects" \
    LOCAL_DIR="/opt/freesurfer-7.4.1/local" \
    FSFAST_HOME="/opt/freesurfer-7.4.1/fsfast" \
    FMRI_ANALYSIS_DIR="/opt/freesurfer-7.4.1/fsfast" \
    FUNCTIONALS_DIR="/opt/freesurfer-7.4.1/sessions" \
    FS_OVERRIDE="0" \
    FIX_VERTEX_AREA="" \
    FSF_OUTPUT_FORMAT="nii.gz" \
    MINC_BIN_DIR="/opt/freesurfer-7.4.1/mni/bin" \
    MINC_LIB_DIR="/opt/freesurfer-7.4.1/mni/lib" \
    MNI_DIR="/opt/freesurfer-7.4.1/mni" \
    MNI_DATAPATH="/opt/freesurfer-7.4.1/mni/data" \
    MNI_PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5" \
    PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           libgomp1 \
           libxmu6 \
           libxt6 \
           perl \
           tcsh \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading FreeSurfer ..." \
    && mkdir -p /opt/freesurfer-7.4.1 \
    && curl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \
    | tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='s,freesurfer/,,' \
         --exclude='average/mult-comp-cor' \
         --exclude='lib/cuda' \
         --exclude='lib/qt' \
         --exclude='subjects/V1_average' \
         --exclude='subjects/bert' \
         --exclude='subjects/cvs_avg35' \
         --exclude='subjects/cvs_avg35_inMNI152' \
         --exclude='subjects/fsaverage3' \
         --exclude='subjects/fsaverage4' \
         --exclude='subjects/fsaverage5' \
         --exclude='subjects/fsaverage6' \
         --exclude='subjects/fsaverage_sym' \
         --exclude='trctrain'
ENV ANTSPATH="/opt/ants-2.4.3/" \
    PATH="/opt/ants-2.4.3:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           curl \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading ANTs ..." \
    && curl -fsSL -o ants.zip https://github.com/ANTsX/ANTs/releases/download/v2.4.3/ants-2.4.3-centos7-X64-gcc.zip \
    && unzip ants.zip -d /opt \
    && mv /opt/ants-2.4.3/bin/* /opt/ants-2.4.3 \
    && rm ants.zip
ENV PATH="/opt/mrtrix3-3.0.4/bin:$PATH" \
    LD_LIBRARY_PATH="/opt/mrtrix3-3.0.4/lib:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
           libpng16-16 \
           libtiff5 \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MRtrix3 ..." \
    && mkdir -p /opt/mrtrix3-3.0.4 \
    && curl -fsSL https://github.com/MRtrix3/mrtrix3/releases/download/3.0.4/conda-linux-mrtrix3-3.0.4-h2bc3f7f_0.tar.bz2 \
    | tar -xj -C /opt/mrtrix3-3.0.4
ENV PATH="/opt/dcm2niix-latest:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           curl \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /opt/dcm2niix-latest \
    && cd /opt/dcm2niix-latest \
    && curl -fsSL -o dcm2niix.zip https://github.com/rordenlab/dcm2niix/releases/latest/download/dcm2niix_lnx.zip \
    && unzip dcm2niix.zip \
    && rm dcm2niix.zip \
    && chmod +x dcm2niix
ENV DEPLOY_PATH="/opt/miniconda"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"['"'"'python=3.10'"'"',\\" \\\\\\n    \\"'"'"'pip'"'"']\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " source /opt/miniconda/bin/activate && conda create -y -n clinicadlEnv python=3.10 pip \\\\\\n && conda run -n clinicadlEnv pip install clinicadl clinica" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLDIR": "/opt/fsl-6.0.7.16", \
        "PATH": "/opt/fsl-6.0.7.16/bin:$PATH", \
        "FSLOUTPUTTYPE": "NIFTI_GZ", \
        "FSLMULTIFILEQUIT": "TRUE", \
        "FSLTCLSH": "/opt/fsl-6.0.7.16/bin/fsltclsh", \
        "FSLWISH": "/opt/fsl-6.0.7.16/bin/fslwish", \
        "FSLLOCKDIR": "", \
        "FSLMACHINELIST": "", \
        "FSLREMOTECALL": "", \
        "FSLGECUDAQ": "cuda.q" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    dc \\\\\\n    file \\\\\\n    libfontconfig1 \\\\\\n    libfreetype6 \\\\\\n    libgl1-mesa-dev \\\\\\n    libgl1-mesa-dri \\\\\\n    libglu1-mesa-dev \\\\\\n    libgomp1 \\\\\\n    libice6 \\\\\\n    libopenblas0 \\\\\\n    libxcursor1 \\\\\\n    libxft2 \\\\\\n    libxinerama1 \\\\\\n    libxrandr2 \\\\\\n    libxrender1 \\\\\\n    libxt6 \\\\\\n    nano \\\\\\n    python3 \\\\\\n    sudo \\\\\\n    wget\\nrm -rf /var/lib/apt/lists/*\\n\\necho \\"Installing FSL ...\\"\\ncurl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FORCE_SPMMCR": "1", \
        "SPM_HTML_BROWSER": "0", \
        "SPMMCRCMD": "/opt/spm12-r7771/run_spm12.sh /opt/matlab-compiler-runtime-2010a/v713 script", \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/matlab-compiler-runtime-2010a/v713/runtime/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/bin/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/sys/os/glnxa64:/opt/matlab-compiler-runtime-2010a/v713/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/matlab-compiler-runtime-2010a/v713/toolbox/matlab" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    multiarch-support \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\n_reproenv_tmppath=\\"$\(mktemp -t tmp.XXXXXXXXXX.deb\)\\"\\ncurl -fsSL --retry 5 -o \\"${_reproenv_tmppath}\\" http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb\\napt-get install --yes -q \\"${_reproenv_tmppath}\\"\\nrm \\"${_reproenv_tmppath}\\"\\napt-get update -qq\\napt-get install --yes --quiet --fix-missing\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl -fL -o \\"$TMPDIR/MCRInstaller.bin\\" https://dl.dropbox.com/s/zz6me0c3v4yq5fd/MCR_R2010a_glnxa64_installer.bin\\nchmod +x \\"$TMPDIR/MCRInstaller.bin\\"\\n\\"$TMPDIR/MCRInstaller.bin\\" -silent -P installLocation=\\"/opt/matlab-compiler-runtime-2010a\\"\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR\\n# Install spm12\\necho \\"Downloading standalone SPM12 ...\\"\\ncurl -fL -o /tmp/spm12.zip https://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/previous/spm12_r7771_R2010a.zip\\nunzip -q /tmp/spm12.zip -d /tmp\\nmkdir -p /opt/spm12-r7771\\nmv /tmp/spm12/* /opt/spm12-r7771/\\nchmod -R 777 /opt/spm12-r7771\\nrm -rf /tmp/spm*\\n# Test\\n/opt/spm12-r7771/run_spm12.sh /opt/matlab-compiler-runtime-2010a/v713 quit" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "OS": "Linux", \
        "PATH": "/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH", \
        "FREESURFER_HOME": "/opt/freesurfer-7.4.1", \
        "FREESURFER": "/opt/freesurfer-7.4.1", \
        "SUBJECTS_DIR": "/opt/freesurfer-7.4.1/subjects", \
        "LOCAL_DIR": "/opt/freesurfer-7.4.1/local", \
        "FSFAST_HOME": "/opt/freesurfer-7.4.1/fsfast", \
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer-7.4.1/fsfast", \
        "FUNCTIONALS_DIR": "/opt/freesurfer-7.4.1/sessions", \
        "FS_OVERRIDE": "0", \
        "FIX_VERTEX_AREA": "", \
        "FSF_OUTPUT_FORMAT": "nii.gz", \
        "MINC_BIN_DIR": "/opt/freesurfer-7.4.1/mni/bin", \
        "MINC_LIB_DIR": "/opt/freesurfer-7.4.1/mni/lib", \
        "MNI_DIR": "/opt/freesurfer-7.4.1/mni", \
        "MNI_DATAPATH": "/opt/freesurfer-7.4.1/mni/data", \
        "MNI_PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5", \
        "PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libgomp1 \\\\\\n    libxmu6 \\\\\\n    libxt6 \\\\\\n    perl \\\\\\n    tcsh\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading FreeSurfer ...\\"\\nmkdir -p /opt/freesurfer-7.4.1\\ncurl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \\\\\\n| tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='"'"'s,freesurfer/,,'"'"' \\\\\\n  --exclude='"'"'average/mult-comp-cor'"'"' \\\\\\n  --exclude='"'"'lib/cuda'"'"' \\\\\\n  --exclude='"'"'lib/qt'"'"' \\\\\\n  --exclude='"'"'subjects/V1_average'"'"' \\\\\\n  --exclude='"'"'subjects/bert'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35_inMNI152'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage3'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage4'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage5'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage6'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage_sym'"'"' \\\\\\n  --exclude='"'"'trctrain'"'"'" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "ANTSPATH": "/opt/ants-2.4.3/", \
        "PATH": "/opt/ants-2.4.3:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading ANTs ...\\"\\ncurl -fsSL -o ants.zip https://github.com/ANTsX/ANTs/releases/download/v2.4.3/ants-2.4.3-centos7-X64-gcc.zip\\nunzip ants.zip -d /opt\\nmv /opt/ants-2.4.3/bin/* /opt/ants-2.4.3\\nrm ants.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/mrtrix3-3.0.4/bin:$PATH", \
        "LD_LIBRARY_PATH": "/opt/mrtrix3-3.0.4/lib:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libpng16-16 \\\\\\n    libtiff5\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MRtrix3 ...\\"\\nmkdir -p /opt/mrtrix3-3.0.4\\ncurl -fsSL https://github.com/MRtrix3/mrtrix3/releases/download/3.0.4/conda-linux-mrtrix3-3.0.4-h2bc3f7f_0.tar.bz2 \\\\\\n| tar -xj -C /opt/mrtrix3-3.0.4" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/dcm2niix-latest:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nmkdir -p /opt/dcm2niix-latest\\ncd /opt/dcm2niix-latest\\ncurl -fsSL -o dcm2niix.zip https://github.com/rordenlab/dcm2niix/releases/latest/download/dcm2niix_lnx.zip\\nunzip dcm2niix.zip\\nrm dcm2niix.zip\\nchmod +x dcm2niix" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/miniconda" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: conn
File: build/conn/conn_22a.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR-2022a/v912/runtime/glnxa64:/opt/MCR-2022a/v912/bin/glnxa64:/opt/MCR-2022a/v912/sys/os/glnxa64:/opt/MCR-2022a/v912/extern/bin/glnxa64" \
    MATLABCMD="/opt/MCR-2022a/2022a/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/MCR-2022a/v912/x11/app-defaults" \
    MCRROOT="/opt/MCR-2022a/2022a"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2022a/Release/7/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2022a_Update_7_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/MCR-2022a -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
WORKDIR /opt/conn-22a/
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  wget \
           && rm -rf /var/lib/apt/lists/*
RUN  wget --no-check-certificate --progress=bar:force -P /opt/conn-22a/ https://www.nitrc.org/frs/download.php/13733/conn22a_glnxa64.zip \
        && unzip -q conn22a_glnxa64.zip -d /opt/conn-22a/ \
        && rm -f conn22a_glnxa64.zip
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  openjdk-8-jre \
           && rm -rf /var/lib/apt/lists/*
ENV PATH="/opt/conn-22a/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
ENV DEPLOY_BINS="conn"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR-2022a/v912/runtime/glnxa64:/opt/MCR-2022a/v912/bin/glnxa64:/opt/MCR-2022a/v912/sys/os/glnxa64:/opt/MCR-2022a/v912/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/MCR-2022a/2022a/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/MCR-2022a/v912/x11/app-defaults", \
        "MCRROOT": "/opt/MCR-2022a/2022a" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2022a/Release/7/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2022a_Update_7_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/MCR-2022a -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/conn-22a/" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --no-check-certificate --progress=bar:force -P /opt/conn-22a/ https://www.nitrc.org/frs/download.php/13733/conn22a_glnxa64.zip \\\\\\n && unzip -q conn22a_glnxa64.zip -d /opt/conn-22a/ \\\\\\n && rm -f conn22a_glnxa64.zip" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "openjdk-8-jre" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           openjdk-8-jre \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/conn-22a/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "conn" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: connectomeworkbench
File: build/connectomeworkbench/connectomeworkbench_2.0.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM neurodebian:bookworm-non-free
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  connectome-workbench \
           && rm -rf /var/lib/apt/lists/*
ENV OS="Linux" \
    PATH="/opt/freesurfer-7.1.1/bin:/opt/freesurfer-7.1.1/fsfast/bin:/opt/freesurfer-7.1.1/tktools:/opt/freesurfer-7.1.1/mni/bin:$PATH" \
    FREESURFER_HOME="/opt/freesurfer-7.1.1" \
    FREESURFER="/opt/freesurfer-7.1.1" \
    SUBJECTS_DIR="/opt/freesurfer-7.1.1/subjects" \
    LOCAL_DIR="/opt/freesurfer-7.1.1/local" \
    FSFAST_HOME="/opt/freesurfer-7.1.1/fsfast" \
    FMRI_ANALYSIS_DIR="/opt/freesurfer-7.1.1/fsfast" \
    FUNCTIONALS_DIR="/opt/freesurfer-7.1.1/sessions" \
    FS_OVERRIDE="0" \
    FIX_VERTEX_AREA="" \
    FSF_OUTPUT_FORMAT="nii.gz" \
    MINC_BIN_DIR="/opt/freesurfer-7.1.1/mni/bin" \
    MINC_LIB_DIR="/opt/freesurfer-7.1.1/mni/lib" \
    MNI_DIR="/opt/freesurfer-7.1.1/mni" \
    MNI_DATAPATH="/opt/freesurfer-7.1.1/mni/data" \
    MNI_PERL5LIB="/opt/freesurfer-7.1.1/mni/share/perl5" \
    PERL5LIB="/opt/freesurfer-7.1.1/mni/share/perl5"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           libgomp1 \
           libxmu6 \
           libxt6 \
           perl \
           tcsh \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading FreeSurfer ..." \
    && mkdir -p /opt/freesurfer-7.1.1 \
    && curl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.1.1/freesurfer-linux-centos6_x86_64-7.1.1.tar.gz \
    | tar -xz -C /opt/freesurfer-7.1.1 --owner root --group root --no-same-owner --transform='s,freesurfer/,,' \
         --exclude='average/mult-comp-cor' \
         --exclude='lib/cuda' \
         --exclude='lib/qt' \
         --exclude='subjects/V1_average' \
         --exclude='subjects/bert' \
         --exclude='subjects/cvs_avg35' \
         --exclude='subjects/cvs_avg35_inMNI152' \
         --exclude='subjects/fsaverage3' \
         --exclude='subjects/fsaverage4' \
         --exclude='subjects/fsaverage5' \
         --exclude='subjects/fsaverage6' \
         --exclude='subjects/fsaverage_sym' \
         --exclude='trctrain'
COPY ["license.txt", \
      "/opt/freesurfer-7.1.1/license.txt"]
ENV DEPLOY_BINS="wb_view:wb_command:wb_shortcuts"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "neurodebian:bookworm-non-free" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "connectome-workbench" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           connectome-workbench \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "OS": "Linux", \
        "PATH": "/opt/freesurfer-7.1.1/bin:/opt/freesurfer-7.1.1/fsfast/bin:/opt/freesurfer-7.1.1/tktools:/opt/freesurfer-7.1.1/mni/bin:$PATH", \
        "FREESURFER_HOME": "/opt/freesurfer-7.1.1", \
        "FREESURFER": "/opt/freesurfer-7.1.1", \
        "SUBJECTS_DIR": "/opt/freesurfer-7.1.1/subjects", \
        "LOCAL_DIR": "/opt/freesurfer-7.1.1/local", \
        "FSFAST_HOME": "/opt/freesurfer-7.1.1/fsfast", \
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer-7.1.1/fsfast", \
        "FUNCTIONALS_DIR": "/opt/freesurfer-7.1.1/sessions", \
        "FS_OVERRIDE": "0", \
        "FIX_VERTEX_AREA": "", \
        "FSF_OUTPUT_FORMAT": "nii.gz", \
        "MINC_BIN_DIR": "/opt/freesurfer-7.1.1/mni/bin", \
        "MINC_LIB_DIR": "/opt/freesurfer-7.1.1/mni/lib", \
        "MNI_DIR": "/opt/freesurfer-7.1.1/mni", \
        "MNI_DATAPATH": "/opt/freesurfer-7.1.1/mni/data", \
        "MNI_PERL5LIB": "/opt/freesurfer-7.1.1/mni/share/perl5", \
        "PERL5LIB": "/opt/freesurfer-7.1.1/mni/share/perl5" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libgomp1 \\\\\\n    libxmu6 \\\\\\n    libxt6 \\\\\\n    perl \\\\\\n    tcsh\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading FreeSurfer ...\\"\\nmkdir -p /opt/freesurfer-7.1.1\\ncurl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.1.1/freesurfer-linux-centos6_x86_64-7.1.1.tar.gz \\\\\\n| tar -xz -C /opt/freesurfer-7.1.1 --owner root --group root --no-same-owner --transform='"'"'s,freesurfer/,,'"'"' \\\\\\n  --exclude='"'"'average/mult-comp-cor'"'"' \\\\\\n  --exclude='"'"'lib/cuda'"'"' \\\\\\n  --exclude='"'"'lib/qt'"'"' \\\\\\n  --exclude='"'"'subjects/V1_average'"'"' \\\\\\n  --exclude='"'"'subjects/bert'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35_inMNI152'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage3'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage4'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage5'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage6'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage_sym'"'"' \\\\\\n  --exclude='"'"'trctrain'"'"'" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "license.txt", \
          "/opt/freesurfer-7.1.1/license.txt" \
        ], \
        "destination": "/opt/freesurfer-7.1.1/license.txt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "wb_view:wb_command:wb_shortcuts" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: convert3d
File: build/convert3d/convert3d_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM debian:bookworm
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV C3DPATH="/opt/convert3d-1.0.0" \
    PATH="/opt/convert3d-1.0.0/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading Convert3D ..." \
    && mkdir -p /opt/convert3d-1.0.0 \
    && curl -fsSL https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download \
    | tar -xz -C /opt/convert3d-1.0.0 --strip-components 1
ENV DEPLOY_PATH="/opt/convert3d-1.0.0/bin/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "debian:bookworm" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "C3DPATH": "/opt/convert3d-1.0.0", \
        "PATH": "/opt/convert3d-1.0.0/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading Convert3D ...\\"\\nmkdir -p /opt/convert3d-1.0.0\\ncurl -fsSL https://sourceforge.net/projects/c3d/files/c3d/1.0.0/c3d-1.0.0-Linux-x86_64.tar.gz/download \\\\\\n| tar -xz -C /opt/convert3d-1.0.0 --strip-components 1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/convert3d-1.0.0/bin/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: cpac
File: build/cpac/cpac_1.8.7.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM fcpindi/c-pac:release-v1.8.7.post1.dev3
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN  pip install --upgrade setuptools \
        && pip install --upgrade backports.tarfile
ENV DEPLOY_BINS="cpac"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "fcpindi/c-pac:release-v1.8.7.post1.dev3" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install --upgrade setuptools \\\\\\n && pip install --upgrade backports.tarfile" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "cpac" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: dafne
File: build/dafne/dafne_1.8a4.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  ca-certificates \
                  curl \
                  git \
                  libgl1 \
                  libglib2.0-0 \
                  libsm6 \
                  libxext6 \
                  libxrender1 \
                  unzip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda-py38_22.11.1-1" \
    PATH="/opt/miniconda-py38_22.11.1-1/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-py38_22.11.1-1/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py38_22.11.1-1-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-py38_22.11.1-1 \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda install -yq -nbase conda-libmamba-solver \
    && conda config --set solver libmamba \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.8" \
           "tensorflow" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "pyradiomics" \
             "dafne==1.8a4"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV DEPLOY_BINS="dafne"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "wget", \
          "git", \
          "curl", \
          "ca-certificates", \
          "unzip", \
          "libgl1", \
          "libglib2.0-0", \
          "libsm6", \
          "libxrender1", \
          "libxext6" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           git \\\\\\n           libgl1 \\\\\\n           libglib2.0-0 \\\\\\n           libsm6 \\\\\\n           libxext6 \\\\\\n           libxrender1 \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-py38_22.11.1-1", \
        "PATH": "/opt/miniconda-py38_22.11.1-1/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-py38_22.11.1-1/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py38_22.11.1-1-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-py38_22.11.1-1\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda install -yq -nbase conda-libmamba-solver\\nconda config --set solver libmamba\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.8\\" \\\\\\n    \\"tensorflow\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"pyradiomics\\" \\\\\\n      \\"dafne==1.8a4\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "dafne" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: datalad
File: build/datalad/datalad_1.1.5.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM neurodebian:bookworm-non-free
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  datalad \
                  datalad-container \
           && rm -rf /var/lib/apt/lists/*
ENV DEPLOY_BINS="datalad"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "neurodebian:bookworm-non-free" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "datalad", \
          "datalad-container" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           datalad \\\\\\n           datalad-container \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "datalad" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: dcm2bids
File: build/dcm2bids/dcm2bids_3.2.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM unfmontreal/dcm2bids:3.2.0
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN  chmod a+rwx /dcm2bids/dcm2bids -R
RUN test "$(getent passwd dcm2bidsuser)" \
    || useradd --no-user-group --create-home --shell /bin/bash dcm2bidsuser
USER dcm2bidsuser
ENV DEPLOY_BINS="dcm2bids"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "unfmontreal/dcm2bids:3.2.0" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod a+rwx /dcm2bids/dcm2bids -R" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "dcm2bidsuser" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "dcm2bids" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER dcm2bidsuser
# End saving to specification to JSON.

========================================
Recipe: dcm2niix
File: build/dcm2niix/dcm2niix_v1.0.20240202.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  git \
                  pigz \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/dcm2niix-v1.0.20240202
RUN  curl -fLO https://github.com/rordenlab/dcm2niix/releases/download/v1.0.20240202/dcm2niix_lnx.zip \
        && unzip dcm2niix_lnx.zip \
        && chmod a+rwx /opt/dcm2niix-v1.0.20240202/dcm2niix \
        && rm -rf dcm2niix_lnx.zip
ENV PATH="$PATH:/opt/dcm2niix-v1.0.20240202"
ENV DEPLOY_PATH="/opt/dcm2niix-v1.0.20240202"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git", \
          "wget", \
          "ca-certificates", \
          "pigz" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           pigz \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/dcm2niix-v1.0.20240202" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fLO https://github.com/rordenlab/dcm2niix/releases/download/v1.0.20240202/dcm2niix_lnx.zip \\\\\\n && unzip dcm2niix_lnx.zip \\\\\\n && chmod a+rwx /opt/dcm2niix-v1.0.20240202/dcm2niix \\\\\\n && rm -rf dcm2niix_lnx.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/dcm2niix-v1.0.20240202" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/dcm2niix-v1.0.20240202" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: deepisles
File: build/deepisles/deepisles_1.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  git \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/ezequieldlrosa/DeepIsles.git \
        && cd DeepIsles
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN --mount=type=bind,source=cache/h3c5c8e07,target=/.neurocontainer-cache/h3c5c8e07,readonly cp /.neurocontainer-cache/h3c5c8e07/environment.yml /tmp/environment.yml \
        && conda config --set channel_priority flexible \
        && conda env create -f /tmp/environment.yml \
        && rm /tmp/environment.yml
ENV CONDA_DEFAULT_ENV="myenv"
ENV PATH="/opt/miniconda/envs/myenv/bin:$PATH"
RUN  echo "conda activate myenv" >> ~/.bashrc
ENV DEPLOY_BINS="python"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           git \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ezequieldlrosa/DeepIsles.git \\\\\\n && cd DeepIsles" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h3c5c8e07,target=/.neurocontainer-cache/h3c5c8e07,readonly cp /.neurocontainer-cache/h3c5c8e07/environment.yml /tmp/environment.yml \\\\\\n && conda config --set channel_priority flexible \\\\\\n && conda env create -f /tmp/environment.yml \\\\\\n && rm /tmp/environment.yml" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DEFAULT_ENV": "myenv" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/miniconda/envs/myenv/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " echo \\"conda activate myenv\\" >> ~/.bashrc" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: deeplabcut
File: build/deeplabcut/deeplabcut_2.3.11.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
COPY ["deeplabcut_env.yaml", \
      "/opt/deeplabcut_env.yaml"]
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda env create  --name deeplabcut --file /opt/deeplabcut_env.yaml \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV PATH="/opt/miniconda/envs/deeplabcut/bin:$PATH"
ENV DEPLOY_BINS="python"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "deeplabcut_env.yaml", \
          "/opt/deeplabcut_env.yaml" \
        ], \
        "destination": "/opt/deeplabcut_env.yaml" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda env create  --name deeplabcut --file /opt/deeplabcut_env.yaml\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/miniconda/envs/deeplabcut/bin:$PATH" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: deepretinotopy
File: build/deepretinotopy/deepretinotopy_1.0.15.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ghcr.io/neurodesk/freesurfer_7.3.2:20230216
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && if ls /etc/yum.repos.d/CentOS-* >/dev/null 2>&1; then \
           sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-* \
    &&     sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*; \
    fi \
    && yum install -y -q \
           bzip2 \
           ca-certificates \
           glibc-langpack-en \
           glibc-locale-source \
           unzip \
    && yum clean all \
    && rm -rf /var/cache/yum/* \

    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
RUN yum install -y -q \
                  git \
           && yum clean all \
           && rm -rf /var/cache/yum/*
ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN yum install -y -q \
           bzip2 \
           curl \
    && yum clean all \
    && rm -rf /var/cache/yum/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.12.8" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "packaging" \
             "osfclient==0.0.5" \
             "nibabel" \
             "sympy==1.13.1"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  pip install --no-cache-dir torch==2.5.1 torchvision==0.20.1 --index-url https://download.pytorch.org/whl/cu124 \
        && pip install --no-cache-dir pyg_lib torch_scatter torch_sparse torch_cluster torch_spline_conv -f https://data.pyg.org/whl/torch-2.5.1+cu124.html \
        && pip install --no-cache-dir torch_geometric \
        && python -c "import torch" 2>/dev/null || { echo "Failed to import module"; exit 1; } \
        && python -c "import torch_geometric; print('PyG working')"
WORKDIR /opt
RUN  git clone https://github.com/felenitaribeiro/deepRetinotopy_TheToolbox.git \
        && cd deepRetinotopy_TheToolbox \
        && git checkout a8c1ed9382026a0ff2ad8a161a450a1d479a82ad \
        && files_to_download=("osfstorage/new_models/deepRetinotopy_polarAngle_LH_model5.pt" "osfstorage/new_models/deepRetinotopy_eccentricity_LH_model2.pt" "osfstorage/new_models/deepRetinotopy_pRFsize_LH_model5.pt" "osfstorage/new_models/deepRetinotopy_polarAngle_RH_model4.pt" "osfstorage/new_models/deepRetinotopy_eccentricity_RH_model2.pt" "osfstorage/new_models/deepRetinotopy_pRFsize_RH_model5.pt") \
        && for file in "${files_to_download[@]}"; do path="${file:15}"; mkdir -p "${path%/*}"; chmod 777 "${path%/*}"; osf -p ermbz fetch "$file" "$path"; echo "$file"; new_path=$(echo "$path" | sed -E 's/model[0-9]+/model/'); mv "$path" "$new_path"; echo "Renamed $path to $new_path"; done
RUN  yum clean all \
        && rm -rf /var/cache/yum/* \
        && rm -rf /var/cache/dnf/* \
        && rm -rf /var/lib/dnf/history.sqlite* \
        && rm -rf /var/lib/rpm/Packages \
        && rm -rf /tmp/* \
        && rm -rf ~/.cache/pip/* \
        && rm -rf /opt/miniconda/lib/python3.12/site-packages/torchvision/datasets/* \
        && rm -rf /opt/miniconda/lib/python3.12/site-packages/*/__pycache__/*
WORKDIR /opt/deepRetinotopy_TheToolbox
ENV PATH="/opt/workbench/workbench/bin_rh_linux64/:/opt/deepRetinotopy_TheToolbox/:/opt/deepRetinotopy_TheToolbox/main/:/opt/deepRetinotopy_TheToolbox/utils/:$PATH"
ENV DEPLOY_BINS="wb_view:wb_command:wb_shortcuts:python:deepRetinotopy:signMaps:1_native2fsaverage.sh:2_inference.py:3_fsaverage2native.sh:4_signmaps.py:transform_polarangle_lh.py:midthickness_surf.py"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "yum", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ghcr.io/neurodesk/freesurfer_7.3.2:20230216" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\nif ls /etc/yum.repos.d/CentOS-* >/dev/null 2>&1; then\\n    sed -i '"'"'s/mirrorlist/#mirrorlist/g'"'"' /etc/yum.repos.d/CentOS-*\\n    sed -i '"'"'s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g'"'"' /etc/yum.repos.d/CentOS-*;\\nfi\\nyum install -y -q \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    glibc-langpack-en \\\\\\n    glibc-locale-source \\\\\\n    unzip\\nyum clean all\\nrm -rf /var/cache/yum/*\\nlocaledef -i en_US -f UTF-8 en_US.UTF-8\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "yum install -y -q \\\\\\n           git \\\\\\n    && yum clean all \\\\\\n    && rm -rf /var/cache/yum/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "yum install -y -q \\\\\\n    bzip2 \\\\\\n    curl\\nyum clean all\\nrm -rf /var/cache/yum/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.12.8\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"packaging\\" \\\\\\n      \\"osfclient==0.0.5\\" \\\\\\n      \\"nibabel\\" \\\\\\n      \\"sympy==1.13.1\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install --no-cache-dir torch==2.5.1 torchvision==0.20.1 --index-url https://download.pytorch.org/whl/cu124 \\\\\\n && pip install --no-cache-dir pyg_lib torch_scatter torch_sparse torch_cluster torch_spline_conv -f https://data.pyg.org/whl/torch-2.5.1+cu124.html \\\\\\n && pip install --no-cache-dir torch_geometric \\\\\\n && python -c \\"import torch\\" 2>/dev/null || { echo \\"Failed to import module\\"; exit 1; } \\\\\\n && python -c \\"import torch_geometric; print\('"'"'PyG working'"'"'\)\\"" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/felenitaribeiro/deepRetinotopy_TheToolbox.git \\\\\\n && cd deepRetinotopy_TheToolbox \\\\\\n && git checkout a8c1ed9382026a0ff2ad8a161a450a1d479a82ad \\\\\\n && files_to_download=\(\\"osfstorage/new_models/deepRetinotopy_polarAngle_LH_model5.pt\\" \\"osfstorage/new_models/deepRetinotopy_eccentricity_LH_model2.pt\\" \\"osfstorage/new_models/deepRetinotopy_pRFsize_LH_model5.pt\\" \\"osfstorage/new_models/deepRetinotopy_polarAngle_RH_model4.pt\\" \\"osfstorage/new_models/deepRetinotopy_eccentricity_RH_model2.pt\\" \\"osfstorage/new_models/deepRetinotopy_pRFsize_RH_model5.pt\\"\) \\\\\\n && for file in \\"${files_to_download[@]}\\"; do path=\\"${file:15}\\"; mkdir -p \\"${path%%/*}\\"; chmod 777 \\"${path%%/*}\\"; osf -p ermbz fetch \\"$file\\" \\"$path\\"; echo \\"$file\\"; new_path=$\(echo \\"$path\\" | sed -E '"'"'s/model[0-9]+/model/'"'"'\); mv \\"$path\\" \\"$new_path\\"; echo \\"Renamed $path to $new_path\\"; done" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " yum clean all \\\\\\n && rm -rf /var/cache/yum/* \\\\\\n && rm -rf /var/cache/dnf/* \\\\\\n && rm -rf /var/lib/dnf/history.sqlite* \\\\\\n && rm -rf /var/lib/rpm/Packages \\\\\\n && rm -rf /tmp/* \\\\\\n && rm -rf ~/.cache/pip/* \\\\\\n && rm -rf /opt/miniconda/lib/python3.12/site-packages/torchvision/datasets/* \\\\\\n && rm -rf /opt/miniconda/lib/python3.12/site-packages/*/__pycache__/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/deepRetinotopy_TheToolbox" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/workbench/workbench/bin_rh_linux64/:/opt/deepRetinotopy_TheToolbox/:/opt/deepRetinotopy_TheToolbox/main/:/opt/deepRetinotopy_TheToolbox/utils/:$PATH" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "wb_view:wb_command:wb_shortcuts:python:deepRetinotopy:signMaps:1_native2fsaverage.sh:2_inference.py:3_fsaverage2native.sh:4_signmaps.py:transform_polarangle_lh.py:midthickness_surf.py" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: deepsif
File: build/deepsif/deepsif_0.0.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM debian:11
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  apt-transport-https \
                  binutils \
                  ca-certificates \
                  coreutils \
                  curl \
                  gcc-10-base \
                  git \
                  gnome-keyring \
                  gnupg \
                  libasound2 \
                  libc6 \
                  libgbm1 \
                  libgcc1 \
                  libgl1-mesa-dri \
                  libgl1-mesa-glx \
                  libglu1-mesa \
                  libgtk-3-0 \
                  libnotify4 \
                  libnss3 \
                  libsecret-1-0 \
                  libstdc++6 \
                  libxkbfile1 \
                  libxshmfence1 \
                  libxss1 \
                  mesa-utils \
                  midori \
                  pkg-config \
                  python3-pyqt5 \
                  software-properties-common \
                  unzip \
                  wget \
                  xdg-utils \
           && rm -rf /var/lib/apt/lists/*
RUN  wget -q https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/cuda-keyring_1.0-1_all.deb \
        && dpkg -i cuda-keyring_1.0-1_all.deb \
        && rm cuda-keyring_1.0-1_all.deb
RUN  apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/7fa2af80.pub \
        && add-apt-repository 'deb https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/ /' \
        && add-apt-repository contrib
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  cuda-11-5 \
                  nsight-compute-2022.2.0 \
           && rm -rf /var/lib/apt/lists/*
RUN  wget -q https://developer.download.nvidia.com/compute/redist/cudnn/v8.3.0/cudnn-11.5-linux-x64-v8.3.0.98.tgz \
        && tar -xvf cudnn-11.5-linux-x64-v8.3.0.98.tgz \
        && rm cudnn-11.5-linux-x64-v8.3.0.98.tgz \
        && chmod a+r cuda/include/cudnn*.h cuda/lib64/libcudnn* \
        && ln -s cuda/include/cudnn*.h /usr/local/cuda/include \
        && cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64
ENV CONDA_DIR="/opt/miniconda-4.7.12" \
    PATH="/opt/miniconda-4.7.12/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-4.7.12/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-4.7.12 \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  conda install -c conda-forge mamba=0.24.0
RUN  mamba create --override-channels --channel=conda-forge --name=deepsif-0.0.1 python=3.7 mne nomkl numba scipy numpy networkx scikit-learn cython pip numexpr psutil psycopg2 pytables scikit-image simplejson cherrypy docutils werkzeug matplotlib-base h5py
RUN  . activate deepsif-0.0.1 \
        && pip3 install --no-cache-dir torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113 \
        && rm -rf ~/.cache/pip/*
RUN  . activate deepsif-0.0.1 \
        && pip3 install --no-cache-dir formencode cfflib jinja2 nibabel sqlalchemy sqlalchemy-migrate allensdk tvb-gdist typing BeautifulSoup4 subprocess32 flask-restplus python-keycloak mako pybids tvb-library tvb-framework \
        && rm -rf ~/.cache/pip/*
ENV DONT_PROMPT_WSL_INSTALL="1"
WORKDIR /opt/
RUN  curl -fsSL https://github.com/mne-tools/mne-bids-pipeline/archive/refs/heads/main.tar.gz | tar xz \
        && chmod a+rwx /opt/mne-bids-pipeline-main -R
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/cuda/lib64"
ENV RUNLEVEL="3"
ENV XDG_RUNTIME_DIR="/neurodesk-storage"
COPY ["generate_tvb_data", \
      "/usr/bin"]
ENV DEPLOY_BINS="generate_tvb_data"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "debian:11" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "midori", \
          "xdg-utils", \
          "pkg-config", \
          "software-properties-common", \
          "libstdc++6", \
          "gcc-10-base", \
          "python3-pyqt5", \
          "unzip", \
          "git", \
          "apt-transport-https", \
          "ca-certificates", \
          "coreutils", \
          "curl", \
          "gnome-keyring", \
          "gnupg", \
          "libnotify4", \
          "wget", \
          "libnss3", \
          "libxkbfile1", \
          "libsecret-1-0", \
          "libgtk-3-0", \
          "libgcc1", \
          "libc6", \
          "libxss1", \
          "libgbm1", \
          "libxshmfence1", \
          "libasound2", \
          "libglu1-mesa", \
          "libgl1-mesa-dri", \
          "mesa-utils", \
          "libgl1-mesa-glx", \
          "binutils" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           apt-transport-https \\\\\\n           binutils \\\\\\n           ca-certificates \\\\\\n           coreutils \\\\\\n           curl \\\\\\n           gcc-10-base \\\\\\n           git \\\\\\n           gnome-keyring \\\\\\n           gnupg \\\\\\n           libasound2 \\\\\\n           libc6 \\\\\\n           libgbm1 \\\\\\n           libgcc1 \\\\\\n           libgl1-mesa-dri \\\\\\n           libgl1-mesa-glx \\\\\\n           libglu1-mesa \\\\\\n           libgtk-3-0 \\\\\\n           libnotify4 \\\\\\n           libnss3 \\\\\\n           libsecret-1-0 \\\\\\n           libstdc++6 \\\\\\n           libxkbfile1 \\\\\\n           libxshmfence1 \\\\\\n           libxss1 \\\\\\n           mesa-utils \\\\\\n           midori \\\\\\n           pkg-config \\\\\\n           python3-pyqt5 \\\\\\n           software-properties-common \\\\\\n           unzip \\\\\\n           wget \\\\\\n           xdg-utils \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget -q https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/cuda-keyring_1.0-1_all.deb \\\\\\n && dpkg -i cuda-keyring_1.0-1_all.deb \\\\\\n && rm cuda-keyring_1.0-1_all.deb" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/7fa2af80.pub \\\\\\n && add-apt-repository '"'"'deb https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/ /'"'"' \\\\\\n && add-apt-repository contrib" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "cuda-11-5", \
          "nsight-compute-2022.2.0" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           cuda-11-5 \\\\\\n           nsight-compute-2022.2.0 \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget -q https://developer.download.nvidia.com/compute/redist/cudnn/v8.3.0/cudnn-11.5-linux-x64-v8.3.0.98.tgz \\\\\\n && tar -xvf cudnn-11.5-linux-x64-v8.3.0.98.tgz \\\\\\n && rm cudnn-11.5-linux-x64-v8.3.0.98.tgz \\\\\\n && chmod a+r cuda/include/cudnn*.h cuda/lib64/libcudnn* \\\\\\n && ln -s cuda/include/cudnn*.h /usr/local/cuda/include \\\\\\n && cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-4.7.12", \
        "PATH": "/opt/miniconda-4.7.12/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-4.7.12/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-4.7.12\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " conda install -c conda-forge mamba=0.24.0" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mamba create --override-channels --channel=conda-forge --name=deepsif-0.0.1 python=3.7 mne nomkl numba scipy numpy networkx scikit-learn cython pip numexpr psutil psycopg2 pytables scikit-image simplejson cherrypy docutils werkzeug matplotlib-base h5py" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " . activate deepsif-0.0.1 \\\\\\n && pip3 install --no-cache-dir torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113 \\\\\\n && rm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " . activate deepsif-0.0.1 \\\\\\n && pip3 install --no-cache-dir formencode cfflib jinja2 nibabel sqlalchemy sqlalchemy-migrate allensdk tvb-gdist typing BeautifulSoup4 subprocess32 flask-restplus python-keycloak mako pybids tvb-library tvb-framework \\\\\\n && rm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DONT_PROMPT_WSL_INSTALL": "1" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL https://github.com/mne-tools/mne-bids-pipeline/archive/refs/heads/main.tar.gz | tar xz \\\\\\n && chmod a+rwx /opt/mne-bids-pipeline-main -R" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/local/cuda/lib64" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "RUNLEVEL": "3" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "XDG_RUNTIME_DIR": "/neurodesk-storage" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "generate_tvb_data", \
          "/usr/bin" \
        ], \
        "destination": "/usr/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "generate_tvb_data" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: dicomtools
File: build/dicomtools/dicomtools_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.10
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  dcmtk \
                  libgl1 \
                  libgtk2.0-0 \
                  libxcb-cursor0 \
                  pigz \
                  wget \
                  xmedcon \
                  zip \
           && rm -rf /var/lib/apt/lists/*
ENV PATH="/opt/dcm2niix-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           cmake \
           g++ \
           gcc \
           git \
           make \
           pigz \
           zlib1g-dev \
    && rm -rf /var/lib/apt/lists/* \
    && git clone https://github.com/rordenlab/dcm2niix /tmp/dcm2niix \
    && mkdir /tmp/dcm2niix/build \
    && cd /tmp/dcm2niix/build \
    && cmake  -DCMAKE_INSTALL_PREFIX:PATH=/opt/dcm2niix-latest .. \
    && make -j1 \
    && make install \
    && rm -rf /tmp/dcm2niix
ENV DEPLOY_BINS="xmedcon"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.10" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "zip", \
          "libgl1", \
          "libgtk2.0-0", \
          "dcmtk", \
          "xmedcon", \
          "pigz", \
          "libxcb-cursor0" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           dcmtk \\\\\\n           libgl1 \\\\\\n           libgtk2.0-0 \\\\\\n           libxcb-cursor0 \\\\\\n           pigz \\\\\\n           wget \\\\\\n           xmedcon \\\\\\n           zip \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/dcm2niix-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    cmake \\\\\\n    g++ \\\\\\n    gcc \\\\\\n    git \\\\\\n    make \\\\\\n    pigz \\\\\\n    zlib1g-dev\\nrm -rf /var/lib/apt/lists/*\\ngit clone https://github.com/rordenlab/dcm2niix /tmp/dcm2niix\\nmkdir /tmp/dcm2niix/build\\ncd /tmp/dcm2niix/build\\ncmake  -DCMAKE_INSTALL_PREFIX:PATH=/opt/dcm2niix-latest ..\\nmake -j1\\nmake install\\nrm -rf /tmp/dcm2niix" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "xmedcon" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: dsistudio
File: build/dsistudio/dsistudio_2024.06.12.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  libglu1-mesa \
                  libqt6charts6-dev \
                  unzip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt
RUN  wget https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2204.zip \
        && unzip dsi_studio_ubuntu2204.zip \
        && chmod a+rwx dsi-studio -R \
        && rm dsi_studio_ubuntu2204.zip
ENV PATH="$PATH:/opt/dsi-studio"
ENV QT_QPA_PLATFORM="xcb"
ENV DEPLOY_BINS="dsi_studio"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "unzip", \
          "libqt6charts6-dev", \
          "libglu1-mesa" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           libglu1-mesa \\\\\\n           libqt6charts6-dev \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://github.com/frankyeh/DSI-Studio/releases/download/2024.06.12/dsi_studio_ubuntu2204.zip \\\\\\n && unzip dsi_studio_ubuntu2204.zip \\\\\\n && chmod a+rwx dsi-studio -R \\\\\\n && rm dsi_studio_ubuntu2204.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/dsi-studio" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "QT_QPA_PLATFORM": "xcb" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "dsi_studio" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: eeglab
File: build/eeglab/eeglab_2020.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:18.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  curl \
                  dbus-x11 \
                  openjdk-8-jre \
                  unzip \
           && rm -rf /var/lib/apt/lists/*
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR/v98/runtime/glnxa64:/opt/MCR/v98/bin/glnxa64:/opt/MCR/v98/sys/os/glnxa64:/opt/MCR/v98/extern/bin/glnxa64" \
    MATLABCMD="/opt/MCR/2020a/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/MCR/v98/x11/app-defaults" \
    MCRROOT="/opt/MCR/2020a"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2020a/Release/7/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020a_Update_7_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/MCR -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
WORKDIR /opt/eeglab-2020.0/
RUN  curl -fsSL --retry 5 https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/eeglab2020.0_mcr2020a.tar.gz | tar -xz -C /opt/eeglab-2020.0/ --strip-components 1
ENV PATH="/opt/eeglab-2020.0/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
ENV XAPPLRESDIR="/opt/MCR/v98/x11/app-defaults"
ENV DEPLOY_BINS="EEGLAB"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:18.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "curl", \
          "unzip", \
          "ca-certificates", \
          "openjdk-8-jre", \
          "dbus-x11" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           dbus-x11 \\\\\\n           openjdk-8-jre \\\\\\n           unzip \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR/v98/runtime/glnxa64:/opt/MCR/v98/bin/glnxa64:/opt/MCR/v98/sys/os/glnxa64:/opt/MCR/v98/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/MCR/2020a/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/MCR/v98/x11/app-defaults", \
        "MCRROOT": "/opt/MCR/2020a" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2020a/Release/7/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020a_Update_7_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/MCR -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/eeglab-2020.0/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/eeglab2020.0_mcr2020a.tar.gz | tar -xz -C /opt/eeglab-2020.0/ --strip-components 1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/eeglab-2020.0/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "XAPPLRESDIR": "/opt/MCR/v98/x11/app-defaults" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "EEGLAB" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: eharmonize
File: build/eharmonize/eharmonize_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  git \
                  openssh-client \
           && rm -rf /var/lib/apt/lists/*
RUN  mkdir -p ~/.ssh \
        && ssh-keyscan github.com >> ~/.ssh/known_hosts
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  cd /opt \
        && git clone https://github.com/ahzhu/eharmonize.git \
        && cd eharmonize \
        && sed -i "s/git+ssh:\/\/git@/git+https:\/\//" setup.py \
        && python -m pip install --no-cache-dir .
ENV DEPLOY_BINS="eharmonize"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git", \
          "openssh-client" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           git \\\\\\n           openssh-client \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mkdir -p ~/.ssh \\\\\\n && ssh-keyscan github.com >> ~/.ssh/known_hosts" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " cd /opt \\\\\\n && git clone https://github.com/ahzhu/eharmonize.git \\\\\\n && cd eharmonize \\\\\\n && sed -i \\"s/git+ssh:\\\\/\\\\/git@/git+https:\\\\/\\\\//\\" setup.py \\\\\\n && python -m pip install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "eharmonize" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: esilpd
File: build/esilpd/esilpd_0.0.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM debian:11
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  apt-transport-https \
                  binutils \
                  ca-certificates \
                  coreutils \
                  curl \
                  gcc-10-base \
                  git \
                  gnome-keyring \
                  gnupg \
                  libasound2 \
                  libc6 \
                  libgbm1 \
                  libgcc1 \
                  libgl1-mesa-dri \
                  libgl1-mesa-glx \
                  libglu1-mesa \
                  libgtk-3-0 \
                  libnotify4 \
                  libnss3 \
                  libsecret-1-0 \
                  libstdc++6 \
                  libxkbfile1 \
                  libxshmfence1 \
                  libxss1 \
                  mesa-utils \
                  midori \
                  python3-pyqt5 \
                  software-properties-common \
                  unzip \
                  wget \
                  xdg-utils \
           && rm -rf /var/lib/apt/lists/*
RUN  strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX
RUN  wget -q https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/cuda-keyring_1.0-1_all.deb \
        && dpkg -i cuda-keyring_1.0-1_all.deb \
        && rm cuda-keyring_1.0-1_all.deb
RUN  apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/7fa2af80.pub \
        && add-apt-repository 'deb https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/ /' \
        && add-apt-repository contrib
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  cuda-11-5 \
                  nsight-compute-2022.2.0 \
           && rm -rf /var/lib/apt/lists/*
RUN  wget -q https://developer.download.nvidia.com/compute/redist/cudnn/v8.3.0/cudnn-11.5-linux-x64-v8.3.0.98.tgz \
        && tar -xvf cudnn-11.5-linux-x64-v8.3.0.98.tgz \
        && rm cudnn-11.5-linux-x64-v8.3.0.98.tgz \
        && chmod a+r cuda/include/cudnn*.h cuda/lib64/libcudnn* \
        && ln -s cuda/include/cudnn*.h /usr/local/cuda/include \
        && cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64
ENV CONDA_DIR="/opt/miniconda-4.7.12" \
    PATH="/opt/miniconda-4.7.12/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-4.7.12/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-4.7.12 \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  conda install -c conda-forge mamba=0.24.0
RUN  mamba create --override-channels --channel=conda-forge --name=esilpd-0.0.1 python=3.9 mne
RUN  . activate esilpd-0.0.1 \
        && pip3 install --no-cache-dir torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113 \
        && rm -rf ~/.cache/pip/*
RUN  . activate esilpd-0.0.1 \
        && pip3 install --no-cache-dir jax osfclient ipykernel scikit-image pybids seaborn argh joblib torchaudio odl[testing,show] \
        && rm -rf ~/.cache/pip/*
RUN  wget -q -O vscode.deb 'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64' \
        && apt install ./vscode.deb \
        && rm -rf ./vscode.deb
RUN  code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.python \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.vscode-pylance \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-keymap \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-renderers
ENV DONT_PROMPT_WSL_INSTALL="1"
WORKDIR /opt/
RUN  curl -fsSL https://github.com/mne-tools/mne-bids-pipeline/archive/refs/heads/main.tar.gz | tar xz \
        && chmod a+rwx /opt/mne-bids-pipeline-main -R
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/cuda/lib64"
COPY ["code", \
      "/usr/local/sbin/"]
RUN  chmod a+x /usr/local/sbin/code
RUN  chmod a+rwx /opt/vscode-extensions -R
ENV XDG_RUNTIME_DIR="/neurodesktop-storage"
RUN test "$(getent passwd neuro)" \
    || useradd --no-user-group --create-home --shell /bin/bash neuro
USER neuro
ENV DEPLOY_BINS="code"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "debian:11" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "midori", \
          "xdg-utils", \
          "software-properties-common", \
          "libstdc++6", \
          "gcc-10-base", \
          "python3-pyqt5", \
          "unzip", \
          "git", \
          "apt-transport-https", \
          "ca-certificates", \
          "coreutils", \
          "curl", \
          "gnome-keyring", \
          "gnupg", \
          "libnotify4", \
          "wget", \
          "libnss3", \
          "libxkbfile1", \
          "libsecret-1-0", \
          "libgtk-3-0", \
          "libgcc1", \
          "libc6", \
          "libxss1", \
          "libgbm1", \
          "libxshmfence1", \
          "libasound2", \
          "libglu1-mesa", \
          "libgl1-mesa-dri", \
          "mesa-utils", \
          "libgl1-mesa-glx", \
          "binutils" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           apt-transport-https \\\\\\n           binutils \\\\\\n           ca-certificates \\\\\\n           coreutils \\\\\\n           curl \\\\\\n           gcc-10-base \\\\\\n           git \\\\\\n           gnome-keyring \\\\\\n           gnupg \\\\\\n           libasound2 \\\\\\n           libc6 \\\\\\n           libgbm1 \\\\\\n           libgcc1 \\\\\\n           libgl1-mesa-dri \\\\\\n           libgl1-mesa-glx \\\\\\n           libglu1-mesa \\\\\\n           libgtk-3-0 \\\\\\n           libnotify4 \\\\\\n           libnss3 \\\\\\n           libsecret-1-0 \\\\\\n           libstdc++6 \\\\\\n           libxkbfile1 \\\\\\n           libxshmfence1 \\\\\\n           libxss1 \\\\\\n           mesa-utils \\\\\\n           midori \\\\\\n           python3-pyqt5 \\\\\\n           software-properties-common \\\\\\n           unzip \\\\\\n           wget \\\\\\n           xdg-utils \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget -q https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/cuda-keyring_1.0-1_all.deb \\\\\\n && dpkg -i cuda-keyring_1.0-1_all.deb \\\\\\n && rm cuda-keyring_1.0-1_all.deb" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/7fa2af80.pub \\\\\\n && add-apt-repository '"'"'deb https://developer.download.nvidia.com/compute/cuda/repos/debian11/x86_64/ /'"'"' \\\\\\n && add-apt-repository contrib" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "cuda-11-5", \
          "nsight-compute-2022.2.0" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           cuda-11-5 \\\\\\n           nsight-compute-2022.2.0 \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget -q https://developer.download.nvidia.com/compute/redist/cudnn/v8.3.0/cudnn-11.5-linux-x64-v8.3.0.98.tgz \\\\\\n && tar -xvf cudnn-11.5-linux-x64-v8.3.0.98.tgz \\\\\\n && rm cudnn-11.5-linux-x64-v8.3.0.98.tgz \\\\\\n && chmod a+r cuda/include/cudnn*.h cuda/lib64/libcudnn* \\\\\\n && ln -s cuda/include/cudnn*.h /usr/local/cuda/include \\\\\\n && cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-4.7.12", \
        "PATH": "/opt/miniconda-4.7.12/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-4.7.12/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-4.7.12\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " conda install -c conda-forge mamba=0.24.0" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mamba create --override-channels --channel=conda-forge --name=esilpd-0.0.1 python=3.9 mne" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " . activate esilpd-0.0.1 \\\\\\n && pip3 install --no-cache-dir torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113 \\\\\\n && rm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " . activate esilpd-0.0.1 \\\\\\n && pip3 install --no-cache-dir jax osfclient ipykernel scikit-image pybids seaborn argh joblib torchaudio odl[testing,show] \\\\\\n && rm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget -q -O vscode.deb '"'"'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64'"'"' \\\\\\n && apt install ./vscode.deb \\\\\\n && rm -rf ./vscode.deb" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.python \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.vscode-pylance \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-keymap \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-renderers" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DONT_PROMPT_WSL_INSTALL": "1" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL https://github.com/mne-tools/mne-bids-pipeline/archive/refs/heads/main.tar.gz | tar xz \\\\\\n && chmod a+rwx /opt/mne-bids-pipeline-main -R" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/local/cuda/lib64" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "code", \
          "/usr/local/sbin/" \
        ], \
        "destination": "/usr/local/sbin/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod a+x /usr/local/sbin/code" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod a+rwx /opt/vscode-extensions -R" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "XDG_RUNTIME_DIR": "/neurodesktop-storage" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "neuro" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "code" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER neuro
# End saving to specification to JSON.

========================================
Recipe: exploreasl
File: build/exploreasl/exploreasl_1.11.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM exploreasl/xasl:1.11.0
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEPLOY_BINS="ExploreASL"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "exploreasl/xasl:1.11.0" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "ExploreASL" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: fieldtrip
File: build/fieldtrip/fieldtrip_20220617.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:18.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  curl \
                  dbus-x11 \
                  openjdk-8-jre \
                  unzip \
           && rm -rf /var/lib/apt/lists/*
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR/v99/runtime/glnxa64:/opt/MCR/v99/bin/glnxa64:/opt/MCR/v99/sys/os/glnxa64:/opt/MCR/v99/extern/bin/glnxa64" \
    MATLABCMD="/opt/MCR/2020b/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/MCR/v99/x11/app-defaults" \
    MCRROOT="/opt/MCR/2020b"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2020b/Release/8/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020b_Update_8_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/MCR -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
WORKDIR /opt/fieldtrip-20220617/
RUN  curl -fsSL --retry 5 https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/fieldtrip20220617_mcr2020b.tar.gz | tar -xz -C /opt/fieldtrip-20220617/ --strip-components 1 \
        && chmod +x /opt/fieldtrip-20220617/*
ENV PATH="/opt/fieldtrip-20220617/:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV DEPLOY_BINS="run_fieldtrip.sh"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:18.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "curl", \
          "unzip", \
          "ca-certificates", \
          "openjdk-8-jre", \
          "dbus-x11" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           dbus-x11 \\\\\\n           openjdk-8-jre \\\\\\n           unzip \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR/v99/runtime/glnxa64:/opt/MCR/v99/bin/glnxa64:/opt/MCR/v99/sys/os/glnxa64:/opt/MCR/v99/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/MCR/2020b/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/MCR/v99/x11/app-defaults", \
        "MCRROOT": "/opt/MCR/2020b" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2020b/Release/8/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020b_Update_8_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/MCR -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/fieldtrip-20220617/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/fieldtrip20220617_mcr2020b.tar.gz | tar -xz -C /opt/fieldtrip-20220617/ --strip-components 1 \\\\\\n && chmod +x /opt/fieldtrip-20220617/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/fieldtrip-20220617/:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "run_fieldtrip.sh" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: fitlins
File: build/fitlins/fitlins_0.11.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  graphviz \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py39_25.5.1-0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  conda install mkl=2021.4 mkl-service=2.4 numpy=1.21 scipy=1.8 networkx=2.7 scikit-learn=1.0 scikit-image matplotlib=3.5 seaborn=0.11 pytables=3.6 pandas=1.3 pytest nbformat nb_conda traits=6.2
RUN  pip install fitlins=0.11.0
RUN  conda install -c leej3 afni-minimal
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "graphviz" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           graphviz \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py39_25.5.1-0-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " conda install mkl=2021.4 mkl-service=2.4 numpy=1.21 scipy=1.8 networkx=2.7 scikit-learn=1.0 scikit-image matplotlib=3.5 seaborn=0.11 pytables=3.6 pandas=1.3 pytest nbformat nb_conda traits=6.2" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install fitlins=0.11.0" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " conda install -c leej3 afni-minimal" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: fmriprep
File: build/fmriprep/fmriprep_25.1.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM nipreps/fmriprep:25.1.3
USER root
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEPLOY_BINS="fmriprep"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "nipreps/fmriprep:25.1.3" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "fmriprep" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: freesurfer
File: build/freesurfer/freesurfer_8.1.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  bc \
                  binutils \
                  csh \
                  file \
                  gettext \
                  language-pack-en \
                  libbsd0 \
                  libegl1 \
                  libexpat1 \
                  libfontconfig1 \
                  libfreetype6 \
                  libgl1 \
                  libglib2.0-0 \
                  libglu1-mesa \
                  libglvnd0 \
                  libglx0 \
                  libgomp1 \
                  libgomp1 \
                  libice6 \
                  libicu70 \
                  libjpeg62 \
                  libmd0 \
                  libncurses5 \
                  libncurses5 \
                  libopengl0 \
                  libpcre2-16-0 \
                  libpng16-16 \
                  libquadmath0 \
                  libsm6 \
                  libx11-6 \
                  libx11-dev \
                  libx11-xcb1 \
                  libxau6 \
                  libxcb-icccm4 \
                  libxcb-image0 \
                  libxcb-keysyms1 \
                  libxcb-randr0 \
                  libxcb-render-util0 \
                  libxcb-render0 \
                  libxcb-shape0 \
                  libxcb-shm0 \
                  libxcb-sync1 \
                  libxcb-util1 \
                  libxcb-xfixes0 \
                  libxcb-xinerama0 \
                  libxcb-xinput0 \
                  libxcb-xkb1 \
                  libxcb1 \
                  libxdmcp6 \
                  libxext6 \
                  libxft2 \
                  libxi6 \
                  libxkbcommon-x11-0 \
                  libxkbcommon0 \
                  libxmu6 \
                  libxrender1 \
                  libxss1 \
                  libxt6 \
                  make \
                  mesa-utils \
                  octave \
                  openjdk-8-jdk \
                  perl \
                  tcsh \
                  unzip \
                  wget \
                  x11-apps \
                  xauth \
                  xorg \
                  xorg-dev \
                  xserver-xorg-video-intel \
                  xterm \
                  xvfb \
           && rm -rf /var/lib/apt/lists/*
RUN  wget --quiet https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/8.1.0/freesurfer_ubuntu22-8.1.0_amd64.deb \
        && dpkg -i freesurfer_ubuntu22-8.1.0_amd64.deb \
        && rm -rf freesurfer_ubuntu22-8.1.0_amd64.deb
WORKDIR /opt/freesurfer-8.1.0
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR2014b/v84/runtime/glnxa64:/opt/MCR2014b/v84/bin/glnxa64:/opt/MCR2014b/v84/sys/os/glnxa64:/opt/MCR2014b/v84/extern/bin/glnxa64" \
    MATLABCMD="/opt/MCR2014b/2014b/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/MCR2014b/v84/x11/app-defaults" \
    MCRROOT="/opt/MCR2014b/2014b"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2014b/deployment_files/R2014b/installers/glnxa64/MCR_R2014b_glnxa64_installer.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/MCR2014b -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
RUN  ln -s /opt/MCR2014b/v84/ /opt/freesurfer-8.1.0/MCRv84
ENV LD_LIBRARY_PATH=""
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR2019b/v97/runtime/glnxa64:/opt/MCR2019b/v97/bin/glnxa64:/opt/MCR2019b/v97/sys/os/glnxa64:/opt/MCR2019b/v97/extern/bin/glnxa64" \
    MATLABCMD="/opt/MCR2019b/2019b/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/MCR2019b/v97/x11/app-defaults" \
    MCRROOT="/opt/MCR2019b/2019b"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2019b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2019b_Update_9_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/MCR2019b -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
RUN  ln -s /opt/MCR2019b/v97/ /opt/freesurfer-8.1.0/MCRv97
ENV FIX_VERTEX_AREA=""
ENV FMRI_ANALYSIS_DIR="/opt/freesurfer-8.1.0/fsfast"
ENV FREESURFER_HOME="/opt/freesurfer-8.1.0"
ENV FSFAST_HOME="/opt/freesurfer-8.1.0/fsfast"
ENV FSF_OUTPUT_FORMAT="nii.gz"
ENV FS_MCRROOT="/opt/MCR2019b/v97/"
ENV FS_OCTAVE_BIN="/usr/bin/octave"
ENV FS_OCTAVE_LIB="/usr/lib/x86_64-linux-gnu/octave/6.4.0"
ENV FS_OVERRIDE="0"
ENV FS_USE_OCTAVE="1"
ENV FUNCTIONALS_DIR="/opt/freesurfer-8.1.0/sessions"
ENV LOCAL_DIR="/opt/freesurfer-8.1.0/local"
ENV MINC_BIN_DIR="/opt/freesurfer-8.1.0/mni/bin"
ENV MINC_LIB_DIR="/opt/freesurfer-8.1.0/mni/lib"
ENV MNI_DATAPATH="/opt/freesurfer-8.1.0/mni/data"
ENV MNI_DIR="/opt/freesurfer-8.1.0/mni"
ENV MNI_PERL5LIB="/opt/freesurfer-8.1.0/mni/share/perl5"
ENV OS="Linux"
ENV PERL5LIB="/opt/freesurfer-8.1.0/mni/share/perl5"
ENV SHLVL="1"
ENV SUBJECTS_DIR="~/freesurfer-subjects-dir"
ENV TERM="xterm"
WORKDIR /opt/workbench/
RUN  wget --quiet -O workbench.zip 'https://humanconnectome.org/storage/app/media/workbench/workbench-linux64-v2.0.1.zip' \
        && unzip workbench.zip \
        && rm -rf workbench.zip
ENV FREESURFER="/opt/freesurfer-8.1.0"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/freesurfer/8.1.0-1/lib/qt/lib/:/usr/lib64/:/opt/freesurfer-8.1.0/MCRv97/runtime/glnxa64:/opt/freesurfer-8.1.0/MCRv97/bin/glnxa64:/opt/freesurfer-8.1.0/MCRv97/sys/os/glnxa64:/opt/freesurfer-8.1.0/MCRv97/sys/opengl/lib/glnxa64:/opt/freesurfer-8.1.0/MCRv97/extern/bin/glnxa64"
ENV PATH="$PATH:/opt/workbench/:/opt/freesurfer-8.1.0/bin:/opt/freesurfer-8.1.0/fsfast/bin:/opt/freesurfer-8.1.0/tktools:/opt/freesurfer-8.1.0/bin:/opt/freesurfer-8.1.0/fsfast/bin:/opt/freesurfer-8.1.0/mni/bin"
RUN  ln -s /usr/local/freesurfer/8.1.0/* /usr/local/freesurfer/ \
        && ln -s /usr/local/freesurfer/8.1.0/* /opt/freesurfer-8.1.0
WORKDIR /opt/freesurfer-8.1.0/bin/
RUN  wget https://raw.githubusercontent.com/freesurfer/freesurfer/refs/heads/dev/AANsegment/linux_x86_64/segmentNuclei \
        && mv segmentNuclei segmentNuclei_mcr84 \
        && chmod a+rwx segmentNuclei_mcr84
COPY ["segmentNuclei", \
      "/opt/freesurfer-8.1.0/bin/segmentNuclei"]
RUN  chmod a+rwx /opt/freesurfer-8.1.0/bin/segmentNuclei
COPY ["license.txt", \
      "/opt/freesurfer-8.1.0/license.txt"]
ENV DEPLOY_PATH="/opt/freesurfer-8.1.0/bin/:/opt/freesurfer-8.1.0/fsfast/bin/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "octave", \
          "wget", \
          "language-pack-en", \
          "binutils", \
          "libx11-dev", \
          "gettext", \
          "xterm", \
          "x11-apps", \
          "perl", \
          "make", \
          "csh", \
          "tcsh", \
          "file", \
          "bc", \
          "xorg", \
          "xorg-dev", \
          "xserver-xorg-video-intel", \
          "libncurses5", \
          "libbsd0", \
          "libegl1", \
          "libexpat1", \
          "libfontconfig1", \
          "libfreetype6", \
          "libgl1", \
          "libglib2.0-0", \
          "libglu1-mesa", \
          "libglvnd0", \
          "libglx0", \
          "libgomp1", \
          "libice6", \
          "libicu70", \
          "libjpeg62", \
          "libmd0", \
          "libopengl0", \
          "libpcre2-16-0", \
          "libpng16-16", \
          "libquadmath0", \
          "libsm6", \
          "libx11-6", \
          "libx11-xcb1", \
          "libxau6", \
          "libxcb-icccm4", \
          "libxcb-image0", \
          "libxcb-keysyms1", \
          "libxcb-randr0", \
          "libxcb-render-util0", \
          "libxcb-render0", \
          "libxcb-shape0", \
          "libxcb-shm0", \
          "libxcb-sync1", \
          "libxcb-util1", \
          "libxcb-xfixes0", \
          "libxcb-xinerama0", \
          "libxcb-xinput0", \
          "libxcb-xkb1", \
          "libxcb1", \
          "libxdmcp6", \
          "libxext6", \
          "libxft2", \
          "libxi6", \
          "libxkbcommon-x11-0", \
          "libxkbcommon0", \
          "libxmu6", \
          "libxrender1", \
          "libxss1", \
          "libxt6", \
          "mesa-utils", \
          "unzip", \
          "libncurses5", \
          "libgomp1", \
          "openjdk-8-jdk", \
          "xvfb", \
          "xauth" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           bc \\\\\\n           binutils \\\\\\n           csh \\\\\\n           file \\\\\\n           gettext \\\\\\n           language-pack-en \\\\\\n           libbsd0 \\\\\\n           libegl1 \\\\\\n           libexpat1 \\\\\\n           libfontconfig1 \\\\\\n           libfreetype6 \\\\\\n           libgl1 \\\\\\n           libglib2.0-0 \\\\\\n           libglu1-mesa \\\\\\n           libglvnd0 \\\\\\n           libglx0 \\\\\\n           libgomp1 \\\\\\n           libgomp1 \\\\\\n           libice6 \\\\\\n           libicu70 \\\\\\n           libjpeg62 \\\\\\n           libmd0 \\\\\\n           libncurses5 \\\\\\n           libncurses5 \\\\\\n           libopengl0 \\\\\\n           libpcre2-16-0 \\\\\\n           libpng16-16 \\\\\\n           libquadmath0 \\\\\\n           libsm6 \\\\\\n           libx11-6 \\\\\\n           libx11-dev \\\\\\n           libx11-xcb1 \\\\\\n           libxau6 \\\\\\n           libxcb-icccm4 \\\\\\n           libxcb-image0 \\\\\\n           libxcb-keysyms1 \\\\\\n           libxcb-randr0 \\\\\\n           libxcb-render-util0 \\\\\\n           libxcb-render0 \\\\\\n           libxcb-shape0 \\\\\\n           libxcb-shm0 \\\\\\n           libxcb-sync1 \\\\\\n           libxcb-util1 \\\\\\n           libxcb-xfixes0 \\\\\\n           libxcb-xinerama0 \\\\\\n           libxcb-xinput0 \\\\\\n           libxcb-xkb1 \\\\\\n           libxcb1 \\\\\\n           libxdmcp6 \\\\\\n           libxext6 \\\\\\n           libxft2 \\\\\\n           libxi6 \\\\\\n           libxkbcommon-x11-0 \\\\\\n           libxkbcommon0 \\\\\\n           libxmu6 \\\\\\n           libxrender1 \\\\\\n           libxss1 \\\\\\n           libxt6 \\\\\\n           make \\\\\\n           mesa-utils \\\\\\n           octave \\\\\\n           openjdk-8-jdk \\\\\\n           perl \\\\\\n           tcsh \\\\\\n           unzip \\\\\\n           wget \\\\\\n           x11-apps \\\\\\n           xauth \\\\\\n           xorg \\\\\\n           xorg-dev \\\\\\n           xserver-xorg-video-intel \\\\\\n           xterm \\\\\\n           xvfb \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --quiet https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/8.1.0/freesurfer_ubuntu22-8.1.0_amd64.deb \\\\\\n && dpkg -i freesurfer_ubuntu22-8.1.0_amd64.deb \\\\\\n && rm -rf freesurfer_ubuntu22-8.1.0_amd64.deb" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/freesurfer-8.1.0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR2014b/v84/runtime/glnxa64:/opt/MCR2014b/v84/bin/glnxa64:/opt/MCR2014b/v84/sys/os/glnxa64:/opt/MCR2014b/v84/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/MCR2014b/2014b/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/MCR2014b/v84/x11/app-defaults", \
        "MCRROOT": "/opt/MCR2014b/2014b" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2014b/deployment_files/R2014b/installers/glnxa64/MCR_R2014b_glnxa64_installer.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/MCR2014b -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " ln -s /opt/MCR2014b/v84/ /opt/freesurfer-8.1.0/MCRv84" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR2019b/v97/runtime/glnxa64:/opt/MCR2019b/v97/bin/glnxa64:/opt/MCR2019b/v97/sys/os/glnxa64:/opt/MCR2019b/v97/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/MCR2019b/2019b/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/MCR2019b/v97/x11/app-defaults", \
        "MCRROOT": "/opt/MCR2019b/2019b" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2019b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2019b_Update_9_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/MCR2019b -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " ln -s /opt/MCR2019b/v97/ /opt/freesurfer-8.1.0/MCRv97" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FIX_VERTEX_AREA": "" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer-8.1.0/fsfast" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FREESURFER_HOME": "/opt/freesurfer-8.1.0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSFAST_HOME": "/opt/freesurfer-8.1.0/fsfast" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSF_OUTPUT_FORMAT": "nii.gz" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FS_MCRROOT": "/opt/MCR2019b/v97/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FS_OCTAVE_BIN": "/usr/bin/octave" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FS_OCTAVE_LIB": "/usr/lib/x86_64-linux-gnu/octave/6.4.0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FS_OVERRIDE": "0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FS_USE_OCTAVE": "1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FUNCTIONALS_DIR": "/opt/freesurfer-8.1.0/sessions" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LOCAL_DIR": "/opt/freesurfer-8.1.0/local" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MINC_BIN_DIR": "/opt/freesurfer-8.1.0/mni/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MINC_LIB_DIR": "/opt/freesurfer-8.1.0/mni/lib" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MNI_DATAPATH": "/opt/freesurfer-8.1.0/mni/data" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MNI_DIR": "/opt/freesurfer-8.1.0/mni" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MNI_PERL5LIB": "/opt/freesurfer-8.1.0/mni/share/perl5" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "OS": "Linux" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PERL5LIB": "/opt/freesurfer-8.1.0/mni/share/perl5" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SHLVL": "1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SUBJECTS_DIR": "~/freesurfer-subjects-dir" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TERM": "xterm" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/workbench/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --quiet -O workbench.zip '"'"'https://humanconnectome.org/storage/app/media/workbench/workbench-linux64-v2.0.1.zip'"'"' \\\\\\n && unzip workbench.zip \\\\\\n && rm -rf workbench.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FREESURFER": "/opt/freesurfer-8.1.0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/local/freesurfer/8.1.0-1/lib/qt/lib/:/usr/lib64/:/opt/freesurfer-8.1.0/MCRv97/runtime/glnxa64:/opt/freesurfer-8.1.0/MCRv97/bin/glnxa64:/opt/freesurfer-8.1.0/MCRv97/sys/os/glnxa64:/opt/freesurfer-8.1.0/MCRv97/sys/opengl/lib/glnxa64:/opt/freesurfer-8.1.0/MCRv97/extern/bin/glnxa64" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/workbench/:/opt/freesurfer-8.1.0/bin:/opt/freesurfer-8.1.0/fsfast/bin:/opt/freesurfer-8.1.0/tktools:/opt/freesurfer-8.1.0/bin:/opt/freesurfer-8.1.0/fsfast/bin:/opt/freesurfer-8.1.0/mni/bin" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " ln -s /usr/local/freesurfer/8.1.0/* /usr/local/freesurfer/ \\\\\\n && ln -s /usr/local/freesurfer/8.1.0/* /opt/freesurfer-8.1.0" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/freesurfer-8.1.0/bin/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://raw.githubusercontent.com/freesurfer/freesurfer/refs/heads/dev/AANsegment/linux_x86_64/segmentNuclei \\\\\\n && mv segmentNuclei segmentNuclei_mcr84 \\\\\\n && chmod a+rwx segmentNuclei_mcr84" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "segmentNuclei", \
          "/opt/freesurfer-8.1.0/bin/segmentNuclei" \
        ], \
        "destination": "/opt/freesurfer-8.1.0/bin/segmentNuclei" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod a+rwx /opt/freesurfer-8.1.0/bin/segmentNuclei" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "license.txt", \
          "/opt/freesurfer-8.1.0/license.txt" \
        ], \
        "destination": "/opt/freesurfer-8.1.0/license.txt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/freesurfer-8.1.0/bin/:/opt/freesurfer-8.1.0/fsfast/bin/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: fsl
File: build/fsl/fsl_6.0.7.16.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  ca-certificates \
                  gcc \
                  git \
                  libxml2 \
                  ltrace \
                  nvidia-cuda-toolkit \
                  strace \
                  wget \
           && rm -rf /var/lib/apt/lists/*
ENV FSLDIR="/opt/fsl-6.0.7.16" \
    PATH="/opt/fsl-6.0.7.16/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.7.16/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.7.16/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libopenblas0 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           nano \
           python3 \
           sudo \
           wget \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing FSL ..." \
    && curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16
ENV FSLOUTPUTTYPE="NIFTI_GZ"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  locales \
           && rm -rf /var/lib/apt/lists/*
RUN  sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
        && locale-gen
ENV LANG="en_US.UTF-8"
ENV LANGUAGE="en_US:en"
ENV LC_ALL="en_US.UTF-8"
WORKDIR /opt/ICA-AROMA
RUN  curl -sSL "https://github.com/rhr-pruim/ICA-AROMA/archive/v0.4.3-beta.tar.gz" | tar -xzC /opt/ICA-AROMA --strip-components 1 \
        && chmod +x /opt/ICA-AROMA/ICA_AROMA.py
ENV PATH="/opt/ICA-AROMA/:'$PATH'"
RUN  fslpython -m pip install Cython \
        && fslpython -m pip install oxasl oxasl_ve oxasl_mp \
        && rm -rf /root/.cache
RUN  cp /opt/fsl-6.0.7.16/bin/eddy_cuda10.2 /opt/fsl-6.0.7.16/bin/eddy_cuda
COPY ["eddy", \
      "/opt/fsl-6.0.7.16/bin/eddy"]
RUN  chmod +x /opt/fsl-6.0.7.16/bin/eddy
RUN test "$(getent passwd jovyan)" \
    || useradd --no-user-group --create-home --shell /bin/bash jovyan
USER jovyan
ENV DEPLOY_PATH="/opt/fsl-6.0.7.16/bin:/opt/ICA-AROMA/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git", \
          "ca-certificates", \
          "ltrace", \
          "strace", \
          "wget", \
          "libxml2", \
          "gcc", \
          "build-essential", \
          "nvidia-cuda-toolkit" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           gcc \\\\\\n           git \\\\\\n           libxml2 \\\\\\n           ltrace \\\\\\n           nvidia-cuda-toolkit \\\\\\n           strace \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLDIR": "/opt/fsl-6.0.7.16", \
        "PATH": "/opt/fsl-6.0.7.16/bin:$PATH", \
        "FSLOUTPUTTYPE": "NIFTI_GZ", \
        "FSLMULTIFILEQUIT": "TRUE", \
        "FSLTCLSH": "/opt/fsl-6.0.7.16/bin/fsltclsh", \
        "FSLWISH": "/opt/fsl-6.0.7.16/bin/fslwish", \
        "FSLLOCKDIR": "", \
        "FSLMACHINELIST": "", \
        "FSLREMOTECALL": "", \
        "FSLGECUDAQ": "cuda.q" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    dc \\\\\\n    file \\\\\\n    libfontconfig1 \\\\\\n    libfreetype6 \\\\\\n    libgl1-mesa-dev \\\\\\n    libgl1-mesa-dri \\\\\\n    libglu1-mesa-dev \\\\\\n    libgomp1 \\\\\\n    libice6 \\\\\\n    libopenblas0 \\\\\\n    libxcursor1 \\\\\\n    libxft2 \\\\\\n    libxinerama1 \\\\\\n    libxrandr2 \\\\\\n    libxrender1 \\\\\\n    libxt6 \\\\\\n    nano \\\\\\n    python3 \\\\\\n    sudo \\\\\\n    wget\\nrm -rf /var/lib/apt/lists/*\\n\\necho \\"Installing FSL ...\\"\\ncurl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLOUTPUTTYPE": "NIFTI_GZ" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "locales" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           locales \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " sed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen \\\\\\n && locale-gen" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANGUAGE": "en_US:en" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LC_ALL": "en_US.UTF-8" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/ICA-AROMA" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -sSL \\"https://github.com/rhr-pruim/ICA-AROMA/archive/v0.4.3-beta.tar.gz\\" | tar -xzC /opt/ICA-AROMA --strip-components 1 \\\\\\n && chmod +x /opt/ICA-AROMA/ICA_AROMA.py" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/ICA-AROMA/:'"'"'$PATH'"'"'" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " fslpython -m pip install Cython \\\\\\n && fslpython -m pip install oxasl oxasl_ve oxasl_mp \\\\\\n && rm -rf /root/.cache" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " cp /opt/fsl-6.0.7.16/bin/eddy_cuda10.2 /opt/fsl-6.0.7.16/bin/eddy_cuda" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "eddy", \
          "/opt/fsl-6.0.7.16/bin/eddy" \
        ], \
        "destination": "/opt/fsl-6.0.7.16/bin/eddy" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod +x /opt/fsl-6.0.7.16/bin/eddy" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "jovyan" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/fsl-6.0.7.16/bin:/opt/ICA-AROMA/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER jovyan
# End saving to specification to JSON.

========================================
Recipe: gigaconnectome
File: build/gigaconnectome/gigaconnectome_0.6.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM bids/giga_connectome:0.6.0
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "bids/giga_connectome:0.6.0" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: gingerale
File: build/gingerale/gingerale_3.0.2.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  openjdk-21-jre \
           && rm -rf /var/lib/apt/lists/*
RUN --mount=type=bind,source=cache/hb78f389b,target=/.neurocontainer-cache/hb78f389b,readonly mkdir /opt/gingerale \
        && cp /.neurocontainer-cache/hb78f389b/gingerale.jar /opt/gingerale
RUN --mount=type=bind,source=cache/h00274337,target=/.neurocontainer-cache/h00274337,readonly cp /.neurocontainer-cache/h00274337/gingerale /opt/gingerale/gingerale \
        && chmod +x /opt/gingerale/gingerale
ENV PATH="$PATH:/opt/gingerale"
ENV DEPLOY_BINS="gingerale"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "openjdk-21-jre" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           openjdk-21-jre \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/hb78f389b,target=/.neurocontainer-cache/hb78f389b,readonly mkdir /opt/gingerale \\\\\\n && cp /.neurocontainer-cache/hb78f389b/gingerale.jar /opt/gingerale" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h00274337,target=/.neurocontainer-cache/h00274337,readonly cp /.neurocontainer-cache/h00274337/gingerale /opt/gingerale/gingerale \\\\\\n && chmod +x /opt/gingerale/gingerale" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/gingerale" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "gingerale" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: glmsingle
File: build/glmsingle/glmsingle_1.2.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  git \
                  libpython3.8-dev \
                  python3-pip \
                  python3.8 \
           && rm -rf /var/lib/apt/lists/*
RUN  python3.8 -m pip install git+https://github.com/cvnlab/GLMsingle.git@1.2
RUN  python3.8 -m pip install ipykernel jupyterlab
ENV DEPLOY_BINS="jupyter-lab"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "python3.8", \
          "python3-pip", \
          "libpython3.8-dev", \
          "git" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           git \\\\\\n           libpython3.8-dev \\\\\\n           python3-pip \\\\\\n           python3.8 \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " python3.8 -m pip install git+https://github.com/cvnlab/GLMsingle.git@1.2" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " python3.8 -m pip install ipykernel jupyterlab" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "jupyter-lab" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: gouhfi
File: build/gouhfi/gouhfi_0.0.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.10" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "torch" \
             "torchvision" \
             "torchaudio" \
             "--index-url" \
             "https://download.pytorch.org/whl/cu118"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  git \
                  unzip \
           && rm -rf /var/lib/apt/lists/*
RUN  cd /opt \
        && git clone https://github.com/mafortin/GOUHFI.git \
        && cd GOUHFI \
        && pip install -e .
RUN --mount=type=bind,source=cache/h80ad5065,target=/.neurocontainer-cache/h80ad5065,readonly cd /opt/GOUHFI/trained_model/ \
        && unzip /.neurocontainer-cache/h80ad5065/GOUHFI.zip
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.10\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"torch\\" \\\\\\n      \\"torchvision\\" \\\\\\n      \\"torchaudio\\" \\\\\\n      \\"--index-url\\" \\\\\\n      \\"https://download.pytorch.org/whl/cu118\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git", \
          "unzip" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           git \\\\\\n           unzip \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " cd /opt \\\\\\n && git clone https://github.com/mafortin/GOUHFI.git \\\\\\n && cd GOUHFI \\\\\\n && pip install -e ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h80ad5065,target=/.neurocontainer-cache/h80ad5065,readonly cd /opt/GOUHFI/trained_model/ \\\\\\n && unzip /.neurocontainer-cache/h80ad5065/GOUHFI.zip" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: halfpipe
File: build/halfpipe/halfpipe_1.2.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM halfpipe/halfpipe:1.2.3
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEPLOY_BINS="halfpipe"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "halfpipe/halfpipe:1.2.3" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "halfpipe" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: hcpasl
File: build/hcpasl/hcpasl_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  curl \
                  git \
                  wget \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.11" \
           "numpy" \
           "scipy" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "git+https://github.com/physimals/hcp-asl.git" \
             "nibabel"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV FSLDIR="/opt/fsl-6.0.5.1" \
    PATH="/opt/fsl-6.0.5.1/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.5.1/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.5.1/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libopenblas0 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           nano \
           python3 \
           sudo \
           wget \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading FSL ..." \
    && mkdir -p /opt/fsl-6.0.5.1 \
    && curl -fL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.5.1-centos7_64.tar.gz \
    | tar -xz -C /opt/fsl-6.0.5.1 --strip-components 1 \
    && echo "Installing FSL conda environment ..." \
    && bash /opt/fsl-6.0.5.1/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.5.1
ENV OS="Linux" \
    PATH="/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH" \
    FREESURFER_HOME="/opt/freesurfer-7.4.1" \
    FREESURFER="/opt/freesurfer-7.4.1" \
    SUBJECTS_DIR="/opt/freesurfer-7.4.1/subjects" \
    LOCAL_DIR="/opt/freesurfer-7.4.1/local" \
    FSFAST_HOME="/opt/freesurfer-7.4.1/fsfast" \
    FMRI_ANALYSIS_DIR="/opt/freesurfer-7.4.1/fsfast" \
    FUNCTIONALS_DIR="/opt/freesurfer-7.4.1/sessions" \
    FS_OVERRIDE="0" \
    FIX_VERTEX_AREA="" \
    FSF_OUTPUT_FORMAT="nii.gz" \
    MINC_BIN_DIR="/opt/freesurfer-7.4.1/mni/bin" \
    MINC_LIB_DIR="/opt/freesurfer-7.4.1/mni/lib" \
    MNI_DIR="/opt/freesurfer-7.4.1/mni" \
    MNI_DATAPATH="/opt/freesurfer-7.4.1/mni/data" \
    MNI_PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5" \
    PERL5LIB="/opt/freesurfer-7.4.1/mni/share/perl5"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           libgomp1 \
           libxmu6 \
           libxt6 \
           perl \
           tcsh \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading FreeSurfer ..." \
    && mkdir -p /opt/freesurfer-7.4.1 \
    && curl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \
    | tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='s,freesurfer/,,' \
         --exclude='average/mult-comp-cor' \
         --exclude='lib/cuda' \
         --exclude='lib/qt' \
         --exclude='subjects/V1_average' \
         --exclude='subjects/bert' \
         --exclude='subjects/cvs_avg35' \
         --exclude='subjects/cvs_avg35_inMNI152' \
         --exclude='subjects/fsaverage3' \
         --exclude='subjects/fsaverage4' \
         --exclude='subjects/fsaverage5' \
         --exclude='subjects/fsaverage6' \
         --exclude='subjects/fsaverage_sym' \
         --exclude='trctrain'
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  connectome-workbench \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/Washington-University/HCPpipelines.git /opt/HCPpipelines
ENV CARET7DIR="/usr/local/workbench/"
ENV HCPPIPEDIR="/opt/HCPpipelines"
WORKDIR /opt
ENV DEPLOY_BINS="process_hcp_asl"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "curl", \
          "git" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           curl \\\\\\n           git \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.11\\" \\\\\\n    \\"numpy\\" \\\\\\n    \\"scipy\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"git+https://github.com/physimals/hcp-asl.git\\" \\\\\\n      \\"nibabel\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLDIR": "/opt/fsl-6.0.5.1", \
        "PATH": "/opt/fsl-6.0.5.1/bin:$PATH", \
        "FSLOUTPUTTYPE": "NIFTI_GZ", \
        "FSLMULTIFILEQUIT": "TRUE", \
        "FSLTCLSH": "/opt/fsl-6.0.5.1/bin/fsltclsh", \
        "FSLWISH": "/opt/fsl-6.0.5.1/bin/fslwish", \
        "FSLLOCKDIR": "", \
        "FSLMACHINELIST": "", \
        "FSLREMOTECALL": "", \
        "FSLGECUDAQ": "cuda.q" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    dc \\\\\\n    file \\\\\\n    libfontconfig1 \\\\\\n    libfreetype6 \\\\\\n    libgl1-mesa-dev \\\\\\n    libgl1-mesa-dri \\\\\\n    libglu1-mesa-dev \\\\\\n    libgomp1 \\\\\\n    libice6 \\\\\\n    libopenblas0 \\\\\\n    libxcursor1 \\\\\\n    libxft2 \\\\\\n    libxinerama1 \\\\\\n    libxrandr2 \\\\\\n    libxrender1 \\\\\\n    libxt6 \\\\\\n    nano \\\\\\n    python3 \\\\\\n    sudo \\\\\\n    wget\\nrm -rf /var/lib/apt/lists/*\\n\\necho \\"Downloading FSL ...\\"\\nmkdir -p /opt/fsl-6.0.5.1\\ncurl -fL https://fsl.fmrib.ox.ac.uk/fsldownloads/fsl-6.0.5.1-centos7_64.tar.gz \\\\\\n| tar -xz -C /opt/fsl-6.0.5.1 --strip-components 1 \\necho \\"Installing FSL conda environment ...\\"\\nbash /opt/fsl-6.0.5.1/etc/fslconf/fslpython_install.sh -f /opt/fsl-6.0.5.1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "OS": "Linux", \
        "PATH": "/opt/freesurfer-7.4.1/bin:/opt/freesurfer-7.4.1/fsfast/bin:/opt/freesurfer-7.4.1/tktools:/opt/freesurfer-7.4.1/mni/bin:$PATH", \
        "FREESURFER_HOME": "/opt/freesurfer-7.4.1", \
        "FREESURFER": "/opt/freesurfer-7.4.1", \
        "SUBJECTS_DIR": "/opt/freesurfer-7.4.1/subjects", \
        "LOCAL_DIR": "/opt/freesurfer-7.4.1/local", \
        "FSFAST_HOME": "/opt/freesurfer-7.4.1/fsfast", \
        "FMRI_ANALYSIS_DIR": "/opt/freesurfer-7.4.1/fsfast", \
        "FUNCTIONALS_DIR": "/opt/freesurfer-7.4.1/sessions", \
        "FS_OVERRIDE": "0", \
        "FIX_VERTEX_AREA": "", \
        "FSF_OUTPUT_FORMAT": "nii.gz", \
        "MINC_BIN_DIR": "/opt/freesurfer-7.4.1/mni/bin", \
        "MINC_LIB_DIR": "/opt/freesurfer-7.4.1/mni/lib", \
        "MNI_DIR": "/opt/freesurfer-7.4.1/mni", \
        "MNI_DATAPATH": "/opt/freesurfer-7.4.1/mni/data", \
        "MNI_PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5", \
        "PERL5LIB": "/opt/freesurfer-7.4.1/mni/share/perl5" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libgomp1 \\\\\\n    libxmu6 \\\\\\n    libxt6 \\\\\\n    perl \\\\\\n    tcsh\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading FreeSurfer ...\\"\\nmkdir -p /opt/freesurfer-7.4.1\\ncurl -fL https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/7.4.1/freesurfer-linux-centos7_x86_64-7.4.1.tar.gz \\\\\\n| tar -xz -C /opt/freesurfer-7.4.1 --owner root --group root --no-same-owner --transform='"'"'s,freesurfer/,,'"'"' \\\\\\n  --exclude='"'"'average/mult-comp-cor'"'"' \\\\\\n  --exclude='"'"'lib/cuda'"'"' \\\\\\n  --exclude='"'"'lib/qt'"'"' \\\\\\n  --exclude='"'"'subjects/V1_average'"'"' \\\\\\n  --exclude='"'"'subjects/bert'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35'"'"' \\\\\\n  --exclude='"'"'subjects/cvs_avg35_inMNI152'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage3'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage4'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage5'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage6'"'"' \\\\\\n  --exclude='"'"'subjects/fsaverage_sym'"'"' \\\\\\n  --exclude='"'"'trctrain'"'"'" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "connectome-workbench" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           connectome-workbench \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/Washington-University/HCPpipelines.git /opt/HCPpipelines" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CARET7DIR": "/usr/local/workbench/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "HCPPIPEDIR": "/opt/HCPpipelines" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "process_hcp_asl" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: heudiconv
File: build/heudiconv/heudiconv_1.3.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM nipy/heudiconv:1.3.1
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
COPY ["test.sh", \
      "/test.sh"]
ENV DEPLOY_BINS="heudiconv"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "nipy/heudiconv:1.3.1" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "test.sh", \
          "/test.sh" \
        ], \
        "destination": "/test.sh" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "heudiconv" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: hmri
File: build/hmri/hmri_0.6.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  dbus-x11 \
                  openjdk-8-jre \
                  unzip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/mcr/v914/runtime/glnxa64:/opt/mcr/v914/bin/glnxa64:/opt/mcr/v914/sys/os/glnxa64:/opt/mcr/v914/extern/bin/glnxa64" \
    MATLABCMD="/opt/mcr/2023a/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/mcr/v914/x11/app-defaults" \
    MCRROOT="/opt/mcr/2023a"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2023a/Release/5/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2023a_Update_5_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/mcr -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
ENV DEPLOY_ENV_FORCE_SPMMCR="1"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/mcr/R2023a/runtime/glnxa64:/opt/mcr/R2023a/bin/glnxa64:/opt/mcr/R2023a/sys/os/glnxa64:/opt/mcr/R2023a/sys/opengl/lib/glnxa64:/opt/mcr/R2023a/extern/bin/glnxa64"
ENV MATLAB_VERSION="R2023a"
ENV MCR_INHIBIT_CTF_LOCK="1"
ENV MCR_UPDATE="9"
ENV MCR_VERSION="R2023a"
ENV PATH="$PATH:/opt/standalone-hMRItoolboxv0.6.1"
ENV SPM_HTML_BROWSER="0"
ENV SPM_REVISION="r7771"
ENV SPM_VERSION="12"
ENV XAPPLRESDIR="/opt/mcr/R2023a/x11/app-defaults"
RUN  wget --no-check-certificate --progress=bar:force -P /opt https://github.com/hMRI-group/hMRI-toolbox/releases/download/v0.6.1/standalone-hMRItoolboxv0.6.1.zip \
        && unzip -q /opt/standalone-hMRItoolboxv0.6.1.zip -d /opt \
        && rm -f /opt/standalone-hMRItoolboxv0.6.1.zip \
        && /opt/standalone-hMRItoolboxv0.6.1/spm12 function exit \
        && chmod a+rx /opt/standalone-hMRItoolboxv0.6.1/ -R
ENV DEPLOY_BINS="spm12"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "unzip", \
          "ca-certificates", \
          "openjdk-8-jre", \
          "dbus-x11" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           dbus-x11 \\\\\\n           openjdk-8-jre \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/mcr/v914/runtime/glnxa64:/opt/mcr/v914/bin/glnxa64:/opt/mcr/v914/sys/os/glnxa64:/opt/mcr/v914/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/mcr/2023a/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/mcr/v914/x11/app-defaults", \
        "MCRROOT": "/opt/mcr/2023a" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2023a/Release/5/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2023a_Update_5_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/mcr -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_ENV_FORCE_SPMMCR": "1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/opt/mcr/R2023a/runtime/glnxa64:/opt/mcr/R2023a/bin/glnxa64:/opt/mcr/R2023a/sys/os/glnxa64:/opt/mcr/R2023a/sys/opengl/lib/glnxa64:/opt/mcr/R2023a/extern/bin/glnxa64" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MATLAB_VERSION": "R2023a" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_INHIBIT_CTF_LOCK": "1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_UPDATE": "9" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_VERSION": "R2023a" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/standalone-hMRItoolboxv0.6.1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_HTML_BROWSER": "0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_REVISION": "r7771" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_VERSION": "12" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "XAPPLRESDIR": "/opt/mcr/R2023a/x11/app-defaults" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --no-check-certificate --progress=bar:force -P /opt https://github.com/hMRI-group/hMRI-toolbox/releases/download/v0.6.1/standalone-hMRItoolboxv0.6.1.zip \\\\\\n && unzip -q /opt/standalone-hMRItoolboxv0.6.1.zip -d /opt \\\\\\n && rm -f /opt/standalone-hMRItoolboxv0.6.1.zip \\\\\\n && /opt/standalone-hMRItoolboxv0.6.1/spm12 function exit \\\\\\n && chmod a+rx /opt/standalone-hMRItoolboxv0.6.1/ -R" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "spm12" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: hnncore
File: build/hnncore/hnncore_0.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  libopenmpi-dev \
                  libpython3-dev \
                  openmpi-bin \
                  openmpi-doc \
                  python3-pip \
                  python3.9 \
           && rm -rf /var/lib/apt/lists/*
RUN  pip install numpy scipy matplotlib NEURON
RUN  pip install ipywidgets voila scikit-learn joblib mpi4py psutil
RUN  pip install hnn_core hnn_core[opt] hnn_core[gui]
ENV DEPLOY_BINS="hnn-gui"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "python3.9", \
          "python3-pip", \
          "libpython3-dev", \
          "build-essential", \
          "openmpi-bin", \
          "openmpi-doc", \
          "libopenmpi-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           libopenmpi-dev \\\\\\n           libpython3-dev \\\\\\n           openmpi-bin \\\\\\n           openmpi-doc \\\\\\n           python3-pip \\\\\\n           python3.9 \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install numpy scipy matplotlib NEURON" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install ipywidgets voila scikit-learn joblib mpi4py psutil" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install hnn_core hnn_core[opt] hnn_core[gui]" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "hnn-gui" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: itksnap
File: build/itksnap/itksnap_4.2.2.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  binutils \
                  ca-certificates \
                  curl \
                  libopengl0 \
                  libqt5gui5 \
                  libxcb-cursor-dev \
                  libxcb-cursor0 \
                  unzip \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/itksnap-4.2.2
RUN  curl -fsSL -o /example_data.zip https://www.nitrc.org/frs/download.php/750/MRI-crop.zip \
        && unzip /example_data.zip \
        && rm /example_data.zip \
        && curl -fsSL --retry 5 https://sourceforge.net/projects/itk-snap/files/itk-snap/4.2.2/itksnap-4.2.2-20241202-Linux-x86_64.tar.gz | tar -xz --strip-components=1 -C /opt/itksnap-4.2.2
ENV QT_QPA_PLATFORM="xcb"
ENV PATH="$PATH:/opt/itksnap-4.2.2/bin"
ENV DEPLOY_BINS="itksnap"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "curl", \
          "ca-certificates", \
          "unzip", \
          "binutils", \
          "libqt5gui5", \
          "libopengl0", \
          "libxcb-cursor0", \
          "libxcb-cursor-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           binutils \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           libopengl0 \\\\\\n           libqt5gui5 \\\\\\n           libxcb-cursor-dev \\\\\\n           libxcb-cursor0 \\\\\\n           unzip \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/itksnap-4.2.2" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL -o /example_data.zip https://www.nitrc.org/frs/download.php/750/MRI-crop.zip \\\\\\n && unzip /example_data.zip \\\\\\n && rm /example_data.zip \\\\\\n && curl -fsSL --retry 5 https://sourceforge.net/projects/itk-snap/files/itk-snap/4.2.2/itksnap-4.2.2-20241202-Linux-x86_64.tar.gz | tar -xz --strip-components=1 -C /opt/itksnap-4.2.2" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "QT_QPA_PLATFORM": "xcb" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/itksnap-4.2.2/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "itksnap" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: julia
File: build/julia/julia_1.9.4.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  apt-transport-https \
                  build-essential \
                  ca-certificates \
                  coreutils \
                  curl \
                  gcc \
                  git \
                  gnome-keyring \
                  gnupg \
                  graphviz \
                  less \
                  libasound2 \
                  libgbm1 \
                  libgpgme-dev \
                  libgtk-3-0 \
                  libnotify4 \
                  libnss3 \
                  libseccomp-dev \
                  libsecret-1-0 \
                  libx11-xcb1 \
                  libxkbfile1 \
                  libxshmfence1 \
                  libxss1 \
                  libzstd1 \
                  lmod \
                  nano \
                  pkg-config \
                  strace \
                  tree \
                  unzip \
                  uuid-dev \
                  wget \
                  xdg-utils \
                  zip \
                  zlib1g-dev \
           && rm -rf /var/lib/apt/lists/*
RUN  wget -O vscode.deb 'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64' \
        && apt install ./vscode.deb \
        && rm -rf ./vscode.deb
WORKDIR /opt
RUN  wget https://julialang-s3.julialang.org/bin/linux/x64/1.9/julia-1.9.4-linux-x86_64.tar.gz \
        && tar zxvf julia-1.9.4-linux-x86_64.tar.gz \
        && rm -rf julia-1.9.4-linux-x86_64.tar.gz \
        && ln -s /opt/julia-1.9.4 /opt/julia-latest
RUN  code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension julialang.language-julia \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension KorbinianEckstein.niivue \
        && rm -rf /opt/vscode-data/CachedExtensionVSIXs/
ENV PATH="$PATH:/opt/julia-1.9.4/bin"
WORKDIR /opt
COPY ["install_packages.jl", \
      "/opt"]
ENV JULIA_DEPOT_PATH="/opt/julia_depot"
RUN  julia install_packages.jl
ENV JULIA_DEPOT_PATH="~/.julia:/opt/julia_depot"
COPY ["code", \
      "/usr/local/sbin/"]
RUN  chmod a+x /usr/local/sbin/code \
        && chmod a+rwx /opt/vscode-extensions/ -R \
        && chmod a+rwx /opt/vscode-data -R
COPY ["module.sh", \
      "/usr/share/"]
RUN test "$(getent passwd neuro)" \
    || useradd --no-user-group --create-home --shell /bin/bash neuro
USER neuro
ENV DEPLOY_BINS="julia"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "xdg-utils", \
          "unzip", \
          "git", \
          "apt-transport-https", \
          "ca-certificates", \
          "coreutils", \
          "curl", \
          "gnome-keyring", \
          "gnupg", \
          "libnotify4", \
          "wget", \
          "libnss3", \
          "libxkbfile1", \
          "libsecret-1-0", \
          "libgtk-3-0", \
          "libxss1", \
          "libgbm1", \
          "libxshmfence1", \
          "libasound2", \
          "lmod", \
          "less", \
          "nano", \
          "tree", \
          "strace", \
          "libx11-xcb1", \
          "gcc", \
          "graphviz", \
          "libzstd1", \
          "zlib1g-dev", \
          "zip", \
          "build-essential", \
          "uuid-dev", \
          "libgpgme-dev", \
          "libseccomp-dev", \
          "pkg-config" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           apt-transport-https \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           coreutils \\\\\\n           curl \\\\\\n           gcc \\\\\\n           git \\\\\\n           gnome-keyring \\\\\\n           gnupg \\\\\\n           graphviz \\\\\\n           less \\\\\\n           libasound2 \\\\\\n           libgbm1 \\\\\\n           libgpgme-dev \\\\\\n           libgtk-3-0 \\\\\\n           libnotify4 \\\\\\n           libnss3 \\\\\\n           libseccomp-dev \\\\\\n           libsecret-1-0 \\\\\\n           libx11-xcb1 \\\\\\n           libxkbfile1 \\\\\\n           libxshmfence1 \\\\\\n           libxss1 \\\\\\n           libzstd1 \\\\\\n           lmod \\\\\\n           nano \\\\\\n           pkg-config \\\\\\n           strace \\\\\\n           tree \\\\\\n           unzip \\\\\\n           uuid-dev \\\\\\n           wget \\\\\\n           xdg-utils \\\\\\n           zip \\\\\\n           zlib1g-dev \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget -O vscode.deb '"'"'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64'"'"' \\\\\\n && apt install ./vscode.deb \\\\\\n && rm -rf ./vscode.deb" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://julialang-s3.julialang.org/bin/linux/x64/1.9/julia-1.9.4-linux-x86_64.tar.gz \\\\\\n && tar zxvf julia-1.9.4-linux-x86_64.tar.gz \\\\\\n && rm -rf julia-1.9.4-linux-x86_64.tar.gz \\\\\\n && ln -s /opt/julia-1.9.4 /opt/julia-latest" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension julialang.language-julia \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension KorbinianEckstein.niivue \\\\\\n && rm -rf /opt/vscode-data/CachedExtensionVSIXs/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/julia-1.9.4/bin" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "install_packages.jl", \
          "/opt" \
        ], \
        "destination": "/opt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "JULIA_DEPOT_PATH": "/opt/julia_depot" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " julia install_packages.jl" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "JULIA_DEPOT_PATH": "~/.julia:/opt/julia_depot" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "code", \
          "/usr/local/sbin/" \
        ], \
        "destination": "/usr/local/sbin/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod a+x /usr/local/sbin/code \\\\\\n && chmod a+rwx /opt/vscode-extensions/ -R \\\\\\n && chmod a+rwx /opt/vscode-data -R" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "module.sh", \
          "/usr/share/" \
        ], \
        "destination": "/usr/share/" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "neuro" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "julia" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER neuro
# End saving to specification to JSON.

========================================
Recipe: laynii
File: build/laynii/laynii_2.2.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:18.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  unzip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/laynii-2.2.1/
RUN  wget https://github.com/layerfMRI/LAYNII/releases/download/v2.2.1/LayNii_v2.2.1_Linux64.zip \
        && unzip LayNii_v2.2.1_Linux64.zip \
        && rm LayNii_v2.2.1_Linux64.zip
ENV PATH="$PATH:/opt/laynii-2.2.1/"
ENV DEPLOY_PATH="/opt/laynii-2.2.1/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:18.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "ca-certificates", \
          "unzip" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/laynii-2.2.1/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://github.com/layerfMRI/LAYNII/releases/download/v2.2.1/LayNii_v2.2.1_Linux64.zip \\\\\\n && unzip LayNii_v2.2.1_Linux64.zip \\\\\\n && rm LayNii_v2.2.1_Linux64.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/laynii-2.2.1/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/laynii-2.2.1/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: lesionquantificationtoolkit
File: build/lesionquantificationtoolkit/lesionquantificationtoolkit_0.1.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  libgsl-dev \
                  r-base \
                  r-base-dev \
           && rm -rf /var/lib/apt/lists/*
RUN  R --slave -e "options(repos = c(CRAN = 'https://cloud.r-project.org')); \
         if (!requireNamespace('remotes', quietly = TRUE)) install.packages('remotes'); \
         remotes::install_github('jdwor/LQT', dependencies = NA, upgrade = 'never', build_vignettes = FALSE); \
         cat('Installed LQT from GitHub (', 'jdwor/LQT', ")\n")"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "r-base", \
          "r-base-dev", \
          "libgsl-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           libgsl-dev \\\\\\n           r-base \\\\\\n           r-base-dev \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " R --slave -e \\"options\(repos = c\(CRAN = '"'"'https://cloud.r-project.org'"'"'\)\); \\\\\\n  if \(!requireNamespace\('"'"'remotes'"'"', quietly = TRUE\)\) install.packages\('"'"'remotes'"'"'\); \\\\\\n  remotes::install_github\('"'"'jdwor/LQT'"'"', dependencies = NA, upgrade = '"'"'never'"'"', build_vignettes = FALSE\); \\\\\\n  cat\('"'"'Installed LQT from GitHub \('"'"', '"'"'jdwor/LQT'"'"', \\"\)\\\\n\\"\)\\"" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: lesymap
File: build/lesymap/lesymap_0.0.0.9222.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM dorianps/lesymap:20220701
USER root
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEPLOY_BINS="R:rstudio"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "dorianps/lesymap:20220701" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "R:rstudio" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: linda
File: build/linda/linda_0.5.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM dorianps/linda:latest
USER root
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
RUN --mount=type=bind,source=cache/h718bcd62,target=/.neurocontainer-cache/h718bcd62,readonly cp /.neurocontainer-cache/h718bcd62/linda_predict.sh /usr/local/bin/linda_predict.sh \
        && chmod +x /usr/local/bin/linda_predict.sh
ENV PATH="$PATH:/usr/local/bin"
ENV DEPLOY_BINS="R:rstudio:linda_predict.sh"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "dorianps/linda:latest" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h718bcd62,target=/.neurocontainer-cache/h718bcd62,readonly cp /.neurocontainer-cache/h718bcd62/linda_predict.sh /usr/local/bin/linda_predict.sh \\\\\\n && chmod +x /usr/local/bin/linda_predict.sh" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/usr/local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "R:rstudio:linda_predict.sh" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: lipsia
File: build/lipsia/lipsia_3.1.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:18.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
WORKDIR /opt
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  ca-certificates \
                  curl \
                  git \
                  git \
                  libboost-dev \
                  libgsl0-dev \
                  libopenblas-dev \
                  lsb-release \
                  unzip \
                  wget \
                  zlib1g-dev \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone --depth 1 --branch 3.1.1 https://github.com/lipsia-fmri/lipsia.git \
        && cd lipsia \
        && bash -c "source lipsia-setup.sh && cd src && make"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/lipsia/lib"
ENV PATH="$PATH:/opt/lipsia/bin"
ENV DEPLOY_PATH="/opt/lipsia/bin/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:18.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "git", \
          "curl", \
          "ca-certificates", \
          "unzip", \
          "build-essential", \
          "libgsl0-dev", \
          "libboost-dev", \
          "zlib1g-dev", \
          "git", \
          "lsb-release", \
          "libopenblas-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           git \\\\\\n           git \\\\\\n           libboost-dev \\\\\\n           libgsl0-dev \\\\\\n           libopenblas-dev \\\\\\n           lsb-release \\\\\\n           unzip \\\\\\n           wget \\\\\\n           zlib1g-dev \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone --depth 1 --branch 3.1.1 https://github.com/lipsia-fmri/lipsia.git \\\\\\n && cd lipsia \\\\\\n && bash -c \\"source lipsia-setup.sh && cd src && make\\"" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/opt/lipsia/lib" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/lipsia/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/lipsia/bin/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: lqt
File: build/lqt/lqt_0.1.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  r-base \
                  r-base-dev \
           && rm -rf /var/lib/apt/lists/*
RUN  R --slave -e "if (!require('devtools', quietly = TRUE)) install.packages('devtools', repos='https://cloud.r-project.org/'); devtools::install_github('jdwor/LQT', dependencies=TRUE, upgrade='never'); cat('Installed LQT from GitHub\n')"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "r-base", \
          "r-base-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           r-base \\\\\\n           r-base-dev \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " R --slave -e \\"if \(!require\('"'"'devtools'"'"', quietly = TRUE\)\) install.packages\('"'"'devtools'"'"', repos='"'"'https://cloud.r-project.org/'"'"'\); devtools::install_github\('"'"'jdwor/LQT'"'"', dependencies=TRUE, upgrade='"'"'never'"'"'\); cat\('"'"'Installed LQT from GitHub\\\\n'"'"'\)\\"" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: megnet
File: build/megnet/megnet_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y -C conda-forge --name base \
           "python" \
           "jupyterlab" \
           "mne" \
           "mne-bids" \
           "mne-connectivity" \
           "hdf5storage" \
           "ipympl" \
           "nb_conda_kernels" \
           "pydicom" \
           "seaborn" \
           "openpyxl" \
           "pip" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "tabulate" \
             "pyyaml" \
             "easydict"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  git \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/SwinburneNeuroimaging/MEGNET.git \
        && python setup.py
ENV DEPLOY_BINS="python:megnet"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y -C conda-forge --name base \\\\\\n    \\"python\\" \\\\\\n    \\"jupyterlab\\" \\\\\\n    \\"mne\\" \\\\\\n    \\"mne-bids\\" \\\\\\n    \\"mne-connectivity\\" \\\\\\n    \\"hdf5storage\\" \\\\\\n    \\"ipympl\\" \\\\\\n    \\"nb_conda_kernels\\" \\\\\\n    \\"pydicom\\" \\\\\\n    \\"seaborn\\" \\\\\\n    \\"openpyxl\\" \\\\\\n    \\"pip\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"tabulate\\" \\\\\\n      \\"pyyaml\\" \\\\\\n      \\"easydict\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           git \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/SwinburneNeuroimaging/MEGNET.git \\\\\\n && python setup.py" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python:megnet" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: metabody
File: build/metabody/metabody_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  bzip2 \
                  ca-certificates \
                  git \
                  software-properties-common \
                  wget \
           && rm -rf /var/lib/apt/lists/*
RUN  add-apt-repository universe -y
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  bc \
                  build-essential \
                  cmake \
                  curl \
                  eog \
                  evince \
                  firefox \
                  gedit \
                  git \
                  gnome-terminal \
                  gnome-tweaks \
                  gsl-bin \
                  libcurl4-openssl-dev \
                  libgdal-dev \
                  libgfortran-14-dev \
                  libglib2.0-dev \
                  libglu1-mesa-dev \
                  libglut-dev \
                  libglw1-mesa-dev \
                  libgomp1 \
                  libgsl-dev \
                  libjpeg62 \
                  libnode-dev \
                  libopenblas-dev \
                  libssl-dev \
                  libudunits2-dev \
                  libxext-dev \
                  libxi-dev \
                  libxm4 \
                  libxml2-dev \
                  libxmu-dev \
                  libxpm-dev \
                  nautilus \
                  netpbm \
                  python-is-python3 \
                  python3-flask \
                  python3-flask-cors \
                  python3-matplotlib \
                  python3-numpy \
                  python3-pil \
                  r-base \
                  r-base-dev \
                  r-base-dev \
                  tcsh \
                  vim \
                  xfonts-100dpi \
                  xfonts-base \
                  xterm \
                  xvfb \
           && rm -rf /var/lib/apt/lists/*
RUN  cd /usr/include/GL \
        && mv GLwDrawA.h GLwDrawA.h.orig \
        && sed 's/GLAPI WidgetClass/extern GLAPI WidgetClass/' GLwDrawA.h.orig > /tmp/GLwDrawA.h \
        && mv /tmp/GLwDrawA.h GLwDrawA.h
WORKDIR /opt
RUN  curl -O https://afni.nimh.nih.gov/pub/dist/bin/misc/@update.afni.binaries \
        && tcsh @update.afni.binaries -package linux_ubuntu_24_64 -do_extras \
        && mv /root/abin /usr/local/abin
ENV PATH="/usr/local/abin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV R_LIBS="/usr/local/share/R-4.3"
RUN  curl -O https://afni.nimh.nih.gov/pub/dist/tgz/package_libs/linux_ubuntu_24_R-4.3_libs.tgz \
        && tar -xf linux_ubuntu_24_R-4.3_libs.tgz \
        && mv linux_ubuntu_24_R-4.3_libs /usr/local/share/R-4.3 \
        && rm -f linux_ubuntu_24_R-4.3_libs.tgz
RUN  rPkgsInstall -pkgs ALL
WORKDIR /tmp
RUN  curl -fsSL -o miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py39_4.12.0-Linux-x86_64.sh \
        && bash miniconda.sh -b -p /opt/miniconda-4.12.0 \
        && rm miniconda.sh
ENV PATH="/opt/miniconda-4.12.0/bin:$PATH"
RUN  conda config --system --prepend channels conda-forge \
        && conda config --system --set channel_priority strict \
        && conda clean --all --yes
RUN  conda install mamba \
        && mamba clean --all --yes
RUN  mamba install -y --name base "python=3.10" \
        && mamba clean --all --yes
WORKDIR /opt/code
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  cmake \
                  dos2unix \
                  g++ \
                  git \
                  libboost-all-dev \
                  libboost-program-options1.74.0 \
                  libfftw3-dev \
                  libhdf5-dev \
                  libpugixml-dev \
                  libpugixml1v5 \
                  libxml2-dev \
                  libxslt1-dev \
                  libxslt1.1 \
                  vim \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/ismrmrd/ismrmrd.git \
        && cd ./ismrmrd \
        && cmake . \
        && make -j 16 \
        && make install
RUN  git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \
        && cd siemens_to_ismrmrd \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make -j 16 \
        && make install
RUN  pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image
RUN  git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \
        && cd ismrmrd-python-tools \
        && pip3 install --no-cache-dir .
RUN  git clone https://github.com/kspaceKelvin/python-ismrmrd-server \
        && find /opt/code/python-ismrmrd-server -name "*.sh" -exec chmod +x {} \; \
        && find /opt/code/python-ismrmrd-server -name "*.sh" | xargs dos2unix \
        && sed -i 's/invertcontrast/default_replace_with_valid_name/g' /opt/code/python-ismrmrd-server/main.py
COPY ["metabody.py", \
      "/opt/code/python-ismrmrd-server/metabody.py"]
COPY ["afni_processing.sh", \
      "/opt/code/afni_processing.sh"]
RUN  mkdir -p /opt/code/stim_times \
        && git clone https://github.com/thomshaw92/BodyLocaliser.git /opt/code/BodyLocaliser \
        && cp /opt/code/BodyLocaliser/sub-1_TBS/sub-1_run-1*.1D /opt/code/stim_times/
RUN  pip install SimpleITK nibabel pandas scikit-learn dcm2niix
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "bzip2", \
          "ca-certificates", \
          "git", \
          "wget", \
          "build-essential", \
          "software-properties-common" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           bzip2 \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           software-properties-common \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " add-apt-repository universe -y" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "libgdal-dev", \
          "libopenblas-dev", \
          "libnode-dev", \
          "libudunits2-dev", \
          "r-base", \
          "r-base-dev", \
          "tcsh", \
          "xfonts-base", \
          "libssl-dev", \
          "python-is-python3", \
          "python3-matplotlib", \
          "python3-numpy", \
          "python3-flask", \
          "python3-flask-cors", \
          "python3-pil", \
          "gsl-bin", \
          "netpbm", \
          "gnome-tweaks", \
          "libjpeg62", \
          "xvfb", \
          "xterm", \
          "vim", \
          "curl", \
          "gedit", \
          "evince", \
          "eog", \
          "libglu1-mesa-dev", \
          "libglw1-mesa-dev", \
          "libxm4", \
          "build-essential", \
          "libcurl4-openssl-dev", \
          "libxml2-dev", \
          "libgfortran-14-dev", \
          "libgomp1", \
          "gnome-terminal", \
          "nautilus", \
          "firefox", \
          "xfonts-100dpi", \
          "r-base-dev", \
          "cmake", \
          "bc", \
          "git", \
          "libxext-dev", \
          "libxmu-dev", \
          "libxpm-dev", \
          "libgsl-dev", \
          "libglut-dev", \
          "libxi-dev", \
          "libglib2.0-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           bc \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           curl \\\\\\n           eog \\\\\\n           evince \\\\\\n           firefox \\\\\\n           gedit \\\\\\n           git \\\\\\n           gnome-terminal \\\\\\n           gnome-tweaks \\\\\\n           gsl-bin \\\\\\n           libcurl4-openssl-dev \\\\\\n           libgdal-dev \\\\\\n           libgfortran-14-dev \\\\\\n           libglib2.0-dev \\\\\\n           libglu1-mesa-dev \\\\\\n           libglut-dev \\\\\\n           libglw1-mesa-dev \\\\\\n           libgomp1 \\\\\\n           libgsl-dev \\\\\\n           libjpeg62 \\\\\\n           libnode-dev \\\\\\n           libopenblas-dev \\\\\\n           libssl-dev \\\\\\n           libudunits2-dev \\\\\\n           libxext-dev \\\\\\n           libxi-dev \\\\\\n           libxm4 \\\\\\n           libxml2-dev \\\\\\n           libxmu-dev \\\\\\n           libxpm-dev \\\\\\n           nautilus \\\\\\n           netpbm \\\\\\n           python-is-python3 \\\\\\n           python3-flask \\\\\\n           python3-flask-cors \\\\\\n           python3-matplotlib \\\\\\n           python3-numpy \\\\\\n           python3-pil \\\\\\n           r-base \\\\\\n           r-base-dev \\\\\\n           r-base-dev \\\\\\n           tcsh \\\\\\n           vim \\\\\\n           xfonts-100dpi \\\\\\n           xfonts-base \\\\\\n           xterm \\\\\\n           xvfb \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " cd /usr/include/GL \\\\\\n && mv GLwDrawA.h GLwDrawA.h.orig \\\\\\n && sed '"'"'s/GLAPI WidgetClass/extern GLAPI WidgetClass/'"'"' GLwDrawA.h.orig > /tmp/GLwDrawA.h \\\\\\n && mv /tmp/GLwDrawA.h GLwDrawA.h" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -O https://afni.nimh.nih.gov/pub/dist/bin/misc/@update.afni.binaries \\\\\\n && tcsh @update.afni.binaries -package linux_ubuntu_24_64 -do_extras \\\\\\n && mv /root/abin /usr/local/abin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/usr/local/abin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "R_LIBS": "/usr/local/share/R-4.3" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -O https://afni.nimh.nih.gov/pub/dist/tgz/package_libs/linux_ubuntu_24_R-4.3_libs.tgz \\\\\\n && tar -xf linux_ubuntu_24_R-4.3_libs.tgz \\\\\\n && mv linux_ubuntu_24_R-4.3_libs /usr/local/share/R-4.3 \\\\\\n && rm -f linux_ubuntu_24_R-4.3_libs.tgz" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " rPkgsInstall -pkgs ALL" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/tmp" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL -o miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py39_4.12.0-Linux-x86_64.sh \\\\\\n && bash miniconda.sh -b -p /opt/miniconda-4.12.0 \\\\\\n && rm miniconda.sh" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/miniconda-4.12.0/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " conda config --system --prepend channels conda-forge \\\\\\n && conda config --system --set channel_priority strict \\\\\\n && conda clean --all --yes" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " conda install mamba \\\\\\n && mamba clean --all --yes" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mamba install -y --name base \\"python=3.10\\" \\\\\\n && mamba clean --all --yes" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "libxslt1.1", \
          "libboost-program-options1.74.0", \
          "libpugixml1v5", \
          "vim", \
          "dos2unix", \
          "git", \
          "cmake", \
          "g++", \
          "libhdf5-dev", \
          "libxml2-dev", \
          "libxslt1-dev", \
          "libboost-all-dev", \
          "libfftw3-dev", \
          "libpugixml-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           dos2unix \\\\\\n           g++ \\\\\\n           git \\\\\\n           libboost-all-dev \\\\\\n           libboost-program-options1.74.0 \\\\\\n           libfftw3-dev \\\\\\n           libhdf5-dev \\\\\\n           libpugixml-dev \\\\\\n           libpugixml1v5 \\\\\\n           libxml2-dev \\\\\\n           libxslt1-dev \\\\\\n           libxslt1.1 \\\\\\n           vim \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd.git \\\\\\n && cd ./ismrmrd \\\\\\n && cmake . \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \\\\\\n && cd siemens_to_ismrmrd \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \\\\\\n && cd ismrmrd-python-tools \\\\\\n && pip3 install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/kspaceKelvin/python-ismrmrd-server \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" -exec chmod +x {} \\\\; \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" | xargs dos2unix \\\\\\n && sed -i '"'"'s/invertcontrast/default_replace_with_valid_name/g'"'"' /opt/code/python-ismrmrd-server/main.py" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "metabody.py", \
          "/opt/code/python-ismrmrd-server/metabody.py" \
        ], \
        "destination": "/opt/code/python-ismrmrd-server/metabody.py" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "afni_processing.sh", \
          "/opt/code/afni_processing.sh" \
        ], \
        "destination": "/opt/code/afni_processing.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mkdir -p /opt/code/stim_times \\\\\\n && git clone https://github.com/thomshaw92/BodyLocaliser.git /opt/code/BodyLocaliser \\\\\\n && cp /opt/code/BodyLocaliser/sub-1_TBS/sub-1_run-1*.1D /opt/code/stim_times/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install SimpleITK nibabel pandas scikit-learn dcm2niix" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: minc
File: build/minc/minc_1.9.18.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:18.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV MINC_TOOLKIT="/opt/minc-1.9.18" \
    MINC_TOOLKIT_VERSION="/opt/minc-1.9.18" \
    PATH="/opt/minc-1.9.18/bin:/opt/minc-1.9.18/volgenmodel-nipype/extra-scripts:/opt/minc-1.9.18/pipeline:$PATH" \
    PERL5LIB="/opt/minc-1.9.18/perl:/opt/minc-1.9.18/pipeline:${PERL5LIB}" \
    LD_LIBRARY_PATH="/opt/minc-1.9.18/lib:/opt/minc-1.9.18/lib/InsightToolkit:${LD_LIBRARY_PATH}" \
    MNI_DATAPATH="/opt/minc-1.9.18/share" \
    MINC_FORCE_V2="1" \
    MINC_COMPRESS="4" \
    VOLUME_CACHE_THRESHOLD="-1" \
    MANPATH="/opt/minc-1.9.18/man:${MANPATH}"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           binutils \
           ca-certificates \
           curl \
           ed \
           gdebi-core \
           git \
           imagemagick \
           libc6 \
           libgl1-mesa-dev \
           libgl1-mesa-glx \
           libglu1-mesa \
           libgomp1 \
           libice6 \
           libjpeg62 \
           libsm6 \
           libstdc++6 \
           libx11-6 \
           libxext6 \
           libxi6 \
           libxmu6 \
           octave \
           perl \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MINC, BEASTLIB, and MODELS..." \
    && cd / \
    # ar allows to extract the debian package so we can also install this in centos based OSs.
    && curl https://packages.bic.mni.mcgill.ca/minc-toolkit/Debian/minc-toolkit-1.9.18-20200813-Ubuntu_18.04-x86_64.deb -o minc.deb && ar p minc.deb data.tar.gz | tar zx && rm minc.deb \
    && ln -s /opt/minc/1.9.18 /opt/minc-1.9.18 \
    && git clone https://github.com/CAIsr/volgenmodel-nipype.git /opt/minc-1.9.18/volgenmodel-nipype/ \
    && curl -fL http://packages.bic.mni.mcgill.ca/tgz/beast-library-1.1.tar.gz \
    | tar -xz -C /opt/minc-1.9.18/share \
    && curl -fL -o /tmp/mni_90a.zip http://www.bic.mni.mcgill.ca/~vfonov/icbm/2009/mni_icbm152_nlin_sym_09a_minc2.zip \
    && unzip /tmp/mni_90a.zip -d /opt/minc-1.9.18/share/icbm152_model_09a \
    && curl -fL -o /tmp/mni_90c.zip http://www.bic.mni.mcgill.ca/~vfonov/icbm/2009/mni_icbm152_nlin_sym_09c_minc2.zip \
    && unzip /tmp/mni_90c.zip -d /opt/minc-1.9.18/share/icbm152_model_09c \
    && rm -rf /tmp/mni*
ENV DEPLOY_PATH="/opt/minc-1.9.18/bin/:/opt/minc-1.9.18/volgenmodel-nipype/extra-scripts:/opt/minc-1.9.18/pipeline"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:18.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MINC_TOOLKIT": "/opt/minc-1.9.18", \
        "MINC_TOOLKIT_VERSION": "/opt/minc-1.9.18", \
        "PATH": "/opt/minc-1.9.18/bin:/opt/minc-1.9.18/volgenmodel-nipype/extra-scripts:/opt/minc-1.9.18/pipeline:$PATH", \
        "PERL5LIB": "/opt/minc-1.9.18/perl:/opt/minc-1.9.18/pipeline:${PERL5LIB}", \
        "LD_LIBRARY_PATH": "/opt/minc-1.9.18/lib:/opt/minc-1.9.18/lib/InsightToolkit:${LD_LIBRARY_PATH}", \
        "MNI_DATAPATH": "/opt/minc-1.9.18/share", \
        "MINC_FORCE_V2": "1", \
        "MINC_COMPRESS": "4", \
        "VOLUME_CACHE_THRESHOLD": "-1", \
        "MANPATH": "/opt/minc-1.9.18/man:${MANPATH}" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    binutils \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    ed \\\\\\n    gdebi-core \\\\\\n    git \\\\\\n    imagemagick \\\\\\n    libc6 \\\\\\n    libgl1-mesa-dev \\\\\\n    libgl1-mesa-glx \\\\\\n    libglu1-mesa \\\\\\n    libgomp1 \\\\\\n    libice6 \\\\\\n    libjpeg62 \\\\\\n    libsm6 \\\\\\n    libstdc++6 \\\\\\n    libx11-6 \\\\\\n    libxext6 \\\\\\n    libxi6 \\\\\\n    libxmu6 \\\\\\n    octave \\\\\\n    perl \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MINC, BEASTLIB, and MODELS...\\"\\ncd /\\n# ar allows to extract the debian package so we can also install this in centos based OSs.\\ncurl https://packages.bic.mni.mcgill.ca/minc-toolkit/Debian/minc-toolkit-1.9.18-20200813-Ubuntu_18.04-x86_64.deb -o minc.deb && ar p minc.deb data.tar.gz | tar zx && rm minc.deb\\nln -s /opt/minc/1.9.18 /opt/minc-1.9.18\\ngit clone https://github.com/CAIsr/volgenmodel-nipype.git /opt/minc-1.9.18/volgenmodel-nipype/\\ncurl -fL http://packages.bic.mni.mcgill.ca/tgz/beast-library-1.1.tar.gz \\\\\\n| tar -xz -C /opt/minc-1.9.18/share\\ncurl -fL -o /tmp/mni_90a.zip http://www.bic.mni.mcgill.ca/~vfonov/icbm/2009/mni_icbm152_nlin_sym_09a_minc2.zip\\nunzip /tmp/mni_90a.zip -d /opt/minc-1.9.18/share/icbm152_model_09a\\ncurl -fL -o /tmp/mni_90c.zip http://www.bic.mni.mcgill.ca/~vfonov/icbm/2009/mni_icbm152_nlin_sym_09c_minc2.zip\\nunzip /tmp/mni_90c.zip -d /opt/minc-1.9.18/share/icbm152_model_09c\\nrm -rf /tmp/mni*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/minc-1.9.18/bin/:/opt/minc-1.9.18/volgenmodel-nipype/extra-scripts:/opt/minc-1.9.18/pipeline" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: mipav
File: build/mipav/mipav_11.3.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
WORKDIR /opt
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  libfreetype6 \
                  libgl1-mesa-glx \
                  libxi6 \
                  libxrender1 \
                  libxtst6 \
           && rm -rf /var/lib/apt/lists/*
RUN --mount=type=bind,source=cache/hb81ab72c,target=/.neurocontainer-cache/hb81ab72c,readonly sh /.neurocontainer-cache/hb81ab72c/mipav_unix_11.3.3.sh -q
ENV PATH="/usr/local/mipav:${PATH}"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "libfreetype6", \
          "libgl1-mesa-glx", \
          "libxrender1", \
          "libxtst6", \
          "libxi6" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           libfreetype6 \\\\\\n           libgl1-mesa-glx \\\\\\n           libxi6 \\\\\\n           libxrender1 \\\\\\n           libxtst6 \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/hb81ab72c,target=/.neurocontainer-cache/hb81ab72c,readonly sh /.neurocontainer-cache/hb81ab72c/mipav_unix_11.3.3.sh -q" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/usr/local/mipav:${PATH}" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: mne
File: build/mne/mne_1.7.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  apt-transport-https \
                  ca-certificates \
                  coreutils \
                  curl \
                  git \
                  gnome-keyring \
                  gnupg \
                  libasound2 \
                  libgbm1 \
                  libgl1-mesa-dri \
                  libgl1-mesa-glx \
                  libglu1-mesa \
                  libgtk-3-0 \
                  libnotify4 \
                  libnss3 \
                  libsecret-1-0 \
                  libxkbfile1 \
                  libxshmfence1 \
                  libxss1 \
                  mesa-utils \
                  midori \
                  python3-pyqt5 \
                  unzip \
                  wget \
                  xdg-utils \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda-4.7.12" \
    PATH="/opt/miniconda-4.7.12/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-4.7.12/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-4.7.12 \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  conda install -c conda-forge -n base mamba=0.24.0
RUN  mamba create --override-channels --channel=conda-forge --name=mne-1.7.1 urllib3=2.2.1 mne=1.7.1
RUN  wget -O vscode.deb 'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64' \
        && apt install ./vscode.deb \
        && rm -rf ./vscode.deb
RUN  code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.python \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.vscode-pylance \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-keymap \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-renderers
ENV DONT_PROMPT_WSL_INSTALL="1"
WORKDIR /opt/
RUN  curl -fsSL https://github.com/mne-tools/mne-bids-pipeline/archive/refs/heads/main.tar.gz | tar xz
RUN  chmod a+rwx /opt/mne-bids-pipeline-main -R
COPY ["code", \
      "/usr/local/sbin/"]
RUN  chmod a+x /usr/local/sbin/code \
        && chmod a+rwx /opt/vscode-extensions -R
ENV RUNLEVEL="3"
ENV XDG_RUNTIME_DIR="~/.vscode"
RUN test "$(getent passwd neuro)" \
    || useradd --no-user-group --create-home --shell /bin/bash neuro
USER neuro
ENV DEPLOY_BINS="code"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "midori", \
          "xdg-utils", \
          "python3-pyqt5", \
          "unzip", \
          "git", \
          "apt-transport-https", \
          "ca-certificates", \
          "coreutils", \
          "curl", \
          "gnome-keyring", \
          "gnupg", \
          "libnotify4", \
          "wget", \
          "libnss3", \
          "libxkbfile1", \
          "libsecret-1-0", \
          "libgtk-3-0", \
          "libxss1", \
          "libgbm1", \
          "libxshmfence1", \
          "libasound2", \
          "libglu1-mesa", \
          "libgl1-mesa-dri", \
          "mesa-utils", \
          "libgl1-mesa-glx" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           apt-transport-https \\\\\\n           ca-certificates \\\\\\n           coreutils \\\\\\n           curl \\\\\\n           git \\\\\\n           gnome-keyring \\\\\\n           gnupg \\\\\\n           libasound2 \\\\\\n           libgbm1 \\\\\\n           libgl1-mesa-dri \\\\\\n           libgl1-mesa-glx \\\\\\n           libglu1-mesa \\\\\\n           libgtk-3-0 \\\\\\n           libnotify4 \\\\\\n           libnss3 \\\\\\n           libsecret-1-0 \\\\\\n           libxkbfile1 \\\\\\n           libxshmfence1 \\\\\\n           libxss1 \\\\\\n           mesa-utils \\\\\\n           midori \\\\\\n           python3-pyqt5 \\\\\\n           unzip \\\\\\n           wget \\\\\\n           xdg-utils \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-4.7.12", \
        "PATH": "/opt/miniconda-4.7.12/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-4.7.12/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-4.7.12-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-4.7.12\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " conda install -c conda-forge -n base mamba=0.24.0" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mamba create --override-channels --channel=conda-forge --name=mne-1.7.1 urllib3=2.2.1 mne=1.7.1" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget -O vscode.deb '"'"'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64'"'"' \\\\\\n && apt install ./vscode.deb \\\\\\n && rm -rf ./vscode.deb" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.python \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.vscode-pylance \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-keymap \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-renderers" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DONT_PROMPT_WSL_INSTALL": "1" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL https://github.com/mne-tools/mne-bids-pipeline/archive/refs/heads/main.tar.gz | tar xz" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod a+rwx /opt/mne-bids-pipeline-main -R" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "code", \
          "/usr/local/sbin/" \
        ], \
        "destination": "/usr/local/sbin/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod a+x /usr/local/sbin/code \\\\\\n && chmod a+rwx /opt/vscode-extensions -R" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "RUNLEVEL": "3" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "XDG_RUNTIME_DIR": "~/.vscode" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "neuro" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "code" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER neuro
# End saving to specification to JSON.

========================================
Recipe: mricrogl
File: build/mricrogl/mricrogl_1.2.20211006.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  appmenu-gtk2-module \
                  ca-certificates \
                  libglu1-mesa \
                  libgtk2.0-0 \
                  libqt5pas1 \
                  pigz \
                  unzip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt
RUN  wget --quiet -O MRIcroGL_linux_includes_Python.zip 'https://github.com/rordenlab/MRIcroGL/releases/download/v1.2.20211006/MRIcroGL_linux_includes_Python.zip' \
        && unzip MRIcroGL_linux_includes_Python.zip \
        && rm -rf MRIcroGL_linux_includes_Python.zip
RUN  wget --quiet -O libqt5pas1_2.9-0_amd64.deb 'https://github.com/davidbannon/libqt5pas/releases/download/v1.2.9/libqt5pas1_2.9-0_amd64.deb' \
        && apt install ./libqt5pas1_2.9-0_amd64.deb \
        && rm -rf libqt5pas1_2.9-0_amd64.deb
ENV PATH="/opt/MRIcroGL:/opt/MRIcroGL/Resources:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV DEPLOY_BINS="dcm2niix"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "unzip", \
          "ca-certificates", \
          "libgtk2.0-0", \
          "libqt5pas1", \
          "appmenu-gtk2-module", \
          "libglu1-mesa", \
          "pigz" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           appmenu-gtk2-module \\\\\\n           ca-certificates \\\\\\n           libglu1-mesa \\\\\\n           libgtk2.0-0 \\\\\\n           libqt5pas1 \\\\\\n           pigz \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --quiet -O MRIcroGL_linux_includes_Python.zip '"'"'https://github.com/rordenlab/MRIcroGL/releases/download/v1.2.20211006/MRIcroGL_linux_includes_Python.zip'"'"' \\\\\\n && unzip MRIcroGL_linux_includes_Python.zip \\\\\\n && rm -rf MRIcroGL_linux_includes_Python.zip" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --quiet -O libqt5pas1_2.9-0_amd64.deb '"'"'https://github.com/davidbannon/libqt5pas/releases/download/v1.2.9/libqt5pas1_2.9-0_amd64.deb'"'"' \\\\\\n && apt install ./libqt5pas1_2.9-0_amd64.deb \\\\\\n && rm -rf libqt5pas1_2.9-0_amd64.deb" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/MRIcroGL:/opt/MRIcroGL/Resources:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "dcm2niix" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: mricron
File: build/mricron/mricron_1.0.20190902.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM centos:7
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && if ls /etc/yum.repos.d/CentOS-* >/dev/null 2>&1; then \
           sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-* \
    &&     sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*; \
    fi \
    && yum install -y -q \
           bzip2 \
           ca-certificates \
           glibc-langpack-en \
           glibc-locale-source \
           unzip \
    && yum clean all \
    && rm -rf /var/cache/yum/* \
    && localedef -i en_US -f UTF-8 en_US.UTF-8 \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
RUN yum install -y -q \
                  ca-certificates \
                  gtk2 \
                  pigz \
                  unzip \
                  wget \
           && yum clean all \
           && rm -rf /var/cache/yum/*
WORKDIR /opt
RUN  wget --quiet -O MRIcon_linux.zip  'https://github.com/neurolabusc/MRIcron/releases/download/v1.0.20190902/MRIcron_linux.zip' \
        && unzip MRIcon_linux.zip \
        && rm -rf MRIcon_linux.zip
ENV PATH="/opt/mricron:/opt/mricron/Resources:$PATH"
ENV LC_ALL="C.UTF-8"
ENV LANG="C.UTF-8"
RUN mkdir -p /boutique
COPY ["mricron.json", \
      "/boutique/mricron.json"]
ENV DEPLOY_PATH="/opt/mricron"
ENV DEPLOY_BINS="MRIcron:dcm2niix"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "yum", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "centos:7" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\nif ls /etc/yum.repos.d/CentOS-* >/dev/null 2>&1; then\\n    sed -i '"'"'s/mirrorlist/#mirrorlist/g'"'"' /etc/yum.repos.d/CentOS-*\\n    sed -i '"'"'s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g'"'"' /etc/yum.repos.d/CentOS-*;\\nfi\\nyum install -y -q \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    glibc-langpack-en \\\\\\n    glibc-locale-source \\\\\\n    unzip\\nyum clean all\\nrm -rf /var/cache/yum/*\\nlocaledef -i en_US -f UTF-8 en_US.UTF-8\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "unzip", \
          "ca-certificates", \
          "gtk2", \
          "pigz" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "yum install -y -q \\\\\\n           ca-certificates \\\\\\n           gtk2 \\\\\\n           pigz \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && yum clean all \\\\\\n    && rm -rf /var/cache/yum/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --quiet -O MRIcon_linux.zip  '"'"'https://github.com/neurolabusc/MRIcron/releases/download/v1.0.20190902/MRIcron_linux.zip'"'"' \\\\\\n && unzip MRIcon_linux.zip \\\\\\n && rm -rf MRIcon_linux.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/mricron:/opt/mricron/Resources:$PATH" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LC_ALL": "C.UTF-8" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "C.UTF-8" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /boutique" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "mricron.json", \
          "/boutique/mricron.json" \
        ], \
        "destination": "/boutique/mricron.json" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/mricron" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "MRIcron:dcm2niix" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: mriqc
File: build/mriqc/mriqc_24.0.2.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM nipreps/mriqc:24.0.2
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEPLOY_BINS="mriqc"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "nipreps/mriqc:24.0.2" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "mriqc" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: mritools
File: build/mritools/mritools_3.3.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  curl \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/mritools-3.3.0/
RUN  curl -fsSL --retry 5 https://github.com/korbinian90/CompileMRI.jl/releases/download/v3.3.0/mritools_linux_3.3.0.tar.gz | tar -xz -C /opt/mritools-3.3.0/ --strip-components 1
ENV PATH="/opt/mritools-3.3.0/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV DEPLOY_PATH="/opt/mritools-3.3.0/bin"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "curl", \
          "ca-certificates" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/mritools-3.3.0/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://github.com/korbinian90/CompileMRI.jl/releases/download/v3.3.0/mritools_linux_3.3.0.tar.gz | tar -xz -C /opt/mritools-3.3.0/ --strip-components 1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/mritools-3.3.0/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/mritools-3.3.0/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: mrsimetabolicconnectome
File: build/mrsimetabolicconnectome/mrsimetabolicconnectome_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN  cd /opt \
        && git clone https://github.com/MRSI-Psychosis-UP/MRSI-Metabolic-Connectome.git
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  cd /opt/MRSI-Metabolic-Connectome \
        && conda env create -n mrsitooldemo_env -f environment.yaml
ENV DEVANALYSEPATH="/opt/MRSI-Metabolic-Connectome"
ENV PATH="/opt/miniconda/envs/mrsitooldemo_env/bin:$PATH"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " cd /opt \\\\\\n && git clone https://github.com/MRSI-Psychosis-UP/MRSI-Metabolic-Connectome.git" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " cd /opt/MRSI-Metabolic-Connectome \\\\\\n && conda env create -n mrsitooldemo_env -f environment.yaml" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEVANALYSEPATH": "/opt/MRSI-Metabolic-Connectome" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/miniconda/envs/mrsitooldemo_env/bin:$PATH" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: mrtrix3
File: build/mrtrix3/mrtrix3_3.0.7.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV FSLDIR="/opt/fsl-6.0.7.16" \
    PATH="/opt/fsl-6.0.7.16/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.7.16/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.7.16/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libopenblas0 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           nano \
           python3 \
           sudo \
           wget \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing FSL ..." \
    && curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16
ENV PATH="/opt/mrtrix3-3.0.7/bin:$PATH" \
    LD_LIBRARY_PATH="/opt/mrtrix3-3.0.7/lib:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           g++ \
           gcc \
           git \
           libeigen3-dev \
           make \
           python3 \
           python3-numpy \
           zlib1g-dev \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /opt/mrtrix3-3.0.7 \
    && git clone https://github.com/MRtrix3/mrtrix3.git /opt/mrtrix3-3.0.7 \
    && cd /opt/mrtrix3-3.0.7 \
    && git checkout 3.0.7 \
    && python3 configure -nogui \
    && echo "Compiling MRtrix3 ..." \
    && NUMBER_OF_PROCESSORS="1" python3 build
ENV ANTSPATH="/opt/ants-2.4.3/" \
    PATH="/opt/ants-2.4.3:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           curl \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading ANTs ..." \
    && curl -fsSL -o ants.zip https://github.com/ANTsX/ANTs/releases/download/v2.4.3/ants-2.4.3-centos7-X64-gcc.zip \
    && unzip ants.zip -d /opt \
    && mv /opt/ants-2.4.3/bin/* /opt/ants-2.4.3 \
    && rm ants.zip
WORKDIR /opt/mrtrix3-"3.0.7"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  dbus-x11 \
                  less \
                  libfftw3-dev \
                  libglu1-mesa \
                  liblapack3 \
                  libqt5core5a \
                  libqt5gui5 \
                  libqt5opengl5 \
                  libqt5opengl5-dev \
                  libqt5svg5-dev \
                  libtiff-dev \
                  libtiff6 \
                  mesa-common-dev \
                  wget \
           && rm -rf /var/lib/apt/lists/*
RUN  python3 configure
RUN  python3 build
RUN  ln -s /usr/bin/python3 /usr/bin/python
WORKDIR /opt/acpcdetect_V2.1
RUN  wget https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/acpcdetect_V2.1_LinuxCentOS6.7.tar.gz \
        && tar zxvf acpcdetect_V2.1_LinuxCentOS6.7.tar.gz \
        && rm -rf acpcdetect_V2.1_LinuxCentOS6.7.tar.gz
ENV ARTHOME="/opt/acpcdetect_V2.1/"
ENV PATH="$PATH:/opt/acpcdetect_V2.1/bin"
ENV DEPLOY_PATH="/opt/mrtrix3-"3.0.7"/bin/:/opt/acpcdetect_V2.1/bin"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLDIR": "/opt/fsl-6.0.7.16", \
        "PATH": "/opt/fsl-6.0.7.16/bin:$PATH", \
        "FSLOUTPUTTYPE": "NIFTI_GZ", \
        "FSLMULTIFILEQUIT": "TRUE", \
        "FSLTCLSH": "/opt/fsl-6.0.7.16/bin/fsltclsh", \
        "FSLWISH": "/opt/fsl-6.0.7.16/bin/fslwish", \
        "FSLLOCKDIR": "", \
        "FSLMACHINELIST": "", \
        "FSLREMOTECALL": "", \
        "FSLGECUDAQ": "cuda.q" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    dc \\\\\\n    file \\\\\\n    libfontconfig1 \\\\\\n    libfreetype6 \\\\\\n    libgl1-mesa-dev \\\\\\n    libgl1-mesa-dri \\\\\\n    libglu1-mesa-dev \\\\\\n    libgomp1 \\\\\\n    libice6 \\\\\\n    libopenblas0 \\\\\\n    libxcursor1 \\\\\\n    libxft2 \\\\\\n    libxinerama1 \\\\\\n    libxrandr2 \\\\\\n    libxrender1 \\\\\\n    libxt6 \\\\\\n    nano \\\\\\n    python3 \\\\\\n    sudo \\\\\\n    wget\\nrm -rf /var/lib/apt/lists/*\\n\\necho \\"Installing FSL ...\\"\\ncurl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/mrtrix3-3.0.7/bin:$PATH", \
        "LD_LIBRARY_PATH": "/opt/mrtrix3-3.0.7/lib:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    g++ \\\\\\n    gcc \\\\\\n    git \\\\\\n    libeigen3-dev \\\\\\n    make \\\\\\n    python3 \\\\\\n    python3-numpy \\\\\\n    zlib1g-dev\\nrm -rf /var/lib/apt/lists/*\\nmkdir -p /opt/mrtrix3-3.0.7\\ngit clone https://github.com/MRtrix3/mrtrix3.git /opt/mrtrix3-3.0.7\\ncd /opt/mrtrix3-3.0.7\\ngit checkout 3.0.7\\npython3 configure -nogui\\necho \\"Compiling MRtrix3 ...\\"\\nNUMBER_OF_PROCESSORS=\\"1\\" python3 build" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "ANTSPATH": "/opt/ants-2.4.3/", \
        "PATH": "/opt/ants-2.4.3:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading ANTs ...\\"\\ncurl -fsSL -o ants.zip https://github.com/ANTsX/ANTs/releases/download/v2.4.3/ants-2.4.3-centos7-X64-gcc.zip\\nunzip ants.zip -d /opt\\nmv /opt/ants-2.4.3/bin/* /opt/ants-2.4.3\\nrm ants.zip" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/mrtrix3-\\"3.0.7\\"" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "dbus-x11", \
          "less", \
          "mesa-common-dev", \
          "libglu1-mesa", \
          "libqt5svg5-dev", \
          "wget", \
          "libqt5opengl5-dev", \
          "libqt5opengl5", \
          "libqt5gui5", \
          "libqt5core5a", \
          "libtiff-dev", \
          "libtiff6", \
          "libfftw3-dev", \
          "liblapack3" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           dbus-x11 \\\\\\n           less \\\\\\n           libfftw3-dev \\\\\\n           libglu1-mesa \\\\\\n           liblapack3 \\\\\\n           libqt5core5a \\\\\\n           libqt5gui5 \\\\\\n           libqt5opengl5 \\\\\\n           libqt5opengl5-dev \\\\\\n           libqt5svg5-dev \\\\\\n           libtiff-dev \\\\\\n           libtiff6 \\\\\\n           mesa-common-dev \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " python3 configure" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " python3 build" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " ln -s /usr/bin/python3 /usr/bin/python" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/acpcdetect_V2.1" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/acpcdetect_V2.1_LinuxCentOS6.7.tar.gz \\\\\\n && tar zxvf acpcdetect_V2.1_LinuxCentOS6.7.tar.gz \\\\\\n && rm -rf acpcdetect_V2.1_LinuxCentOS6.7.tar.gz" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "ARTHOME": "/opt/acpcdetect_V2.1/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/acpcdetect_V2.1/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/mrtrix3-\\"3.0.7\\"/bin/:/opt/acpcdetect_V2.1/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: networkcorrespondancetoolkit
File: build/networkcorrespondancetoolkit/networkcorrespondancetoolkit_0.3.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
WORKDIR /opt
ENV CONDA_DIR="/opt/miniconda"
ENV PATH="/opt/miniconda/bin:$PATH"
RUN --mount=type=bind,source=cache/ha9ee8e19,target=/.neurocontainer-cache/ha9ee8e19,readonly export PATH="/opt/miniconda/bin:$PATH" \
        && bash /.neurocontainer-cache/ha9ee8e19/miniconda.sh -b -p /opt/miniconda \
        && conda tos accept \
        && conda update -yq -nbase conda \
        && conda config --system --prepend channels conda-forge \
        && conda config --system --set auto_update_conda false \
        && conda config --system --set show_channel_urls true \
        && conda env create -f /.neurocontainer-cache/ha9ee8e19/environment.yml \
        && conda init bash \
        && sync && conda clean --all --yes && sync \
        && rm -rf ~/.cache/pip/*
ENV CONDA_DEFAULT_ENV="NCT_env"
ENV PATH="/opt/miniconda/envs/NCT_env/bin:$PATH"
RUN  echo "conda activate NCT_env" >> ~/.bashrc
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  git \
                  libgl1 \
                  libsm6 \
                  libx11-6 \
                  libxext6 \
                  libxrender1 \
           && rm -rf /var/lib/apt/lists/*
RUN  python3 -m pip install --no-cache-dir cbig_network_correspondence
ENV DEPLOY_BINS="python3:python"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/ha9ee8e19,target=/.neurocontainer-cache/ha9ee8e19,readonly export PATH=\\"/opt/miniconda/bin:$PATH\\" \\\\\\n && bash /.neurocontainer-cache/ha9ee8e19/miniconda.sh -b -p /opt/miniconda \\\\\\n && conda tos accept \\\\\\n && conda update -yq -nbase conda \\\\\\n && conda config --system --prepend channels conda-forge \\\\\\n && conda config --system --set auto_update_conda false \\\\\\n && conda config --system --set show_channel_urls true \\\\\\n && conda env create -f /.neurocontainer-cache/ha9ee8e19/environment.yml \\\\\\n && conda init bash \\\\\\n && sync && conda clean --all --yes && sync \\\\\\n && rm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DEFAULT_ENV": "NCT_env" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/miniconda/envs/NCT_env/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " echo \\"conda activate NCT_env\\" >> ~/.bashrc" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "libx11-6", \
          "libgl1", \
          "libxext6", \
          "libsm6", \
          "libxrender1", \
          "git" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           git \\\\\\n           libgl1 \\\\\\n           libsm6 \\\\\\n           libx11-6 \\\\\\n           libxext6 \\\\\\n           libxrender1 \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " python3 -m pip install --no-cache-dir cbig_network_correspondence" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python3:python" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: neurodock
File: build/neurodock/neurodock_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM dmri/neurodock:v1.0.0
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
ENV DEPLOY_BINS="pydesigner"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "dmri/neurodock:v1.0.0" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "pydesigner" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: nftsim
File: build/nftsim/nftsim_1.0.2.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ghcr.io/farwa-abbas/nftsim:1.0.2
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV PATH="/app/bin:$PATH"
WORKDIR /app
ENV DEPLOY_PATH="/app/bin:/app/configs"
ENV DEPLOY_BINS="nftsim"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ghcr.io/farwa-abbas/nftsim:1.0.2" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/app/bin:$PATH" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/app" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/app/bin:/app/configs" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "nftsim" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: niftyreg
File: build/niftyreg/niftyreg_1.4.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  cmake \
                  curl \
                  g++ \
                  libgomp1 \
                  make \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/niftyreg-1.4.0
RUN  curl -fsSL --retry 5 https://github.com/KCL-BMEIS/niftyreg/archive/8ad2f11507ddedb09ed74a9bd97377b70532ee75.tar.gz | tar -xz -C ./
RUN  mv niftyreg-8ad2f11507ddedb09ed74a9bd97377b70532ee75 src \
        && mkdir build
RUN  cmake -S src -B build -D CMAKE_INSTALL_PREFIX=/opt/niftyreg-1.4.0
RUN  cd build \
        && make \
        && make install
ENV PATH="/opt/niftyreg-1.4.0/bin:${PATH}"
ENV TOOLBOX_PATH="/opt/niftyreg-1.4.0/"
ENV DEPLOY_PATH="/opt/niftyreg-1.4.0/bin/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "libgomp1", \
          "ca-certificates", \
          "curl", \
          "cmake", \
          "make", \
          "g++" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           cmake \\\\\\n           curl \\\\\\n           g++ \\\\\\n           libgomp1 \\\\\\n           make \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/niftyreg-1.4.0" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://github.com/KCL-BMEIS/niftyreg/archive/8ad2f11507ddedb09ed74a9bd97377b70532ee75.tar.gz | tar -xz -C ./" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mv niftyreg-8ad2f11507ddedb09ed74a9bd97377b70532ee75 src \\\\\\n && mkdir build" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " cmake -S src -B build -D CMAKE_INSTALL_PREFIX=/opt/niftyreg-1.4.0" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " cd build \\\\\\n && make \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/niftyreg-1.4.0/bin:${PATH}" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TOOLBOX_PATH": "/opt/niftyreg-1.4.0/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/niftyreg-1.4.0/bin/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: nighres
File: build/nighres/nighres_1.5.2.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.10
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  curl \
                  git \
                  locales \
                  pipx \
                  python-is-python3 \
                  python3-pip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
RUN  curl https://download.java.net/java/GA/jdk20.0.1/b4887098932d415489976708ad6d1a4b/9/GPL/openjdk-20.0.1_linux-x64_bin.tar.gz | tar -zx -C /opt --transform=s/jdk-20.0.1/jdk-temurin-20.0.1/
ENV JAVAHOME="/opt/jdk-temurin-20.0.1"
ENV JCC_JDK="/opt/jdk-temurin-20.0.1"
ENV PATH="$PATH:/opt/jdk-temurin-20.0.1/bin"
RUN  python3 -m venv /opt/python-venv/
ENV PATH="/opt/python-venv/bin:$PATH"
RUN  pip install nipype pandas nilearn JCC
RUN  python3 -m pip install --upgrade setuptools wheel
WORKDIR /opt
RUN  git clone https://github.com/nighres/nighres.git \
        && cd nighres \
        && git checkout release-1.5.2 \
        && make install
ENV ANTSPATH="/opt/ants-2.5.1/bin" \
    PATH="/opt/ants-2.5.1/bin:/opt/ants-2.5.1/Scripts:$PATH" \
    LD_LIBRARY_PATH="/opt/ants-2.5.1/lib:$LD_LIBRARY_PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           cmake \
           g++ \
           gcc \
           git \
           make \
           zlib1g-dev \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /tmp/ants/build \
    && git clone https://github.com/ANTsX/ANTs.git /tmp/ants/source \
    && cd /tmp/ants/source \
    && git fetch --tags \
    && git -c advice.detachedHead=false checkout v2.5.1 \
    && cd /tmp/ants/build \
    && cmake -DCMAKE_INSTALL_PREFIX=/opt/ants-2.5.1 -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF /tmp/ants/source \
    && make -j8 \
    && mkdir -p /opt/ants-2.5.1 \
    # Recent versions of ants create ANTS-build.
    && if [ -d ANTS-build ]; then \
         cd ANTS-build \
         && make install \
         && mv ../../source/Scripts/ /opt/ants-2.5.1; \
       else \
         mv bin lib /opt/ants-2.5.1/ \
         mv ../Scripts/* /opt/ants-2.5.1 ; \
    fi \
    && rm -rf /tmp/ants \
    && chmod a+rx /opt/ants-2.5.1 -R
ENV DEPLOY_BINS="python"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.10" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "git", \
          "pipx", \
          "python-is-python3", \
          "python3-pip", \
          "curl", \
          "locales", \
          "wget", \
          "build-essential" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           curl \\\\\\n           git \\\\\\n           locales \\\\\\n           pipx \\\\\\n           python-is-python3 \\\\\\n           python3-pip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl https://download.java.net/java/GA/jdk20.0.1/b4887098932d415489976708ad6d1a4b/9/GPL/openjdk-20.0.1_linux-x64_bin.tar.gz | tar -zx -C /opt --transform=s/jdk-20.0.1/jdk-temurin-20.0.1/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "JAVAHOME": "/opt/jdk-temurin-20.0.1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "JCC_JDK": "/opt/jdk-temurin-20.0.1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/jdk-temurin-20.0.1/bin" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " python3 -m venv /opt/python-venv/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/python-venv/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install nipype pandas nilearn JCC" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " python3 -m pip install --upgrade setuptools wheel" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/nighres/nighres.git \\\\\\n && cd nighres \\\\\\n && git checkout release-1.5.2 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "ANTSPATH": "/opt/ants-2.5.1/bin", \
        "PATH": "/opt/ants-2.5.1/bin:/opt/ants-2.5.1/Scripts:$PATH", \
        "LD_LIBRARY_PATH": "/opt/ants-2.5.1/lib:$LD_LIBRARY_PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    cmake \\\\\\n    g++ \\\\\\n    gcc \\\\\\n    git \\\\\\n    make \\\\\\n    zlib1g-dev\\nrm -rf /var/lib/apt/lists/*\\nmkdir -p /tmp/ants/build\\ngit clone https://github.com/ANTsX/ANTs.git /tmp/ants/source\\ncd /tmp/ants/source\\ngit fetch --tags\\ngit -c advice.detachedHead=false checkout v2.5.1\\ncd /tmp/ants/build\\ncmake -DCMAKE_INSTALL_PREFIX=/opt/ants-2.5.1 -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF /tmp/ants/source\\nmake -j8\\nmkdir -p /opt/ants-2.5.1\\n# Recent versions of ants create ANTS-build.\\nif [ -d ANTS-build ]; then \\\\\\n  cd ANTS-build \\\\\\n  && make install \\\\\\n  && mv ../../source/Scripts/ /opt/ants-2.5.1; \\\\\\nelse \\\\\\n  mv bin lib /opt/ants-2.5.1/ \\\\\\n  mv ../Scripts/* /opt/ants-2.5.1 ; \\\\\\nfi\\nrm -rf /tmp/ants\\nchmod a+rx /opt/ants-2.5.1 -R" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: niimath
File: build/niimath/niimath_1.0.20250529.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  file \
                  git \
                  libz-dev \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/rordenlab/niimath.git /tmp/niimath \
        && cd /tmp/niimath \
        && git reset --hard 99a2e19526b0e4192b27cfd577729c72afec88c2 \
        && cd ./src \
        && make static -j16 \
        && cp niimath /usr/bin \
        && rm -rf /tmp/niimath
ENV DEPLOY_BINS="niimath"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "git", \
          "libz-dev", \
          "file" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           file \\\\\\n           git \\\\\\n           libz-dev \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/rordenlab/niimath.git /tmp/niimath \\\\\\n && cd /tmp/niimath \\\\\\n && git reset --hard 99a2e19526b0e4192b27cfd577729c72afec88c2 \\\\\\n && cd ./src \\\\\\n && make static -j16 \\\\\\n && cp niimath /usr/bin \\\\\\n && rm -rf /tmp/niimath" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "niimath" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: nipype
File: build/nipype/nipype_1.8.5.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
ENV GOPATH="$HOME/go"
ENV PATH="$PATH:/usr/local/go/bin:/bin:/opt/spm12"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/mcr/v97/runtime/glnxa64:/opt/mcr/v97/bin/glnxa64:/opt/mcr/v97/sys/os/glnxa64:/opt/mcr/v97/extern/bin/glnxa64" \
    MATLABCMD="/opt/mcr/2019b/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/mcr/v97/x11/app-defaults" \
    MCRROOT="/opt/mcr/2019b"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2019b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2019b_Update_9_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/mcr -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  ca-certificates \
                  cryptsetup \
                  curl \
                  libglib2.0-dev \
                  libseccomp-dev \
                  pkg-config \
                  squashfs-tools \
                  wget \
           && rm -rf /var/lib/apt/lists/*
RUN  wget https://dl.google.com/go/go1.19.linux-amd64.tar.gz \
        && tar -C /usr/local -xzvf go1.19.linux-amd64.tar.gz \
        && rm go1.19.linux-amd64.tar.gz \
        && mkdir -p /src/github.com/sylabs \
        && cd /src/github.com/sylabs \
        && wget https://github.com/sylabs/singularity/releases/download/v3.10.2/singularity-ce-3.10.2.tar.gz \
        && tar -xzvf singularity-ce-3.10.2.tar.gz \
        && cd singularity-ce-3.10.2 \
        && ./mconfig --without-suid --prefix=/usr/local/singularity \
        && make -C builddir \
        && make -C builddir install \
        && cd .. \
        && rm -rf singularity-ce-3.10.2 \
        && rm -rf /usr/local/go \
        && ln -s /usr/local/singularity/bin/singularity /bin/
ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.9" \
           "nipype=1.8.5" \
           "traits" \
           "scipy" \
           "scikit-learn" \
           "scikit-image" \
           "jupyter" \
           "nb_conda_kernels" \
           "h5py" \
           "seaborn" \
           "numpy" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "osfclient" \
             "pybids"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  apt-transport-https \
                  build-essential \
                  ca-certificates \
                  coreutils \
                  cryptsetup \
                  curl \
                  dbus-x11 \
                  gcc \
                  git \
                  gnome-keyring \
                  gnupg \
                  graphviz \
                  imagemagick \
                  less \
                  libasound2 \
                  libgbm1 \
                  libgpgme-dev \
                  libgtk-3-0 \
                  libnotify4 \
                  libnss3 \
                  libseccomp-dev \
                  libsecret-1-0 \
                  libxkbfile1 \
                  libxshmfence1 \
                  libxss1 \
                  libzstd1 \
                  lmod \
                  lua-bit32 \
                  lua-filesystem \
                  lua-json \
                  lua-lpeg \
                  lua-posix \
                  lua-term \
                  lua5.2 \
                  nano \
                  openjdk-8-jre \
                  pkg-config \
                  python-pyqt5.qwt-doc \
                  squashfs-tools \
                  tree \
                  unzip \
                  uuid-dev \
                  wget \
                  xdg-utils \
                  zip \
                  zlib1g-dev \
           && rm -rf /var/lib/apt/lists/*
ENV MATLAB_VERSION="R2019b"
ENV MCR_INHIBIT_CTF_LOCK="1"
ENV MCR_UPDATE="9"
ENV MCR_VERSION="v97"
ENV SPM_HTML_BROWSER="0"
ENV SPM_REVISION="r7771"
ENV SPM_VERSION="12"
RUN  wget -O vscode.deb 'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64' \
        && apt install ./vscode.deb \
        && rm -rf ./vscode.deb
WORKDIR /opt
RUN  code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.python \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.vscode-pylance \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-keymap \
        && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-renderers
ENV DONT_PROMPT_WSL_INSTALL="1"
COPY ["code", \
      "/usr/local/sbin/"]
RUN  chmod a+x /usr/local/sbin/code
RUN  wget --no-check-certificate --progress=bar:force -P /opt https://www.fil.ion.ucl.ac.uk/spm/download/restricted/bids/spm12_r7771_Linux_R2019b.zip \
        && unzip -q /opt/spm12_r7771_Linux_R2019b.zip -d /opt \
        && rm -f /opt/spm12_r7771_Linux_R2019b.zip
ENV LD_LIBRARY_PATH="/opt/mcr/v97/runtime/glnxa64:/opt/mcr/v97/bin/glnxa64:/opt/mcr/v97/sys/os/glnxa64:/opt/mcr/v97/sys/opengl/lib/glnxa64:/opt/mcr/v97/extern/bin/glnxa64"
RUN  /opt/spm12/spm12 function exit \
        && chmod +x /opt/spm12/*
ENV XAPPLRESDIR="/opt/mcr/v97/x11/app-defaults"
COPY ["module.sh", \
      "/usr/share/"]
RUN test "$(getent passwd neuro)" \
    || useradd --no-user-group --create-home --shell /bin/bash neuro
USER neuro
ENV DEPLOY_BINS="python"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "GOPATH": "$HOME/go" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/usr/local/go/bin:/bin:/opt/spm12" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/mcr/v97/runtime/glnxa64:/opt/mcr/v97/bin/glnxa64:/opt/mcr/v97/sys/os/glnxa64:/opt/mcr/v97/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/mcr/2019b/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/mcr/v97/x11/app-defaults", \
        "MCRROOT": "/opt/mcr/2019b" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2019b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2019b_Update_9_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/mcr -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "curl", \
          "libglib2.0-dev", \
          "ca-certificates", \
          "build-essential", \
          "libseccomp-dev", \
          "pkg-config", \
          "squashfs-tools", \
          "cryptsetup" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           cryptsetup \\\\\\n           curl \\\\\\n           libglib2.0-dev \\\\\\n           libseccomp-dev \\\\\\n           pkg-config \\\\\\n           squashfs-tools \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://dl.google.com/go/go1.19.linux-amd64.tar.gz \\\\\\n && tar -C /usr/local -xzvf go1.19.linux-amd64.tar.gz \\\\\\n && rm go1.19.linux-amd64.tar.gz \\\\\\n && mkdir -p /src/github.com/sylabs \\\\\\n && cd /src/github.com/sylabs \\\\\\n && wget https://github.com/sylabs/singularity/releases/download/v3.10.2/singularity-ce-3.10.2.tar.gz \\\\\\n && tar -xzvf singularity-ce-3.10.2.tar.gz \\\\\\n && cd singularity-ce-3.10.2 \\\\\\n && ./mconfig --without-suid --prefix=/usr/local/singularity \\\\\\n && make -C builddir \\\\\\n && make -C builddir install \\\\\\n && cd .. \\\\\\n && rm -rf singularity-ce-3.10.2 \\\\\\n && rm -rf /usr/local/go \\\\\\n && ln -s /usr/local/singularity/bin/singularity /bin/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.9\\" \\\\\\n    \\"nipype=1.8.5\\" \\\\\\n    \\"traits\\" \\\\\\n    \\"scipy\\" \\\\\\n    \\"scikit-learn\\" \\\\\\n    \\"scikit-image\\" \\\\\\n    \\"jupyter\\" \\\\\\n    \\"nb_conda_kernels\\" \\\\\\n    \\"h5py\\" \\\\\\n    \\"seaborn\\" \\\\\\n    \\"numpy\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"osfclient\\" \\\\\\n      \\"pybids\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "xdg-utils", \
          "python-pyqt5.qwt-doc", \
          "unzip", \
          "git", \
          "apt-transport-https", \
          "ca-certificates", \
          "coreutils", \
          "curl", \
          "gnome-keyring", \
          "gnupg", \
          "libnotify4", \
          "wget", \
          "libnss3", \
          "libxkbfile1", \
          "libsecret-1-0", \
          "libgtk-3-0", \
          "libxss1", \
          "libgbm1", \
          "libxshmfence1", \
          "libasound2", \
          "cryptsetup", \
          "squashfs-tools", \
          "lua-bit32", \
          "lua-filesystem", \
          "lua-json", \
          "lua-lpeg", \
          "lua-posix", \
          "lua-term", \
          "lua5.2", \
          "lmod", \
          "imagemagick", \
          "less", \
          "nano", \
          "tree", \
          "gcc", \
          "graphviz", \
          "libzstd1", \
          "zlib1g-dev", \
          "zip", \
          "build-essential", \
          "uuid-dev", \
          "libgpgme-dev", \
          "libseccomp-dev", \
          "pkg-config", \
          "openjdk-8-jre", \
          "dbus-x11" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           apt-transport-https \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           coreutils \\\\\\n           cryptsetup \\\\\\n           curl \\\\\\n           dbus-x11 \\\\\\n           gcc \\\\\\n           git \\\\\\n           gnome-keyring \\\\\\n           gnupg \\\\\\n           graphviz \\\\\\n           imagemagick \\\\\\n           less \\\\\\n           libasound2 \\\\\\n           libgbm1 \\\\\\n           libgpgme-dev \\\\\\n           libgtk-3-0 \\\\\\n           libnotify4 \\\\\\n           libnss3 \\\\\\n           libseccomp-dev \\\\\\n           libsecret-1-0 \\\\\\n           libxkbfile1 \\\\\\n           libxshmfence1 \\\\\\n           libxss1 \\\\\\n           libzstd1 \\\\\\n           lmod \\\\\\n           lua-bit32 \\\\\\n           lua-filesystem \\\\\\n           lua-json \\\\\\n           lua-lpeg \\\\\\n           lua-posix \\\\\\n           lua-term \\\\\\n           lua5.2 \\\\\\n           nano \\\\\\n           openjdk-8-jre \\\\\\n           pkg-config \\\\\\n           python-pyqt5.qwt-doc \\\\\\n           squashfs-tools \\\\\\n           tree \\\\\\n           unzip \\\\\\n           uuid-dev \\\\\\n           wget \\\\\\n           xdg-utils \\\\\\n           zip \\\\\\n           zlib1g-dev \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MATLAB_VERSION": "R2019b" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_INHIBIT_CTF_LOCK": "1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_UPDATE": "9" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_VERSION": "v97" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_HTML_BROWSER": "0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_REVISION": "r7771" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_VERSION": "12" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget -O vscode.deb '"'"'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64'"'"' \\\\\\n && apt install ./vscode.deb \\\\\\n && rm -rf ./vscode.deb" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.python \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-python.vscode-pylance \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-keymap \\\\\\n && code --extensions-dir=/opt/vscode-extensions --user-data-dir=/opt/vscode-data --install-extension ms-toolsai.jupyter-renderers" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DONT_PROMPT_WSL_INSTALL": "1" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "code", \
          "/usr/local/sbin/" \
        ], \
        "destination": "/usr/local/sbin/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod a+x /usr/local/sbin/code" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --no-check-certificate --progress=bar:force -P /opt https://www.fil.ion.ucl.ac.uk/spm/download/restricted/bids/spm12_r7771_Linux_R2019b.zip \\\\\\n && unzip -q /opt/spm12_r7771_Linux_R2019b.zip -d /opt \\\\\\n && rm -f /opt/spm12_r7771_Linux_R2019b.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "/opt/mcr/v97/runtime/glnxa64:/opt/mcr/v97/bin/glnxa64:/opt/mcr/v97/sys/os/glnxa64:/opt/mcr/v97/sys/opengl/lib/glnxa64:/opt/mcr/v97/extern/bin/glnxa64" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " /opt/spm12/spm12 function exit \\\\\\n && chmod +x /opt/spm12/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "XAPPLRESDIR": "/opt/mcr/v97/x11/app-defaults" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "module.sh", \
          "/usr/share/" \
        ], \
        "destination": "/usr/share/" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "neuro" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER neuro
# End saving to specification to JSON.

========================================
Recipe: noddi
File: build/noddi/noddi_1.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/usr/local/MATLAB/v99/runtime/glnxa64:/usr/local/MATLAB/v99/bin/glnxa64:/usr/local/MATLAB/v99/sys/os/glnxa64:/usr/local/MATLAB/v99/extern/bin/glnxa64" \
    MATLABCMD="/usr/local/MATLAB/2020b/toolbox/matlab" \
    XAPPLRESDIR="/opt//usr/local/MATLAB/v99/x11/app-defaults" \
    MCRROOT="/usr/local/MATLAB/2020b"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2020b/Release/8/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020b_Update_8_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /usr/local/MATLAB -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
RUN  mkdir /In_fold \
        && mkdir /Out_fold
RUN --mount=type=bind,source=cache/hf6070fee,target=/.neurocontainer-cache/hf6070fee,readonly mkdir -p /opt/ss_noddi \
        && unzip -q /.neurocontainer-cache/hf6070fee/ss_noddi.zip -d /opt/ss_noddi_tmp \
        && cp -r /opt/ss_noddi_tmp/NODDI_singularity-main/ss_noddi_App/* /opt/ss_noddi/ \
        && rm -rf /opt/ss_noddi_tmp
RUN --mount=type=bind,source=cache/h29e5b20d,target=/.neurocontainer-cache/h29e5b20d,readonly cp /.neurocontainer-cache/h29e5b20d/noddi /usr/local/bin/noddi \
        && chmod +x /usr/local/bin/noddi
ENV PATH="$PATH:/usr/local/bin"
ENV DEPLOY_BINS="noddi"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/usr/local/MATLAB/v99/runtime/glnxa64:/usr/local/MATLAB/v99/bin/glnxa64:/usr/local/MATLAB/v99/sys/os/glnxa64:/usr/local/MATLAB/v99/extern/bin/glnxa64", \
        "MATLABCMD": "/usr/local/MATLAB/2020b/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//usr/local/MATLAB/v99/x11/app-defaults", \
        "MCRROOT": "/usr/local/MATLAB/2020b" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2020b/Release/8/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020b_Update_8_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /usr/local/MATLAB -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mkdir /In_fold \\\\\\n && mkdir /Out_fold" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/hf6070fee,target=/.neurocontainer-cache/hf6070fee,readonly mkdir -p /opt/ss_noddi \\\\\\n && unzip -q /.neurocontainer-cache/hf6070fee/ss_noddi.zip -d /opt/ss_noddi_tmp \\\\\\n && cp -r /opt/ss_noddi_tmp/NODDI_singularity-main/ss_noddi_App/* /opt/ss_noddi/ \\\\\\n && rm -rf /opt/ss_noddi_tmp" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h29e5b20d,target=/.neurocontainer-cache/h29e5b20d,readonly cp /.neurocontainer-cache/h29e5b20d/noddi /usr/local/bin/noddi \\\\\\n && chmod +x /usr/local/bin/noddi" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/usr/local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "noddi" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: openreconexample
File: build/openreconexample/openreconexample_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  bzip2 \
                  ca-certificates \
                  git \
                  python-is-python3 \
                  python3-pip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/code
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  cmake \
                  dos2unix \
                  g++ \
                  git \
                  libboost-all-dev \
                  libboost-program-options1.74.0 \
                  libfftw3-dev \
                  libhdf5-dev \
                  libpugixml-dev \
                  libpugixml1v5 \
                  libxml2-dev \
                  libxslt1-dev \
                  libxslt1.1 \
                  vim \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/ismrmrd/ismrmrd.git \
        && cd ./ismrmrd \
        && cmake . \
        && make -j 16 \
        && make install
RUN  git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \
        && cd siemens_to_ismrmrd \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make -j 16 \
        && make install
RUN  pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image
RUN  git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \
        && cd ismrmrd-python-tools \
        && pip3 install --no-cache-dir .
RUN  git clone https://github.com/kspaceKelvin/python-ismrmrd-server \
        && find /opt/code/python-ismrmrd-server -name "*.sh" -exec chmod +x {} \; \
        && find /opt/code/python-ismrmrd-server -name "*.sh" | xargs dos2unix \
        && sed -i 's/invertcontrast/default_replace_with_valid_name/g' /opt/code/python-ismrmrd-server/main.py
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  gcc-aarch64-linux-gnu cmake make build-essential \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/Bostrix/FSL-BET2 \
        && cd FSL-BET2 \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make
ENV PATH="${PATH}:/opt/code/FSL-BET2/bin"
COPY ["openreconexample.py", \
      "/opt/code/python-ismrmrd-server/openreconexample.py"]
ENV DEPLOY_PATH="/opt/code/FSL-BET2/bin"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "bzip2", \
          "ca-certificates", \
          "git", \
          "wget", \
          "build-essential", \
          "python3-pip", \
          "python-is-python3" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           bzip2 \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           python-is-python3 \\\\\\n           python3-pip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "libxslt1.1", \
          "libboost-program-options1.74.0", \
          "libpugixml1v5", \
          "vim", \
          "dos2unix", \
          "git", \
          "cmake", \
          "g++", \
          "libhdf5-dev", \
          "libxml2-dev", \
          "libxslt1-dev", \
          "libboost-all-dev", \
          "libfftw3-dev", \
          "libpugixml-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           dos2unix \\\\\\n           g++ \\\\\\n           git \\\\\\n           libboost-all-dev \\\\\\n           libboost-program-options1.74.0 \\\\\\n           libfftw3-dev \\\\\\n           libhdf5-dev \\\\\\n           libpugixml-dev \\\\\\n           libpugixml1v5 \\\\\\n           libxml2-dev \\\\\\n           libxslt1-dev \\\\\\n           libxslt1.1 \\\\\\n           vim \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd.git \\\\\\n && cd ./ismrmrd \\\\\\n && cmake . \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \\\\\\n && cd siemens_to_ismrmrd \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \\\\\\n && cd ismrmrd-python-tools \\\\\\n && pip3 install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/kspaceKelvin/python-ismrmrd-server \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" -exec chmod +x {} \\\\; \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" | xargs dos2unix \\\\\\n && sed -i '"'"'s/invertcontrast/default_replace_with_valid_name/g'"'"' /opt/code/python-ismrmrd-server/main.py" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "gcc-aarch64-linux-gnu cmake make build-essential" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           gcc-aarch64-linux-gnu cmake make build-essential \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/Bostrix/FSL-BET2 \\\\\\n && cd FSL-BET2 \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "${PATH}:/opt/code/FSL-BET2/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "openreconexample.py", \
          "/opt/code/python-ismrmrd-server/openreconexample.py" \
        ], \
        "destination": "/opt/code/python-ismrmrd-server/openreconexample.py" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/code/FSL-BET2/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: oshyx
File: build/oshyx/oshyx_0.4.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM jerync/oshyx_0.4:20220614
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEPLOY_PATH="/opt/ants-2.3.1/:/opt/miniconda-latest/bin/python:/opt/miniconda-latest/bin/julia"
ENV DEPLOY_BINS="julia"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "jerync/oshyx_0.4:20220614" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/ants-2.3.1/:/opt/miniconda-latest/bin/python:/opt/miniconda-latest/bin/julia" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "julia" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: osprey
File: build/osprey/osprey_2.9.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
WORKDIR /opt
RUN --mount=type=bind,source=cache/ha9731d22,target=/.neurocontainer-cache/ha9731d22,readonly unzip /.neurocontainer-cache/ha9731d22/UbuntuGUI.zip
RUN --mount=type=bind,source=cache/h04a3c20e,target=/.neurocontainer-cache/h04a3c20e,readonly unzip /.neurocontainer-cache/h04a3c20e/basissets.zip
RUN --mount=type=bind,source=cache/h121fb867,target=/.neurocontainer-cache/h121fb867,readonly unzip /.neurocontainer-cache/h121fb867/exampledata.zip
ENV LD_LIBRARY_PATH=""
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR/v914/runtime/glnxa64:/opt/MCR/v914/bin/glnxa64:/opt/MCR/v914/sys/os/glnxa64:/opt/MCR/v914/extern/bin/glnxa64" \
    MATLABCMD="/opt/MCR/2023a/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/MCR/v914/x11/app-defaults" \
    MCRROOT="/opt/MCR/2023a"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2023a/Release/5/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2023a_Update_5_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/MCR -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
ENV DEPLOY_BINS="Osprey"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/ha9731d22,target=/.neurocontainer-cache/ha9731d22,readonly unzip /.neurocontainer-cache/ha9731d22/UbuntuGUI.zip" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h04a3c20e,target=/.neurocontainer-cache/h04a3c20e,readonly unzip /.neurocontainer-cache/h04a3c20e/basissets.zip" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h121fb867,target=/.neurocontainer-cache/h121fb867,readonly unzip /.neurocontainer-cache/h121fb867/exampledata.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR/v914/runtime/glnxa64:/opt/MCR/v914/bin/glnxa64:/opt/MCR/v914/sys/os/glnxa64:/opt/MCR/v914/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/MCR/2023a/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/MCR/v914/x11/app-defaults", \
        "MCRROOT": "/opt/MCR/2023a" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2023a/Release/5/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2023a_Update_5_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/MCR -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "Osprey" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: ospreybids
File: build/ospreybids/ospreybids_4.2.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM dcanumn/osprey-bids:v4.2.1
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEPLOY_BINS="osprey"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "dcanumn/osprey-bids:v4.2.1" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "osprey" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: palm
File: build/palm/palm_alpha119.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  curl \
                  octave \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/palm-alpha119/
RUN  curl -fsSL --retry 5 https://s3-us-west-2.amazonaws.com/andersonwinkler/palm/palm-alpha119.tar.gz | tar -xz -C /opt/palm-alpha119/ --strip-components 1
ENV PATH="$PATH:/opt/palm-alpha119"
ENV DEPLOY_BINS="octave"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "octave", \
          "curl", \
          "ca-certificates" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           octave \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/palm-alpha119/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://s3-us-west-2.amazonaws.com/andersonwinkler/palm/palm-alpha119.tar.gz | tar -xz -C /opt/palm-alpha119/ --strip-components 1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/palm-alpha119" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "octave" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: palmettobug
File: build/palmettobug/palmettobug_0.0.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates wget unzip libx11-6 fontconfig libgles2 \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt
ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "-c" \
           "conda-forge" \
           "python=3.9" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  wget https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/HARMONI-main-250424.zip \
        && unzip HARMONI-main-250424.zip \
        && rm -rf HARMONI-main-250424.zip \
        && cd HARMONI-main \
        && pip install . \
        && cd .. \
        && rm -rf HARMONI-main
ENV DEPLOY_BINS="palmettobug"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "ca-certificates wget unzip libx11-6 fontconfig libgles2" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates wget unzip libx11-6 fontconfig libgles2 \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"-c\\" \\\\\\n    \\"conda-forge\\" \\\\\\n    \\"python=3.9\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/HARMONI-main-250424.zip \\\\\\n && unzip HARMONI-main-250424.zip \\\\\\n && rm -rf HARMONI-main-250424.zip \\\\\\n && cd HARMONI-main \\\\\\n && pip install . \\\\\\n && cd .. \\\\\\n && rm -rf HARMONI-main" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "palmettobug" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: pcntoolkit
File: build/pcntoolkit/pcntoolkit_0.35.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "pcntoolkit"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV DEPLOY_BINS="python"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"pcntoolkit\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: physio
File: build/physio/physio_r2021a.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:16.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  dbus-x11 \
                  openjdk-8-jre \
                  unzip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
ENV MATLAB_VERSION="R2020b"
ENV MCR_VERSION="v99"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/mcr/v99/runtime/glnxa64:/opt/mcr/v99/bin/glnxa64:/opt/mcr/v99/sys/os/glnxa64:/opt/mcr/v99/extern/bin/glnxa64" \
    MATLABCMD="/opt/mcr/2020b/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/mcr/v99/x11/app-defaults" \
    MCRROOT="/opt/mcr/2020b"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2020b/Release/8/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020b_Update_8_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/mcr -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
ENV MCR_INHIBIT_CTF_LOCK="1"
ENV SPM_HTML_BROWSER="0"
ENV SPM_REVISION="r2021a"
ENV SPM_VERSION="12"
WORKDIR /opt/spm12/
RUN  curl -fsSL --retry 5 https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/spm12r8224_physioR2021a_standalone_MCRv99_MatlabR2020b_Linux.tar.gz       | tar -xz -C /opt/spm12/ --strip-components 1
ENV LD_LIBRARY_PATH="/opt/mcr/v99/runtime/glnxa64:/opt/mcr/v99/bin/glnxa64:/opt/mcr/v99/sys/os/glnxa64:/opt/mcr/v99/sys/opengl/lib/glnxa64:/opt/mcr/v99/extern/bin/glnxa64"
RUN  /opt/spm12/spm12 function exit \
        && chmod +rx /opt/spm12/* -R
ENV PATH="/opt/spm12:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
ENV XAPPLRESDIR="/opt/mcr/v99/x11/app-defaults"
ENV DEPLOY_BINS="spm12"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:16.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "unzip", \
          "ca-certificates", \
          "openjdk-8-jre", \
          "dbus-x11" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           dbus-x11 \\\\\\n           openjdk-8-jre \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MATLAB_VERSION": "R2020b" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_VERSION": "v99" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/mcr/v99/runtime/glnxa64:/opt/mcr/v99/bin/glnxa64:/opt/mcr/v99/sys/os/glnxa64:/opt/mcr/v99/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/mcr/2020b/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/mcr/v99/x11/app-defaults", \
        "MCRROOT": "/opt/mcr/2020b" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2020b/Release/8/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020b_Update_8_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/mcr -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_INHIBIT_CTF_LOCK": "1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_HTML_BROWSER": "0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_REVISION": "r2021a" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_VERSION": "12" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/spm12/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/spm12r8224_physioR2021a_standalone_MCRv99_MatlabR2020b_Linux.tar.gz       | tar -xz -C /opt/spm12/ --strip-components 1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "/opt/mcr/v99/runtime/glnxa64:/opt/mcr/v99/bin/glnxa64:/opt/mcr/v99/sys/os/glnxa64:/opt/mcr/v99/sys/opengl/lib/glnxa64:/opt/mcr/v99/extern/bin/glnxa64" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " /opt/spm12/spm12 function exit \\\\\\n && chmod +rx /opt/spm12/* -R" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/spm12:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "XAPPLRESDIR": "/opt/mcr/v99/x11/app-defaults" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "spm12" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: prostatefiducialseg
File: build/prostatefiducialseg/prostatefiducialseg_6.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  bzip2 \
                  ca-certificates \
                  git \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /tmp
RUN  curl -fsSL -o miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py39_4.12.0-Linux-x86_64.sh \
        && bash miniconda.sh -b -p /opt/miniconda-4.12.0 \
        && rm miniconda.sh
ENV PATH="/opt/miniconda-4.12.0/bin:$PATH"
RUN  conda config --system --prepend channels conda-forge \
        && conda config --system --set channel_priority strict \
        && conda clean --all --yes
RUN  conda install mamba \
        && mamba clean --all --yes
RUN  mamba install -y --name base "python=3.10" \
        && mamba clean --all --yes
WORKDIR /opt/code
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  cmake \
                  dos2unix \
                  g++ \
                  git \
                  libboost-all-dev \
                  libboost-program-options1.74.0 \
                  libfftw3-dev \
                  libhdf5-dev \
                  libpugixml-dev \
                  libpugixml1v5 \
                  libxml2-dev \
                  libxslt1-dev \
                  libxslt1.1 \
                  vim \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/ismrmrd/ismrmrd.git \
        && cd ./ismrmrd \
        && cmake . \
        && make -j 16 \
        && make install
RUN  git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \
        && cd siemens_to_ismrmrd \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make -j 16 \
        && make install
RUN  pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image
RUN  git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \
        && cd ismrmrd-python-tools \
        && pip3 install --no-cache-dir .
RUN  git clone https://github.com/kspaceKelvin/python-ismrmrd-server \
        && find /opt/code/python-ismrmrd-server -name "*.sh" -exec chmod +x {} \; \
        && find /opt/code/python-ismrmrd-server -name "*.sh" | xargs dos2unix \
        && sed -i 's/invertcontrast/default_replace_with_valid_name/g' /opt/code/python-ismrmrd-server/main.py
RUN  pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126 \
        && pip install torchio
RUN  pip install SimpleITK nibabel osfclient pandas scikit-learn
WORKDIR /opt
RUN  mkdir -p /opt/models \
        && osf -p f7hjv fetch T1-20250730-021818-0-best.pth /opt/models/model.pth
WORKDIR /opt
RUN  git clone https://github.com/astewartau/prostate-fiducial-seg.git \
        && cd /opt/prostate-fiducial-seg \
        && git checkout 0aacf08 \
        && chmod +x simple_predict.py
ENV PATH="/opt/prostate-fiducial-seg:$PATH"
COPY ["prostatefiducialseg.py", \
      "/opt/code/python-ismrmrd-server/prostatefiducialseg.py"]
ENV DEPLOY_BINS="simple_predict.py"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "bzip2", \
          "ca-certificates", \
          "git", \
          "wget", \
          "build-essential" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           bzip2 \\\\\\n           ca-certificates \\\\\\n           git \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/tmp" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL -o miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py39_4.12.0-Linux-x86_64.sh \\\\\\n && bash miniconda.sh -b -p /opt/miniconda-4.12.0 \\\\\\n && rm miniconda.sh" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/miniconda-4.12.0/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " conda config --system --prepend channels conda-forge \\\\\\n && conda config --system --set channel_priority strict \\\\\\n && conda clean --all --yes" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " conda install mamba \\\\\\n && mamba clean --all --yes" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mamba install -y --name base \\"python=3.10\\" \\\\\\n && mamba clean --all --yes" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "libxslt1.1", \
          "libboost-program-options1.74.0", \
          "libpugixml1v5", \
          "vim", \
          "dos2unix", \
          "git", \
          "cmake", \
          "g++", \
          "libhdf5-dev", \
          "libxml2-dev", \
          "libxslt1-dev", \
          "libboost-all-dev", \
          "libfftw3-dev", \
          "libpugixml-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           dos2unix \\\\\\n           g++ \\\\\\n           git \\\\\\n           libboost-all-dev \\\\\\n           libboost-program-options1.74.0 \\\\\\n           libfftw3-dev \\\\\\n           libhdf5-dev \\\\\\n           libpugixml-dev \\\\\\n           libpugixml1v5 \\\\\\n           libxml2-dev \\\\\\n           libxslt1-dev \\\\\\n           libxslt1.1 \\\\\\n           vim \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd.git \\\\\\n && cd ./ismrmrd \\\\\\n && cmake . \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \\\\\\n && cd siemens_to_ismrmrd \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \\\\\\n && cd ismrmrd-python-tools \\\\\\n && pip3 install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/kspaceKelvin/python-ismrmrd-server \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" -exec chmod +x {} \\\\; \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" | xargs dos2unix \\\\\\n && sed -i '"'"'s/invertcontrast/default_replace_with_valid_name/g'"'"' /opt/code/python-ismrmrd-server/main.py" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu126 \\\\\\n && pip install torchio" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install SimpleITK nibabel osfclient pandas scikit-learn" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mkdir -p /opt/models \\\\\\n && osf -p f7hjv fetch T1-20250730-021818-0-best.pth /opt/models/model.pth" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/astewartau/prostate-fiducial-seg.git \\\\\\n && cd /opt/prostate-fiducial-seg \\\\\\n && git checkout 0aacf08 \\\\\\n && chmod +x simple_predict.py" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/prostate-fiducial-seg:$PATH" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "prostatefiducialseg.py", \
          "/opt/code/python-ismrmrd-server/prostatefiducialseg.py" \
        ], \
        "destination": "/opt/code/python-ismrmrd-server/prostatefiducialseg.py" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "simple_predict.py" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: pydeface
File: build/pydeface/pydeface_2.0.2.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM vnmd/fsl_6.0.3:20200905
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda-latest" \
    PATH="/opt/miniconda-latest/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-latest/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-latest \
    && rm -f "$conda_installer" \
    && conda tos accept \
    && conda update -yq -nbase conda \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.7" \
           "nipype=1.5.1" \
           "nibabel=4.0.1" \
           "numpy=1.21.6" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "osfclient" \
             "pydeface==2.0.2"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV PATH="'$PATH':/opt/pydeface/bin"
ENV DEPLOY_PATH="/opt/pydeface-2.0.2/bin/:/opt/pydeface/bin"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "vnmd/fsl_6.0.3:20200905" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "ca-certificates" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-latest", \
        "PATH": "/opt/miniconda-latest/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-latest/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-latest\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\nconda update -yq -nbase conda\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.7\\" \\\\\\n    \\"nipype=1.5.1\\" \\\\\\n    \\"nibabel=4.0.1\\" \\\\\\n    \\"numpy=1.21.6\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"osfclient\\" \\\\\\n      \\"pydeface==2.0.2\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "'"'"'$PATH'"'"':/opt/pydeface/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/pydeface-2.0.2/bin/:/opt/pydeface/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: qsiprep
File: build/qsiprep/qsiprep_1.0.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM pennlinc/qsiprep:1.0.1
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEPLOY_BINS="qsiprep"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "pennlinc/qsiprep:1.0.1" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "qsiprep" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: qsirecon
File: build/qsirecon/qsirecon_1.1.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM pennlinc/qsirecon:1.1.0
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEPLOY_BINS="qsirecon"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "pennlinc/qsirecon:1.1.0" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "qsirecon" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: qsmxt
File: build/qsmxt/qsmxt_8.1.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  bzip2 \
                  ca-certificates \
                  cmake \
                  dbus-x11 \
                  git \
                  graphviz \
                  libfontconfig1 \
                  libfreetype6 \
                  libgl1 \
                  libglib2.0 \
                  libglu1-mesa \
                  libgtk2.0-0 \
                  libopenjp2-7 \
                  libqt5core5a \
                  libqt5gui5 \
                  libqt5opengl5 \
                  libqt5opengl5-dev \
                  libqt5svg5-dev \
                  libsm6 \
                  libsqlite3-dev \
                  libsuitesparse-dev \
                  libxcomposite1 \
                  libxcursor1 \
                  libxi6 \
                  libxkbcommon0 \
                  libxrandr2 \
                  libxrender1 \
                  libxt6 \
                  libxtst6 \
                  unzip \
                  wget \
                  zip \
           && rm -rf /var/lib/apt/lists/*
ENV PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
WORKDIR /opt/bet2
RUN  git clone https://github.com/aghaeifar/bet2 . \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make \
        && ln -s /opt/bet2/bin/bet2 /bin/bet
WORKDIR /opt
ENV SUBJECTS_DIR="/tmp"
ENV ANTSPATH="/opt/ants-2.4.3/bin" \
    PATH="/opt/ants-2.4.3/bin:/opt/ants-2.4.3/Scripts:$PATH" \
    LD_LIBRARY_PATH="/opt/ants-2.4.3/lib:$LD_LIBRARY_PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           ca-certificates \
           cmake \
           g++ \
           gcc \
           git \
           make \
           zlib1g-dev \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir -p /tmp/ants/build \
    && git clone https://github.com/ANTsX/ANTs.git /tmp/ants/source \
    && cd /tmp/ants/source \
    && git fetch --tags \
    && git -c advice.detachedHead=false checkout v2.4.3 \
    && cd /tmp/ants/build \
    && cmake -DCMAKE_INSTALL_PREFIX=/opt/ants-2.4.3 -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF /tmp/ants/source \
    && make -j1 \
    && mkdir -p /opt/ants-2.4.3 \
    # Recent versions of ants create ANTS-build.
    && if [ -d ANTS-build ]; then \
         cd ANTS-build \
         && make install \
         && mv ../../source/Scripts/ /opt/ants-2.4.3; \
       else \
         mv bin lib /opt/ants-2.4.3/ \
         mv ../Scripts/* /opt/ants-2.4.3 ; \
    fi \
    && rm -rf /tmp/ants \
    && chmod a+rx /opt/ants-2.4.3 -R
WORKDIR /opt/dcm2niix
RUN  git clone --branch v1.0.20240202 --depth 1 https://github.com/rordenlab/dcm2niix.git . \
        && mkdir build && cd build \
        && cmake -DZLIB_IMPLEMENTATION=Cloudflare -DUSE_JPEGLS=ON -DUSE_OPENJPEG=ON .. \
        && make \
        && make install
WORKDIR /opt
ENV CONDA_DIR="/opt/miniconda-4.12.0"
ENV PATH="/opt/miniconda-4.12.0/bin:$PATH"
RUN  export PATH="/opt/miniconda-4.12.0/bin:$PATH" \
        && echo "Downloading Miniconda installer ..." \
        && conda_installer="/tmp/miniconda.sh" \
        && curl -fsSL -o "$conda_installer" https://repo.anaconda.com/miniconda/Miniconda3-py37_4.12.0-Linux-x86_64.sh \
        && bash "$conda_installer" -b -p /opt/miniconda-4.12.0 \
        && rm -f "$conda_installer" \
        && conda config --system --prepend channels conda-forge \
        && conda config --set channel_priority strict \
        && conda config --system --set auto_update_conda false \
        && conda config --system --set show_channel_urls true \
        && conda init bash \
        && conda install -y  --name base "python=3.8" \
        && sync && conda clean --all --yes && sync \
        && rm -rf ~/.cache/pip/*
RUN  rm -rf /usr/bin/python3.8 \
        && ln -s /opt/miniconda-latest/bin/python /usr/bin/python3.8
RUN  pip install setuptools==69.5.1
WORKDIR /opt
RUN  pip install dunamai \
        && pip install git+https://github.com/astewartau/nii2dcm.git@v0.1.6b \
        && pip install nextqsm \
        && nextqsm --download_weights
RUN  git clone --depth 1 --branch v1.1.1-2 https://github.com/astewartau/FastSurfer.git /opt/FastSurfer \
        && sed -i 's/cu113/cpu/g' /opt/FastSurfer/requirements.txt \
        && pip install -r /opt/FastSurfer/requirements.txt
ENV FASTSURFER_HOME="/opt/FastSurfer"
ENV PATH="$PATH:/opt/FastSurfer"
ENV PATH="$PATH:/opt/miniconda-latest/bin"
WORKDIR /opt/bru2
RUN  wget https://github.com/neurolabusc/Bru2Nii/releases/download/v1.0.20180303/Bru2_Linux.zip \
        && unzip Bru2_Linux.zip \
        && rm Bru2_Linux.zip
ENV PATH="$PATH:/opt/bru2"
WORKDIR /opt
RUN  wget https://julialang-s3.julialang.org/bin/linux/x64/1.9/julia-1.9.3-linux-x86_64.tar.gz \
        && tar zxvf julia-1.9.3-linux-x86_64.tar.gz \
        && rm -rf julia-1.9.3-linux-x86_64.tar.gz
ENV PATH="$PATH:/opt/julia-1.9.3/bin"
WORKDIR /opt
ENV JULIA_DEPOT_PATH="/opt/julia_depot"
RUN --mount=type=bind,source=cache/h059a17e3,target=/.neurocontainer-cache/h059a17e3,readonly julia /.neurocontainer-cache/h059a17e3/install.packages.jl
ENV JULIA_DEPOT_PATH="~/.julia:/opt/julia_depot"
RUN  git clone --depth 1 --branch v0.51 https://github.com/astewartau/QSMxT-UI-2 QSMxT-UI
RUN  wget https://nodejs.org/dist/v14.17.0/node-v14.17.0-linux-x64.tar.xz \
        && tar xf node-v14.17.0-linux-x64.tar.xz \
        && rm node-v14.17.0-linux-x64.tar.xz
ENV PATH="$PATH:/opt/node-v14.17.0-linux-x64/bin"
RUN  QSMxT-UI/setup.sh
RUN  pip install qsmxt==8.1.1
ENV LC_ALL="C.UTF-8"
ENV LANG="C.UTF-8"
RUN mkdir -p /boutique
COPY ["qsmxt.json", \
      "/boutique/qsmxt.json"]
ENV DEPLOY_PATH="/opt/ants-2.4.3/bin:/opt/FastSurfer:/opt/QSMxT-UI"
ENV DEPLOY_BINS="python3:python:nii2dcm:nextqsm:nipypecli:bet:dcm2niix:Bru2:Bru2Nii:tgv_qsm:julia:pytest:predict_all.py:qsmxt:qsmxt-gui:dicom-sort:dicom-convert:nifti-convert"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "bzip2", \
          "ca-certificates", \
          "unzip", \
          "cmake", \
          "dbus-x11", \
          "libgtk2.0-0", \
          "git", \
          "graphviz", \
          "wget", \
          "zip", \
          "libgl1", \
          "libglib2.0", \
          "libglu1-mesa", \
          "libsm6", \
          "libxrender1", \
          "libxt6", \
          "libxcomposite1", \
          "libfreetype6", \
          "libfontconfig1", \
          "libxkbcommon0", \
          "libxcursor1", \
          "libxi6", \
          "libxrandr2", \
          "libxtst6", \
          "libqt5svg5-dev", \
          "libqt5opengl5-dev", \
          "libqt5opengl5", \
          "libqt5gui5", \
          "libqt5core5a", \
          "libsuitesparse-dev", \
          "libsqlite3-dev", \
          "libopenjp2-7", \
          "build-essential" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           bzip2 \\\\\\n           ca-certificates \\\\\\n           cmake \\\\\\n           dbus-x11 \\\\\\n           git \\\\\\n           graphviz \\\\\\n           libfontconfig1 \\\\\\n           libfreetype6 \\\\\\n           libgl1 \\\\\\n           libglib2.0 \\\\\\n           libglu1-mesa \\\\\\n           libgtk2.0-0 \\\\\\n           libopenjp2-7 \\\\\\n           libqt5core5a \\\\\\n           libqt5gui5 \\\\\\n           libqt5opengl5 \\\\\\n           libqt5opengl5-dev \\\\\\n           libqt5svg5-dev \\\\\\n           libsm6 \\\\\\n           libsqlite3-dev \\\\\\n           libsuitesparse-dev \\\\\\n           libxcomposite1 \\\\\\n           libxcursor1 \\\\\\n           libxi6 \\\\\\n           libxkbcommon0 \\\\\\n           libxrandr2 \\\\\\n           libxrender1 \\\\\\n           libxt6 \\\\\\n           libxtst6 \\\\\\n           unzip \\\\\\n           wget \\\\\\n           zip \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/bet2" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/aghaeifar/bet2 . \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make \\\\\\n && ln -s /opt/bet2/bin/bet2 /bin/bet" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SUBJECTS_DIR": "/tmp" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "ANTSPATH": "/opt/ants-2.4.3/bin", \
        "PATH": "/opt/ants-2.4.3/bin:/opt/ants-2.4.3/Scripts:$PATH", \
        "LD_LIBRARY_PATH": "/opt/ants-2.4.3/lib:$LD_LIBRARY_PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    ca-certificates \\\\\\n    cmake \\\\\\n    g++ \\\\\\n    gcc \\\\\\n    git \\\\\\n    make \\\\\\n    zlib1g-dev\\nrm -rf /var/lib/apt/lists/*\\nmkdir -p /tmp/ants/build\\ngit clone https://github.com/ANTsX/ANTs.git /tmp/ants/source\\ncd /tmp/ants/source\\ngit fetch --tags\\ngit -c advice.detachedHead=false checkout v2.4.3\\ncd /tmp/ants/build\\ncmake -DCMAKE_INSTALL_PREFIX=/opt/ants-2.4.3 -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=OFF /tmp/ants/source\\nmake -j1\\nmkdir -p /opt/ants-2.4.3\\n# Recent versions of ants create ANTS-build.\\nif [ -d ANTS-build ]; then \\\\\\n  cd ANTS-build \\\\\\n  && make install \\\\\\n  && mv ../../source/Scripts/ /opt/ants-2.4.3; \\\\\\nelse \\\\\\n  mv bin lib /opt/ants-2.4.3/ \\\\\\n  mv ../Scripts/* /opt/ants-2.4.3 ; \\\\\\nfi\\nrm -rf /tmp/ants\\nchmod a+rx /opt/ants-2.4.3 -R" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/dcm2niix" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone --branch v1.0.20240202 --depth 1 https://github.com/rordenlab/dcm2niix.git . \\\\\\n && mkdir build && cd build \\\\\\n && cmake -DZLIB_IMPLEMENTATION=Cloudflare -DUSE_JPEGLS=ON -DUSE_OPENJPEG=ON .. \\\\\\n && make \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-4.12.0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/miniconda-4.12.0/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " export PATH=\\"/opt/miniconda-4.12.0/bin:$PATH\\" \\\\\\n && echo \\"Downloading Miniconda installer ...\\" \\\\\\n && conda_installer=\\"/tmp/miniconda.sh\\" \\\\\\n && curl -fsSL -o \\"$conda_installer\\" https://repo.anaconda.com/miniconda/Miniconda3-py37_4.12.0-Linux-x86_64.sh \\\\\\n && bash \\"$conda_installer\\" -b -p /opt/miniconda-4.12.0 \\\\\\n && rm -f \\"$conda_installer\\" \\\\\\n && conda config --system --prepend channels conda-forge \\\\\\n && conda config --set channel_priority strict \\\\\\n && conda config --system --set auto_update_conda false \\\\\\n && conda config --system --set show_channel_urls true \\\\\\n && conda init bash \\\\\\n && conda install -y  --name base \\"python=3.8\\" \\\\\\n && sync && conda clean --all --yes && sync \\\\\\n && rm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " rm -rf /usr/bin/python3.8 \\\\\\n && ln -s /opt/miniconda-latest/bin/python /usr/bin/python3.8" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install setuptools==69.5.1" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install dunamai \\\\\\n && pip install git+https://github.com/astewartau/nii2dcm.git@v0.1.6b \\\\\\n && pip install nextqsm \\\\\\n && nextqsm --download_weights" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone --depth 1 --branch v1.1.1-2 https://github.com/astewartau/FastSurfer.git /opt/FastSurfer \\\\\\n && sed -i '"'"'s/cu113/cpu/g'"'"' /opt/FastSurfer/requirements.txt \\\\\\n && pip install -r /opt/FastSurfer/requirements.txt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FASTSURFER_HOME": "/opt/FastSurfer" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/FastSurfer" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/miniconda-latest/bin" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/bru2" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://github.com/neurolabusc/Bru2Nii/releases/download/v1.0.20180303/Bru2_Linux.zip \\\\\\n && unzip Bru2_Linux.zip \\\\\\n && rm Bru2_Linux.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/bru2" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://julialang-s3.julialang.org/bin/linux/x64/1.9/julia-1.9.3-linux-x86_64.tar.gz \\\\\\n && tar zxvf julia-1.9.3-linux-x86_64.tar.gz \\\\\\n && rm -rf julia-1.9.3-linux-x86_64.tar.gz" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/julia-1.9.3/bin" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "JULIA_DEPOT_PATH": "/opt/julia_depot" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h059a17e3,target=/.neurocontainer-cache/h059a17e3,readonly julia /.neurocontainer-cache/h059a17e3/install.packages.jl" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "JULIA_DEPOT_PATH": "~/.julia:/opt/julia_depot" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone --depth 1 --branch v0.51 https://github.com/astewartau/QSMxT-UI-2 QSMxT-UI" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://nodejs.org/dist/v14.17.0/node-v14.17.0-linux-x64.tar.xz \\\\\\n && tar xf node-v14.17.0-linux-x64.tar.xz \\\\\\n && rm node-v14.17.0-linux-x64.tar.xz" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/node-v14.17.0-linux-x64/bin" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " QSMxT-UI/setup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install qsmxt==8.1.1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LC_ALL": "C.UTF-8" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "C.UTF-8" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /boutique" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "qsmxt.json", \
          "/boutique/qsmxt.json" \
        ], \
        "destination": "/boutique/qsmxt.json" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/ants-2.4.3/bin:/opt/FastSurfer:/opt/QSMxT-UI" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python3:python:nii2dcm:nextqsm:nipypecli:bet:dcm2niix:Bru2:Bru2Nii:tgv_qsm:julia:pytest:predict_all.py:qsmxt:qsmxt-gui:dicom-sort:dicom-convert:nifti-convert" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: quickshear
File: build/quickshear/quickshear_1.1.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM freesurfer/synthstrip:1.6
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
WORKDIR /opt
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  curl \
                  git \
                  python3 \
                  python3-pip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
RUN  pip install quickshear==1.2.0
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  cmake \
                  dos2unix \
                  g++ \
                  git \
                  libboost-all-dev \
                  libboost-program-options1.74.0 \
                  libfftw3-dev \
                  libhdf5-103 \
                  libhdf5-dev \
                  libpugixml-dev \
                  libpugixml1v5 \
                  libxml2-dev \
                  libxslt1-dev \
                  libxslt1.1 \
                  vim \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/code
RUN  git clone https://github.com/ismrmrd/ismrmrd.git \
        && cd ./ismrmrd \
        && cmake . \
        && make -j $(nproc) \
        && make install
RUN  git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \
        && cd siemens_to_ismrmrd \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make -j $(nproc) \
        && make install
RUN  pip3 install h5py ismrmrd matplotlib pydicom pynetdicom nibabel
RUN  git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \
        && cd ismrmrd-python-tools \
        && pip3 install --no-cache-dir .
RUN  git clone https://github.com/kspaceKelvin/python-ismrmrd-server \
        && find /opt/code/python-ismrmrd-server -name "*.sh" -exec chmod +x {} \; \
        && find /opt/code/python-ismrmrd-server -name "*.sh" | xargs dos2unix
COPY ["invertcontrast.py", \
      "/opt/code/python-ismrmrd-server/invertcontrast.py"]
ENTRYPOINT ["bash"]
ENV DEPLOY_BINS="quickshear"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "freesurfer/synthstrip:1.6" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "git", \
          "curl", \
          "ca-certificates", \
          "python3", \
          "python3-pip" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           git \\\\\\n           python3 \\\\\\n           python3-pip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install quickshear==1.2.0" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "libxslt1.1", \
          "libhdf5-103", \
          "libboost-program-options1.74.0", \
          "libpugixml1v5", \
          "vim", \
          "dos2unix", \
          "git", \
          "cmake", \
          "g++", \
          "libhdf5-dev", \
          "libxml2-dev", \
          "libxslt1-dev", \
          "libboost-all-dev", \
          "libfftw3-dev", \
          "libpugixml-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           dos2unix \\\\\\n           g++ \\\\\\n           git \\\\\\n           libboost-all-dev \\\\\\n           libboost-program-options1.74.0 \\\\\\n           libfftw3-dev \\\\\\n           libhdf5-103 \\\\\\n           libhdf5-dev \\\\\\n           libpugixml-dev \\\\\\n           libpugixml1v5 \\\\\\n           libxml2-dev \\\\\\n           libxslt1-dev \\\\\\n           libxslt1.1 \\\\\\n           vim \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd.git \\\\\\n && cd ./ismrmrd \\\\\\n && cmake . \\\\\\n && make -j $\(nproc\) \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \\\\\\n && cd siemens_to_ismrmrd \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make -j $\(nproc\) \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip3 install h5py ismrmrd matplotlib pydicom pynetdicom nibabel" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \\\\\\n && cd ismrmrd-python-tools \\\\\\n && pip3 install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/kspaceKelvin/python-ismrmrd-server \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" -exec chmod +x {} \\\\; \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" | xargs dos2unix" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "invertcontrast.py", \
          "/opt/code/python-ismrmrd-server/invertcontrast.py" \
        ], \
        "destination": "/opt/code/python-ismrmrd-server/invertcontrast.py" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "bash" \
        ] \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "quickshear" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: qupath
File: build/qupath/qupath_0.6.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  libgl1 \
                  libglib2.0-0 \
                  libglu1-mesa \
                  libgtk-3-0 \
                  libx11-6 \
                  libxcomposite1 \
                  libxcursor1 \
                  libxdamage1 \
                  libxext6 \
                  libxi6 \
                  libxrandr2 \
                  libxrender1 \
                  libxtst6 \
                  libxxf86vm1 \
                  xz-utils \
           && rm -rf /var/lib/apt/lists/*
RUN --mount=type=bind,source=cache/h2565a922,target=/.neurocontainer-cache/h2565a922,readonly tar -xvJf /.neurocontainer-cache/h2565a922/QuPath-v0.6.0-Linux.tar.xz \
        && mv QuPath /usr/local/bin \
        && chmod u+x /usr/local/bin/QuPath/bin/QuPath
ENV PATH="/usr/local/bin/QuPath/bin:$PATH"
ENV DEPLOY_PATH="/usr/local/bin/QuPath/bin"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "xz-utils", \
          "libgtk-3-0", \
          "libglib2.0-0", \
          "libx11-6", \
          "libxext6", \
          "libxrender1", \
          "libxtst6", \
          "libxi6", \
          "libxxf86vm1", \
          "libgl1", \
          "libglu1-mesa", \
          "libxcomposite1", \
          "libxcursor1", \
          "libxdamage1", \
          "libxrandr2" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           libgl1 \\\\\\n           libglib2.0-0 \\\\\\n           libglu1-mesa \\\\\\n           libgtk-3-0 \\\\\\n           libx11-6 \\\\\\n           libxcomposite1 \\\\\\n           libxcursor1 \\\\\\n           libxdamage1 \\\\\\n           libxext6 \\\\\\n           libxi6 \\\\\\n           libxrandr2 \\\\\\n           libxrender1 \\\\\\n           libxtst6 \\\\\\n           libxxf86vm1 \\\\\\n           xz-utils \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h2565a922,target=/.neurocontainer-cache/h2565a922,readonly tar -xvJf /.neurocontainer-cache/h2565a922/QuPath-v0.6.0-Linux.tar.xz \\\\\\n && mv QuPath /usr/local/bin \\\\\\n && chmod u+x /usr/local/bin/QuPath/bin/QuPath" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/usr/local/bin/QuPath/bin:$PATH" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/usr/local/bin/QuPath/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: romeo
File: build/romeo/romeo_3.2.8.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  curl \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/romeo-3.2.8/
RUN  curl -fsSL --retry 5 https://github.com/korbinian90/ROMEO/releases/download/v3.2.8/romeo_linux_3.2.8.tar.gz | tar -xz -C /opt/romeo-3.2.8/ --strip-components 1
ENV PATH="/opt/romeo-3.2.8/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV DEPLOY_PATH="/opt/romeo-3.2.8/bin"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "curl", \
          "ca-certificates" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/romeo-3.2.8/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://github.com/korbinian90/ROMEO/releases/download/v3.2.8/romeo_linux_3.2.8.tar.gz | tar -xz -C /opt/romeo-3.2.8/ --strip-components 1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/romeo-3.2.8/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/romeo-3.2.8/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: root
File: build/root/root_6.22.02.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM rootproject/root:6.22.02-centos7
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && if ls /etc/yum.repos.d/CentOS-* >/dev/null 2>&1; then \
           sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-* \
    &&     sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*; \
    fi \
    && yum install -y -q \
           bzip2 \
           ca-certificates \
           glibc-langpack-en \
           glibc-locale-source \
           unzip \
    && yum clean all \
    && rm -rf /var/cache/yum/* \
    && localedef -i en_US -f UTF-8 en_US.UTF-8 \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEPLOY_BINS="root"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "yum", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "rootproject/root:6.22.02-centos7" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\nif ls /etc/yum.repos.d/CentOS-* >/dev/null 2>&1; then\\n    sed -i '"'"'s/mirrorlist/#mirrorlist/g'"'"' /etc/yum.repos.d/CentOS-*\\n    sed -i '"'"'s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g'"'"' /etc/yum.repos.d/CentOS-*;\\nfi\\nyum install -y -q \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    glibc-langpack-en \\\\\\n    glibc-locale-source \\\\\\n    unzip\\nyum clean all\\nrm -rf /var/cache/yum/*\\nlocaledef -i en_US -f UTF-8 en_US.UTF-8\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "root" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: rstudio
File: build/rstudio/rstudio_2023.12.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
WORKDIR /opt
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  locales \
                  software-properties-common \
           && rm -rf /var/lib/apt/lists/*
ENV DEBIAN_FRONTEND="noninteractive"
ENV LANGUAGE="en_AU.UTF-8"
ENV LC_ALL="en_AU.UTF-8"
RUN  locale-gen en_AU.UTF-8
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  apt-transport-https \
                  build-essential \
                  ca-certificates \
                  cmake \
                  curl \
                  dirmngr \
                  gdebi-core \
                  gfortran \
                  git \
                  gnupg \
                  gpg-agent \
                  libblas-dev \
                  libblas64-dev \
                  libcairo2-dev \
                  libclang-dev \
                  libcurl4-openssl-dev \
                  libfftw3-dev \
                  libfribidi-dev \
                  libgdal-dev \
                  libgeos-dev \
                  libgfortran-9-dev \
                  libharfbuzz-dev \
                  liblapack-dev \
                  libnetcdf-dev \
                  libnode-dev \
                  libpq5 \
                  libproj-dev \
                  libssl-dev \
                  libudunits2-dev \
                  libudunits2-dev \
                  libxml2-dev \
                  mesa-utils \
                  pyqt5-dev \
                  python3-fire \
                  python3-pandas \
                  python3-pip \
                  python3-pyqt5 \
                  python3-tk \
                  r-base \
                  r-cran-ncdf4 \
                  software-properties-common \
                  software-properties-common \
                  sudo \
                  ubuntu-desktop \
                  vim \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt
RUN  wget https://download1.rstudio.org/electron/jammy/amd64/rstudio-2023.12.1-402-amd64.deb
RUN  gdebi -q -n /opt/rstudio-2023.12.1-402-amd64.deb
RUN  rm -rf rstudio-2023.12.1-402-amd64.deb
COPY ["dependencies.R", \
      "/opt"]
RUN  Rscript /opt/dependencies.R
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib64/:/usr/local/cuda/lib:"
ENV PATH="/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin:/usr/local/cuda/bin"
ENV DEPLOY_BINS="rstudio"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "locales", \
          "software-properties-common" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           locales \\\\\\n           software-properties-common \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANGUAGE": "en_AU.UTF-8" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LC_ALL": "en_AU.UTF-8" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " locale-gen en_AU.UTF-8" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "ubuntu-desktop", \
          "vim", \
          "software-properties-common", \
          "git", \
          "cmake", \
          "mesa-utils", \
          "sudo", \
          "build-essential", \
          "python3-pip", \
          "python3-pyqt5", \
          "pyqt5-dev", \
          "python3-tk", \
          "python3-pandas", \
          "python3-fire", \
          "dirmngr", \
          "gnupg", \
          "apt-transport-https", \
          "ca-certificates", \
          "software-properties-common", \
          "r-base", \
          "gdebi-core", \
          "libssl-dev", \
          "curl", \
          "libxml2-dev", \
          "libcurl4-openssl-dev", \
          "libharfbuzz-dev", \
          "libfribidi-dev", \
          "libclang-dev", \
          "libpq5", \
          "libfftw3-dev", \
          "gpg-agent", \
          "libgfortran-9-dev", \
          "libblas-dev", \
          "libblas64-dev", \
          "liblapack-dev", \
          "gfortran", \
          "libudunits2-dev", \
          "r-cran-ncdf4", \
          "libgdal-dev", \
          "libproj-dev", \
          "libgeos-dev", \
          "libudunits2-dev", \
          "libnode-dev", \
          "libcairo2-dev", \
          "libnetcdf-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           apt-transport-https \\\\\\n           build-essential \\\\\\n           ca-certificates \\\\\\n           cmake \\\\\\n           curl \\\\\\n           dirmngr \\\\\\n           gdebi-core \\\\\\n           gfortran \\\\\\n           git \\\\\\n           gnupg \\\\\\n           gpg-agent \\\\\\n           libblas-dev \\\\\\n           libblas64-dev \\\\\\n           libcairo2-dev \\\\\\n           libclang-dev \\\\\\n           libcurl4-openssl-dev \\\\\\n           libfftw3-dev \\\\\\n           libfribidi-dev \\\\\\n           libgdal-dev \\\\\\n           libgeos-dev \\\\\\n           libgfortran-9-dev \\\\\\n           libharfbuzz-dev \\\\\\n           liblapack-dev \\\\\\n           libnetcdf-dev \\\\\\n           libnode-dev \\\\\\n           libpq5 \\\\\\n           libproj-dev \\\\\\n           libssl-dev \\\\\\n           libudunits2-dev \\\\\\n           libudunits2-dev \\\\\\n           libxml2-dev \\\\\\n           mesa-utils \\\\\\n           pyqt5-dev \\\\\\n           python3-fire \\\\\\n           python3-pandas \\\\\\n           python3-pip \\\\\\n           python3-pyqt5 \\\\\\n           python3-tk \\\\\\n           r-base \\\\\\n           r-cran-ncdf4 \\\\\\n           software-properties-common \\\\\\n           software-properties-common \\\\\\n           sudo \\\\\\n           ubuntu-desktop \\\\\\n           vim \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget https://download1.rstudio.org/electron/jammy/amd64/rstudio-2023.12.1-402-amd64.deb" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " gdebi -q -n /opt/rstudio-2023.12.1-402-amd64.deb" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " rm -rf rstudio-2023.12.1-402-amd64.deb" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "dependencies.R", \
          "/opt" \
        ], \
        "destination": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " Rscript /opt/dependencies.R" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib64/:/usr/local/cuda/lib:" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin:/usr/local/cuda/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "rstudio" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: samsrfx
File: build/samsrfx/samsrfx_v10.004.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR-2023b/v915/runtime/glnxa64:/opt/MCR-2023b/v915/bin/glnxa64:/opt/MCR-2023b/v915/sys/os/glnxa64:/opt/MCR-2023b/v915/extern/bin/glnxa64" \
    MATLABCMD="/opt/MCR-2023b/2023b/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/MCR-2023b/v915/x11/app-defaults" \
    MCRROOT="/opt/MCR-2023b/2023b"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2023b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2023b_Update_9_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/MCR-2023b -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  dbus-x11 \
                  libgbm-dev \
                  openjdk-8-jre \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt/samsrfx-v10.004/
RUN  wget --no-check-certificate --progress=bar:force -P /opt/samsrfx-v10.004/ https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/samsrf_v10.004.zip \
        && unzip -q samsrf_v10.004.zip -d /opt/samsrfx-v10.004/ \
        && chmod a+x /opt/samsrfx-v10.004/samsrf/SamSrfX \
        && rm -f samsrf_v10.004.zip
RUN  echo 'cd /opt/samsrfx-v10.004/samsrf' > samsrfx \
        && echo './run_SamSrfX.sh /opt/MCR-2023b/R2023b/' >> samsrfx \
        && chmod a+x samsrfx
ENV PATH="$PATH:/opt/samsrfx-v10.004/"
ENV DEPLOY_BINS="samsrfx"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR-2023b/v915/runtime/glnxa64:/opt/MCR-2023b/v915/bin/glnxa64:/opt/MCR-2023b/v915/sys/os/glnxa64:/opt/MCR-2023b/v915/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/MCR-2023b/2023b/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/MCR-2023b/v915/x11/app-defaults", \
        "MCRROOT": "/opt/MCR-2023b/2023b" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2023b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2023b_Update_9_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/MCR-2023b -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "openjdk-8-jre", \
          "dbus-x11", \
          "libgbm-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           dbus-x11 \\\\\\n           libgbm-dev \\\\\\n           openjdk-8-jre \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/samsrfx-v10.004/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --no-check-certificate --progress=bar:force -P /opt/samsrfx-v10.004/ https://object-store.rc.nectar.org.au/v1/AUTH_dead991e1fa847e3afcca2d3a7041f5d/build/samsrf_v10.004.zip \\\\\\n && unzip -q samsrf_v10.004.zip -d /opt/samsrfx-v10.004/ \\\\\\n && chmod a+x /opt/samsrfx-v10.004/samsrf/SamSrfX \\\\\\n && rm -f samsrf_v10.004.zip" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " echo '"'"'cd /opt/samsrfx-v10.004/samsrf'"'"' > samsrfx \\\\\\n && echo '"'"'./run_SamSrfX.sh /opt/MCR-2023b/R2023b/'"'"' >> samsrfx \\\\\\n && chmod a+x samsrfx" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/samsrfx-v10.004/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "samsrfx" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: segmentator
File: build/segmentator/segmentator_1.6.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "matplotlib=3.1.1" \
           "numpy=1.22.0" \
           "nibabel=2.5.1" \
           "scipy=1.3.1" \
           "python=3.6" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "compoda=0.3.5"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  curl -fsSL -o /tmp/segmentator.tar.gz https://github.com/ofgulban/segmentator/archive/refs/tags/v1.6.1.tar.gz \
        && mkdir -p /opt \
        && tar -xzf /tmp/segmentator.tar.gz -C /opt \
        && mv /opt/segmentator-1.6.1 /opt/segmentator \
        && pip install -e /opt/segmentator \
        && rm /tmp/segmentator.tar.gz
RUN --mount=type=bind,source=cache/h4ec1b6dd,target=/.neurocontainer-cache/h4ec1b6dd,readonly cp /.neurocontainer-cache/h4ec1b6dd/myscript /usr/local/bin/myscript \
        && chmod +x /usr/local/bin/myscript
ENV PATH="$PATH:/usr/local/bin"
ENV DEPLOY_BINS="myscript:segmentator"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py310_25.5.1-0-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"matplotlib=3.1.1\\" \\\\\\n    \\"numpy=1.22.0\\" \\\\\\n    \\"nibabel=2.5.1\\" \\\\\\n    \\"scipy=1.3.1\\" \\\\\\n    \\"python=3.6\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"compoda=0.3.5\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL -o /tmp/segmentator.tar.gz https://github.com/ofgulban/segmentator/archive/refs/tags/v1.6.1.tar.gz \\\\\\n && mkdir -p /opt \\\\\\n && tar -xzf /tmp/segmentator.tar.gz -C /opt \\\\\\n && mv /opt/segmentator-1.6.1 /opt/segmentator \\\\\\n && pip install -e /opt/segmentator \\\\\\n && rm /tmp/segmentator.tar.gz" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h4ec1b6dd,target=/.neurocontainer-cache/h4ec1b6dd,readonly cp /.neurocontainer-cache/h4ec1b6dd/myscript /usr/local/bin/myscript \\\\\\n && chmod +x /usr/local/bin/myscript" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/usr/local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "myscript:segmentator" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: sigviewer
File: build/sigviewer/sigviewer_0.6.4.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM neurodebian:bullseye
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  sigviewer \
           && rm -rf /var/lib/apt/lists/*
ENV DEPLOY_BINS="sigviewer"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "neurodebian:bullseye" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "sigviewer" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           sigviewer \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "sigviewer" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: spinalcordtoolbox
File: build/spinalcordtoolbox/spinalcordtoolbox_6.4.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  bzip2 \
                  ca-certificates \
                  curl \
                  gcc \
                  git \
                  libglib2.0-0 \
                  libmpich-dev \
                  python3-pyqt5 \
                  rsync \
           && rm -rf /var/lib/apt/lists/*
RUN  curl -fsSL --retry 5 https://github.com/spinalcordtoolbox/spinalcordtoolbox/archive/refs/tags/6.4.tar.gz | tar -xz -C /opt/
WORKDIR /opt/spinalcordtoolbox-6.4
RUN  chmod a+rwx /opt/spinalcordtoolbox-6.4/ -R
RUN test "$(getent passwd spinalcordtoolbox)" \
    || useradd --no-user-group --create-home --shell /bin/bash spinalcordtoolbox
USER spinalcordtoolbox
RUN  yes | ./install_sct -i
ENV PATH="/opt/spinalcordtoolbox-6.4/bin/:/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV SCT_DIR="/opt/spinalcordtoolbox-6.4/"
RUN  sct_deepseg -install-task seg_exvivo_gm-wm_t2
RUN  sct_deepseg -install-task seg_tumor-edema-cavity_t1-t2
RUN  sct_deepseg -install-task seg_tumor_t2
RUN  sct_deepseg -install-task seg_mice_gm
RUN  sct_deepseg -install-task seg_mice_sc
RUN  sct_deepseg -install-task seg_sc_t2star
RUN  bash /opt/spinalcordtoolbox-6.4/batch_processing.sh
ENV DEPLOY_PATH="/opt/spinalcordtoolbox-6.4/bin/"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "gcc", \
          "ca-certificates", \
          "libmpich-dev", \
          "python3-pyqt5", \
          "git", \
          "curl", \
          "bzip2", \
          "libglib2.0-0", \
          "rsync" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           bzip2 \\\\\\n           ca-certificates \\\\\\n           curl \\\\\\n           gcc \\\\\\n           git \\\\\\n           libglib2.0-0 \\\\\\n           libmpich-dev \\\\\\n           python3-pyqt5 \\\\\\n           rsync \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " curl -fsSL --retry 5 https://github.com/spinalcordtoolbox/spinalcordtoolbox/archive/refs/tags/6.4.tar.gz | tar -xz -C /opt/" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/spinalcordtoolbox-6.4" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " chmod a+rwx /opt/spinalcordtoolbox-6.4/ -R" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "spinalcordtoolbox" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " yes | ./install_sct -i" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/spinalcordtoolbox-6.4/bin/:/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SCT_DIR": "/opt/spinalcordtoolbox-6.4/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " sct_deepseg -install-task seg_exvivo_gm-wm_t2" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " sct_deepseg -install-task seg_tumor-edema-cavity_t1-t2" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " sct_deepseg -install-task seg_tumor_t2" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " sct_deepseg -install-task seg_mice_gm" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " sct_deepseg -install-task seg_mice_sc" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " sct_deepseg -install-task seg_sc_t2star" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " bash /opt/spinalcordtoolbox-6.4/batch_processing.sh" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/spinalcordtoolbox-6.4/bin/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER spinalcordtoolbox
# End saving to specification to JSON.

========================================
Recipe: spm12
File: build/spm12/spm12_r7771.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:16.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  dbus-x11 \
                  openjdk-8-jre \
                  unzip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
ENV MATLAB_VERSION="R2019b"
ENV MCR_UPDATE="9"
ENV MCR_VERSION="v97"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/mcr/v97/runtime/glnxa64:/opt/mcr/v97/bin/glnxa64:/opt/mcr/v97/sys/os/glnxa64:/opt/mcr/v97/extern/bin/glnxa64" \
    MATLABCMD="/opt/mcr/2019b/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/mcr/v97/x11/app-defaults" \
    MCRROOT="/opt/mcr/2019b"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2019b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2019b_Update_9_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/mcr -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
ENV MCR_INHIBIT_CTF_LOCK="1"
ENV SPM_HTML_BROWSER="0"
ENV SPM_REVISION="r7771"
ENV SPM_VERSION="12"
RUN  wget --no-check-certificate --progress=bar:force -P /opt https://www.fil.ion.ucl.ac.uk/spm/download/restricted/bids/spm12_r7771_Linux_R2019b.zip \
        && unzip -q /opt/spm12_r7771_Linux_R2019b.zip -d /opt \
        && rm -f /opt/spm12_r7771_Linux_R2019b.zip
ENV LD_LIBRARY_PATH="/opt/mcr/v97/runtime/glnxa64:/opt/mcr/v97/bin/glnxa64:/opt/mcr/v97/sys/os/glnxa64:/opt/mcr/v97/sys/opengl/lib/glnxa64:/opt/mcr/v97/extern/bin/glnxa64"
RUN  /opt/spm12/spm12 function exit \
        && chmod +x /opt/spm12/*
ENV CONDA_DIR="/opt/miniconda-4.7.12.1" \
    PATH="/opt/miniconda-4.7.12.1/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda-4.7.12.1/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-4.7.12.1-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda-4.7.12.1 \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.6" \
           "traits" \
           "nipype" \
           "numpy" \
           "scipy" \
           "h5py" \
           "scikit-image" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
ENV DEPLOY_ENV_FORCE_SPMMCR="1"
ENV DEPLOY_ENV_SPMMCRCMD="run_spm12.sh /opt/mcr/v97/ script"
ENV PATH="$PATH:/opt/spm12:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
ENV XAPPLRESDIR="/opt/mcr/v97/x11/app-defaults"
ENV DEPLOY_BINS="spm12"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:16.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "unzip", \
          "ca-certificates", \
          "openjdk-8-jre", \
          "dbus-x11" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           dbus-x11 \\\\\\n           openjdk-8-jre \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MATLAB_VERSION": "R2019b" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_UPDATE": "9" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_VERSION": "v97" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/mcr/v97/runtime/glnxa64:/opt/mcr/v97/bin/glnxa64:/opt/mcr/v97/sys/os/glnxa64:/opt/mcr/v97/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/mcr/2019b/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/mcr/v97/x11/app-defaults", \
        "MCRROOT": "/opt/mcr/2019b" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2019b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2019b_Update_9_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/mcr -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_INHIBIT_CTF_LOCK": "1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_HTML_BROWSER": "0" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_REVISION": "r7771" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "SPM_VERSION": "12" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --no-check-certificate --progress=bar:force -P /opt https://www.fil.ion.ucl.ac.uk/spm/download/restricted/bids/spm12_r7771_Linux_R2019b.zip \\\\\\n && unzip -q /opt/spm12_r7771_Linux_R2019b.zip -d /opt \\\\\\n && rm -f /opt/spm12_r7771_Linux_R2019b.zip" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "/opt/mcr/v97/runtime/glnxa64:/opt/mcr/v97/bin/glnxa64:/opt/mcr/v97/sys/os/glnxa64:/opt/mcr/v97/sys/opengl/lib/glnxa64:/opt/mcr/v97/extern/bin/glnxa64" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " /opt/spm12/spm12 function exit \\\\\\n && chmod +x /opt/spm12/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda-4.7.12.1", \
        "PATH": "/opt/miniconda-4.7.12.1/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda-4.7.12.1/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-4.7.12.1-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda-4.7.12.1\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.6\\" \\\\\\n    \\"traits\\" \\\\\\n    \\"nipype\\" \\\\\\n    \\"numpy\\" \\\\\\n    \\"scipy\\" \\\\\\n    \\"h5py\\" \\\\\\n    \\"scikit-image\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_ENV_FORCE_SPMMCR": "1" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_ENV_SPMMCRCMD": "run_spm12.sh /opt/mcr/v97/ script" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/spm12:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "XAPPLRESDIR": "/opt/mcr/v97/x11/app-defaults" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "spm12" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: spmpython
File: build/spmpython/spmpython_25.1.2.post1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:16.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  ca-certificates \
                  dbus-x11 \
                  unzip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-4.7.12.1-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    && conda install -y  --name base \
           "python=3.12" \
           "traits" \
           "nipype" \
           "numpy" \
           "scipy" \
           "h5py" \
           "scikit-image" \
    && bash -c "source activate base \
    &&   python -m pip install --no-cache-dir  \
             "spm-python" \
             "install_matlab_runtime"" \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN  install_matlab_runtime --version R2025a --yes --install-path /opt/mcr
ENV PATH="/opt/mcr/R2025a/bin:$PATH"
ENV XAPPLRESDIR="/opt/mcr/R2025a/x11/app-defaults"
ENV LD_LIBRARY_PATH="/opt/mcr/R2025a/runtime/glnxa64:/opt/mcr/R2025a/bin/glnxa64:/opt/mcr/R2025a/sys/os/glnxa64:/opt/mcr/R2025a/sys/opengl/lib/glnxa64"
ENV MCR_CACHE_ROOT="/tmp/mcr_cache"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:16.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "unzip", \
          "ca-certificates", \
          "dbus-x11" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           ca-certificates \\\\\\n           dbus-x11 \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-4.7.12.1-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\nconda install -y  --name base \\\\\\n    \\"python=3.12\\" \\\\\\n    \\"traits\\" \\\\\\n    \\"nipype\\" \\\\\\n    \\"numpy\\" \\\\\\n    \\"scipy\\" \\\\\\n    \\"h5py\\" \\\\\\n    \\"scikit-image\\"\\nbash -c \\"source activate base\\n  python -m pip install --no-cache-dir  \\\\\\n      \\"spm-python\\" \\\\\\n      \\"install_matlab_runtime\\"\\"\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " install_matlab_runtime --version R2025a --yes --install-path /opt/mcr" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/mcr/R2025a/bin:$PATH" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "XAPPLRESDIR": "/opt/mcr/R2025a/x11/app-defaults" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "/opt/mcr/R2025a/runtime/glnxa64:/opt/mcr/R2025a/bin/glnxa64:/opt/mcr/R2025a/sys/os/glnxa64:/opt/mcr/R2025a/sys/opengl/lib/glnxa64" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "MCR_CACHE_ROOT": "/tmp/mcr_cache" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: surfice
File: build/surfice/surfice_1.0.20210730.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  appmenu-gtk2-module \
                  ca-certificates \
                  libglu1-mesa \
                  libgtk2.0-0 \
                  libqt5pas1 \
                  unzip \
                  wget \
           && rm -rf /var/lib/apt/lists/*
WORKDIR /opt
RUN  wget --quiet -O surfice_linux.zip 'https://github.com/neurolabusc/surf-ice/releases/download/v1.0.20210730/surfice_linux.zip' \
        && unzip surfice_linux.zip \
        && rm -rf surfice_linux.zip
RUN  wget --quiet -O libqt5pas1_2.9-0_amd64.deb 'https://github.com/davidbannon/libqt5pas/releases/download/v1.2.9/libqt5pas1_2.9-0_amd64.deb' \
        && apt install ./libqt5pas1_2.9-0_amd64.deb \
        && rm -rf libqt5pas1_2.9-0_amd64.deb
ENV PATH="/opt/Surf_Ice:/opt/Surf_Ice/Resources:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin"
ENV DEPLOY_BINS="surfice_qt5"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "wget", \
          "unzip", \
          "ca-certificates", \
          "libgtk2.0-0", \
          "libqt5pas1", \
          "appmenu-gtk2-module", \
          "libglu1-mesa" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           appmenu-gtk2-module \\\\\\n           ca-certificates \\\\\\n           libglu1-mesa \\\\\\n           libgtk2.0-0 \\\\\\n           libqt5pas1 \\\\\\n           unzip \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --quiet -O surfice_linux.zip '"'"'https://github.com/neurolabusc/surf-ice/releases/download/v1.0.20210730/surfice_linux.zip'"'"' \\\\\\n && unzip surfice_linux.zip \\\\\\n && rm -rf surfice_linux.zip" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " wget --quiet -O libqt5pas1_2.9-0_amd64.deb '"'"'https://github.com/davidbannon/libqt5pas/releases/download/v1.2.9/libqt5pas1_2.9-0_amd64.deb'"'"' \\\\\\n && apt install ./libqt5pas1_2.9-0_amd64.deb \\\\\\n && rm -rf libqt5pas1_2.9-0_amd64.deb" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/Surf_Ice:/opt/Surf_Ice/Resources:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:~/.local/bin" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "surfice_qt5" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: template
File: build/template/template_1.1.5.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM neurodebian:bookworm-non-free
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  datalad \
                  datalad-container \
           && rm -rf /var/lib/apt/lists/*
ENV DEPLOY_BINS="datalad"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "neurodebian:bookworm-non-free" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "datalad", \
          "datalad-container" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           datalad \\\\\\n           datalad-container \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "datalad" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: tractseg
File: build/tractseg/tractseg_2.9.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:22.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV PATH="/opt/mrtrix3-3.0.4/bin:$PATH" \
    LD_LIBRARY_PATH="/opt/mrtrix3-3.0.4/lib:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
           libpng16-16 \
           libtiff5 \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MRtrix3 ..." \
    && mkdir -p /opt/mrtrix3-3.0.4 \
    && curl -fsSL https://github.com/MRtrix3/mrtrix3/releases/download/3.0.4/conda-linux-mrtrix3-3.0.4-h2bc3f7f_0.tar.bz2 \
    | tar -xj -C /opt/mrtrix3-3.0.4
ENV CONDA_DIR="/opt/miniconda" \
    PATH="/opt/miniconda/bin:$PATH"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bzip2 \
           ca-certificates \
           curl \
    && rm -rf /var/lib/apt/lists/* \
    # Install dependencies.
    && export PATH="/opt/miniconda/bin:$PATH" \
    && echo "Downloading Miniconda installer ..." \
    && conda_installer="/tmp/miniconda.sh" \
    && curl -fsSL -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-py37_23.1.0-1-Linux-x86_64.sh \
    && bash "$conda_installer" -b -p /opt/miniconda \
    && rm -f "$conda_installer" \
    && conda tos accept \
    # Prefer packages in conda-forge
    && conda config --system --prepend channels conda-forge \
    # Packages in lower-priority channels not considered if a package with the same
    # name exists in a higher priority channel. Can dramatically speed up installations.
    # Conda recommends this as a default
    # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html
    && conda config --set channel_priority strict \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    # Enable `conda activate`
    && conda init bash \
    # Clean up
    && sync && conda clean --all --yes && sync \
    && rm -rf ~/.cache/pip/*
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  g++ \
                  gcc \
                  libc6-dev \
                  libgl1-mesa-glx \
                  libx11-6 \
                  libxext6 \
                  libxt6 \
                  python3-dev \
                  xvfb \
           && rm -rf /var/lib/apt/lists/*
RUN  pip install packaging numpy
RUN  pip install TractSeg==2.9
RUN  pip install -q wheel scipy nilearn matplotlib scikit-image nibabel dipy fury joblib seaborn cython
RUN  pip install -q torch==1.6.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
RUN  mkdir -p ~/.tractseg && echo "weights_dir=/opt/miniconda/share/TractSeg/weights" > ~/.tractseg/config.txt
RUN  download_all_pretrained_weights
ENV FSLDIR="/opt/fsl-6.0.7.16" \
    PATH="/opt/fsl-6.0.7.16/bin:$PATH" \
    FSLOUTPUTTYPE="NIFTI_GZ" \
    FSLMULTIFILEQUIT="TRUE" \
    FSLTCLSH="/opt/fsl-6.0.7.16/bin/fsltclsh" \
    FSLWISH="/opt/fsl-6.0.7.16/bin/fslwish" \
    FSLLOCKDIR="" \
    FSLMACHINELIST="" \
    FSLREMOTECALL="" \
    FSLGECUDAQ="cuda.q"
RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           ca-certificates \
           curl \
           dc \
           file \
           libfontconfig1 \
           libfreetype6 \
           libgl1-mesa-dev \
           libgl1-mesa-dri \
           libglu1-mesa-dev \
           libgomp1 \
           libice6 \
           libopenblas0 \
           libxcursor1 \
           libxft2 \
           libxinerama1 \
           libxrandr2 \
           libxrender1 \
           libxt6 \
           nano \
           python3 \
           sudo \
           wget \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Installing FSL ..." \
    && curl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16
RUN test "$(getent passwd jovyan)" \
    || useradd --no-user-group --create-home --shell /bin/bash jovyan
USER jovyan
ENV DEPLOY_BINS="TractSeg:Tracking:Tractometry"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:22.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "/opt/mrtrix3-3.0.4/bin:$PATH", \
        "LD_LIBRARY_PATH": "/opt/mrtrix3-3.0.4/lib:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    libpng16-16 \\\\\\n    libtiff5\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MRtrix3 ...\\"\\nmkdir -p /opt/mrtrix3-3.0.4\\ncurl -fsSL https://github.com/MRtrix3/mrtrix3/releases/download/3.0.4/conda-linux-mrtrix3-3.0.4-h2bc3f7f_0.tar.bz2 \\\\\\n| tar -xj -C /opt/mrtrix3-3.0.4" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "CONDA_DIR": "/opt/miniconda", \
        "PATH": "/opt/miniconda/bin:$PATH" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl\\nrm -rf /var/lib/apt/lists/*\\n# Install dependencies.\\nexport PATH=\\"/opt/miniconda/bin:$PATH\\"\\necho \\"Downloading Miniconda installer ...\\"\\nconda_installer=\\"/tmp/miniconda.sh\\"\\ncurl -fsSL -o \\"$conda_installer\\" https://repo.continuum.io/miniconda/Miniconda3-py37_23.1.0-1-Linux-x86_64.sh\\nbash \\"$conda_installer\\" -b -p /opt/miniconda\\nrm -f \\"$conda_installer\\"\\nconda tos accept\\n# Prefer packages in conda-forge\\nconda config --system --prepend channels conda-forge\\n# Packages in lower-priority channels not considered if a package with the same\\n# name exists in a higher priority channel. Can dramatically speed up installations.\\n# Conda recommends this as a default\\n# https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html\\nconda config --set channel_priority strict\\nconda config --system --set auto_update_conda false\\nconda config --system --set show_channel_urls true\\n# Enable `conda activate`\\nconda init bash\\n# Clean up\\nsync && conda clean --all --yes && sync\\nrm -rf ~/.cache/pip/*" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "gcc", \
          "g++", \
          "libc6-dev", \
          "build-essential", \
          "python3-dev", \
          "libx11-6", \
          "libxext6", \
          "libxt6", \
          "libgl1-mesa-glx", \
          "xvfb" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           g++ \\\\\\n           gcc \\\\\\n           libc6-dev \\\\\\n           libgl1-mesa-glx \\\\\\n           libx11-6 \\\\\\n           libxext6 \\\\\\n           libxt6 \\\\\\n           python3-dev \\\\\\n           xvfb \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install packaging numpy" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install TractSeg==2.9" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install -q wheel scipy nilearn matplotlib scikit-image nibabel dipy fury joblib seaborn cython" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install -q torch==1.6.0+cpu -f https://download.pytorch.org/whl/torch_stable.html" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " mkdir -p ~/.tractseg && echo \\"weights_dir=/opt/miniconda/share/TractSeg/weights\\" > ~/.tractseg/config.txt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " download_all_pretrained_weights" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "FSLDIR": "/opt/fsl-6.0.7.16", \
        "PATH": "/opt/fsl-6.0.7.16/bin:$PATH", \
        "FSLOUTPUTTYPE": "NIFTI_GZ", \
        "FSLMULTIFILEQUIT": "TRUE", \
        "FSLTCLSH": "/opt/fsl-6.0.7.16/bin/fsltclsh", \
        "FSLWISH": "/opt/fsl-6.0.7.16/bin/fslwish", \
        "FSLLOCKDIR": "", \
        "FSLMACHINELIST": "", \
        "FSLREMOTECALL": "", \
        "FSLGECUDAQ": "cuda.q" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    dc \\\\\\n    file \\\\\\n    libfontconfig1 \\\\\\n    libfreetype6 \\\\\\n    libgl1-mesa-dev \\\\\\n    libgl1-mesa-dri \\\\\\n    libglu1-mesa-dev \\\\\\n    libgomp1 \\\\\\n    libice6 \\\\\\n    libopenblas0 \\\\\\n    libxcursor1 \\\\\\n    libxft2 \\\\\\n    libxinerama1 \\\\\\n    libxrandr2 \\\\\\n    libxrender1 \\\\\\n    libxt6 \\\\\\n    nano \\\\\\n    python3 \\\\\\n    sudo \\\\\\n    wget\\nrm -rf /var/lib/apt/lists/*\\n\\necho \\"Installing FSL ...\\"\\ncurl -fsSL https://fsl.fmrib.ox.ac.uk/fsldownloads/fslconda/releases/fslinstaller.py | python3 - -d /opt/fsl-6.0.7.16 -V 6.0.7.16" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "jovyan" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "TractSeg:Tracking:Tractometry" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER jovyan
# End saving to specification to JSON.

========================================
Recipe: vesselboost
File: build/vesselboost/vesselboost_1.0.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM pytorch/pytorch:2.4.0-cuda11.8-cudnn9-runtime
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
WORKDIR /opt/code
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  build-essential \
                  cmake \
                  dos2unix \
                  g++ \
                  git \
                  libboost-all-dev \
                  libboost-program-options1.74.0 \
                  libfftw3-dev \
                  libhdf5-dev \
                  libpugixml-dev \
                  libpugixml1v5 \
                  libxml2-dev \
                  libxslt1-dev \
                  libxslt1.1 \
                  vim \
           && rm -rf /var/lib/apt/lists/*
RUN  git clone https://github.com/ismrmrd/ismrmrd.git \
        && cd ./ismrmrd \
        && cmake . \
        && make -j 16 \
        && make install
RUN  git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \
        && cd siemens_to_ismrmrd \
        && mkdir build \
        && cd build \
        && cmake .. \
        && make -j 16 \
        && make install
RUN  pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image
RUN  git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \
        && cd ismrmrd-python-tools \
        && pip3 install --no-cache-dir .
RUN  git clone https://github.com/kspaceKelvin/python-ismrmrd-server \
        && find /opt/code/python-ismrmrd-server -name "*.sh" -exec chmod +x {} \; \
        && find /opt/code/python-ismrmrd-server -name "*.sh" | xargs dos2unix \
        && sed -i 's/invertcontrast/default_replace_with_valid_name/g' /opt/code/python-ismrmrd-server/main.py
WORKDIR /opt
RUN  git clone https://github.com/KMarshallX/VesselBoost.git \
        && cd VesselBoost \
        && chmod a+x angiboost.py
WORKDIR /opt/VesselBoost/
RUN  pip install -r requirements.txt
WORKDIR /opt/VesselBoost/saved_models
RUN  osf -p abk4p fetch osfstorage/pretrained_models/manual_0429
RUN  osf -p abk4p fetch osfstorage/pretrained_models/omelette1_0429
RUN  osf -p abk4p fetch osfstorage/pretrained_models/omelette2_0429
WORKDIR /opt/VesselBoost/
ENV PATH="$PATH:/opt/VesselBoost/"
COPY ["vesselboost.py", \
      "/opt/code/python-ismrmrd-server/vesselboost.py"]
ENV DEPLOY_BINS="python"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "pytorch/pytorch:2.4.0-cuda11.8-cudnn9-runtime" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/code" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "build-essential", \
          "libxslt1.1", \
          "libboost-program-options1.74.0", \
          "libpugixml1v5", \
          "vim", \
          "dos2unix", \
          "git", \
          "cmake", \
          "g++", \
          "libhdf5-dev", \
          "libxml2-dev", \
          "libxslt1-dev", \
          "libboost-all-dev", \
          "libfftw3-dev", \
          "libpugixml-dev" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           build-essential \\\\\\n           cmake \\\\\\n           dos2unix \\\\\\n           g++ \\\\\\n           git \\\\\\n           libboost-all-dev \\\\\\n           libboost-program-options1.74.0 \\\\\\n           libfftw3-dev \\\\\\n           libhdf5-dev \\\\\\n           libpugixml-dev \\\\\\n           libpugixml1v5 \\\\\\n           libxml2-dev \\\\\\n           libxslt1-dev \\\\\\n           libxslt1.1 \\\\\\n           vim \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd.git \\\\\\n && cd ./ismrmrd \\\\\\n && cmake . \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/siemens_to_ismrmrd.git \\\\\\n && cd siemens_to_ismrmrd \\\\\\n && mkdir build \\\\\\n && cd build \\\\\\n && cmake .. \\\\\\n && make -j 16 \\\\\\n && make install" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip3 install h5py ismrmrd matplotlib pydicom==3.0.1 pynetdicom nibabel scipy scikit-image" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/ismrmrd/ismrmrd-python-tools.git \\\\\\n && cd ismrmrd-python-tools \\\\\\n && pip3 install --no-cache-dir ." \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/kspaceKelvin/python-ismrmrd-server \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" -exec chmod +x {} \\\\; \\\\\\n && find /opt/code/python-ismrmrd-server -name \\"*.sh\\" | xargs dos2unix \\\\\\n && sed -i '"'"'s/invertcontrast/default_replace_with_valid_name/g'"'"' /opt/code/python-ismrmrd-server/main.py" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " git clone https://github.com/KMarshallX/VesselBoost.git \\\\\\n && cd VesselBoost \\\\\\n && chmod a+x angiboost.py" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/VesselBoost/" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " pip install -r requirements.txt" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/VesselBoost/saved_models" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " osf -p abk4p fetch osfstorage/pretrained_models/manual_0429" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " osf -p abk4p fetch osfstorage/pretrained_models/omelette1_0429" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": " osf -p abk4p fetch osfstorage/pretrained_models/omelette2_0429" \
      } \
    }, \
    { \
      "name": "workdir", \
      "kwds": { \
        "path": "/opt/VesselBoost/" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "PATH": "$PATH:/opt/VesselBoost/" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "vesselboost.py", \
          "/opt/code/python-ismrmrd-server/vesselboost.py" \
        ], \
        "destination": "/opt/code/python-ismrmrd-server/vesselboost.py" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "python" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: vina
File: build/vina/vina_1.2.3.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ghcr.io/metaphorme/vina-all:release
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEBIAN_FRONTEND="noninteractive"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  libxml2 \
           && rm -rf /var/lib/apt/lists/*
COPY ["test.sh", \
      "/test.sh"]
ENV DEPLOY_PATH="/opt/AutoDock-Vina/build/linux/release/,/opt/adfr/bin"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ghcr.io/metaphorme/vina-all:release" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "libxml2" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           libxml2 \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "test.sh", \
          "/test.sh" \
        ], \
        "destination": "/test.sh" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_PATH": "/opt/AutoDock-Vina/build/linux/release/,/opt/adfr/bin" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: workshopdemo
File: build/workshopdemo/workshopdemo_1.0.0.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:24.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR-2023b/v915/runtime/glnxa64:/opt/MCR-2023b/v915/bin/glnxa64:/opt/MCR-2023b/v915/sys/os/glnxa64:/opt/MCR-2023b/v915/extern/bin/glnxa64" \
    MATLABCMD="/opt/MCR-2023b/2023b/toolbox/matlab" \
    XAPPLRESDIR="/opt//opt/MCR-2023b/v915/x11/app-defaults" \
    MCRROOT="/opt/MCR-2023b/2023b"
RUN export TMPDIR="$(mktemp -d)" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           bc \
           curl \
           dbus-x11 \
           libncurses5 \
           libxext6 \
           libxmu6 \
           libxpm-dev \
           libxt6 \
           openjdk-8-jre \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl  -o "$TMPDIR/mcr.zip" https://ssd.mathworks.com/supportfiles/downloads/R2023b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2023b_Update_9_glnxa64.zip \
    && unzip -q "$TMPDIR/mcr.zip" -d "$TMPDIR/mcrtmp" \
    && "$TMPDIR/mcrtmp/install" -destinationFolder /opt/MCR-2023b -mode silent -agreeToLicense yes \
    && rm -rf "$TMPDIR" \
    && unset TMPDIR
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  hello \
           && rm -rf /var/lib/apt/lists/*
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:24.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LD_LIBRARY_PATH": "$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu:/opt/MCR-2023b/v915/runtime/glnxa64:/opt/MCR-2023b/v915/bin/glnxa64:/opt/MCR-2023b/v915/sys/os/glnxa64:/opt/MCR-2023b/v915/extern/bin/glnxa64", \
        "MATLABCMD": "/opt/MCR-2023b/2023b/toolbox/matlab", \
        "XAPPLRESDIR": "/opt//opt/MCR-2023b/v915/x11/app-defaults", \
        "MCRROOT": "/opt/MCR-2023b/2023b" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export TMPDIR=\\"$\(mktemp -d\)\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    bc \\\\\\n    curl \\\\\\n    dbus-x11 \\\\\\n    libncurses5 \\\\\\n    libxext6 \\\\\\n    libxmu6 \\\\\\n    libxpm-dev \\\\\\n    libxt6 \\\\\\n    openjdk-8-jre \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\necho \\"Downloading MATLAB Compiler Runtime ...\\"\\ncurl  -o \\"$TMPDIR/mcr.zip\\" https://ssd.mathworks.com/supportfiles/downloads/R2023b/Release/9/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2023b_Update_9_glnxa64.zip\\nunzip -q \\"$TMPDIR/mcr.zip\\" -d \\"$TMPDIR/mcrtmp\\"\\n\\"$TMPDIR/mcrtmp/install\\" -destinationFolder /opt/MCR-2023b -mode silent -agreeToLicense yes\\nrm -rf \\"$TMPDIR\\"\\nunset TMPDIR" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "hello" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           hello \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: xcpd
File: build/xcpd/xcpd_0.10.7.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM pennlinc/xcp_d:0.10.7
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
ENV DEPLOY_BINS="xcp_d"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "pennlinc/xcp_d:0.10.7" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "xcp_d" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
# End saving to specification to JSON.

========================================
Recipe: xnat
File: build/xnat/xnat_1.9.2.1.Dockerfile
========================================

# Generated by Neurodocker and Reproenv.

FROM ubuntu:20.04
USER root
ENV LANG="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN export ND_ENTRYPOINT="/neurodocker/startup.sh" \
    && apt-get update -qq \
    && apt-get install -y -q --no-install-recommends \
           apt-utils \
           bzip2 \
           ca-certificates \
           curl \
           locales \
           unzip \
    && rm -rf /var/lib/apt/lists/* \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG="en_US.UTF-8" \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT" \
    &&   echo 'set -e' >> "$ND_ENTRYPOINT" \
    &&   echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT" \
    &&   echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT"; \
    fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
RUN printf '#!/bin/bash\nls -la' > /usr/bin/ll
RUN chmod +x /usr/bin/ll
RUN mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch
ENV DEBIAN_FRONTEND="noninteractive"
ENV TZ="UTC"
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  tzdata \
           && rm -rf /var/lib/apt/lists/*
RUN ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone
RUN apt-get update -qq \
           && apt-get install -y -q --no-install-recommends \
                  openjdk-8-jre-headless \
                  postgresql \
                  sudo \
                  tomcat9 \
                  wget \
           && rm -rf /var/lib/apt/lists/*
RUN --mount=type=bind,source=cache/h8645c382,target=/.neurocontainer-cache/h8645c382,readonly mkdir -p /usr/share/tomcat9/conf \
        && cp /.neurocontainer-cache/h8645c382/server.xml /usr/share/tomcat9/conf/server.xml
RUN --mount=type=bind,source=cache/hb90802fc,target=/.neurocontainer-cache/hb90802fc,readonly mkdir -p /opt/xnat-config \
        && cp /.neurocontainer-cache/hb90802fc/xnat-conf.properties.template /opt/xnat-config/xnat-conf.properties.template
RUN --mount=type=bind,source=cache/h263c8f20,target=/.neurocontainer-cache/h263c8f20,readonly cp /.neurocontainer-cache/h263c8f20/web-default.xml /opt/xnat-config/web-default.xml
RUN --mount=type=bind,source=cache/hf1d1aab2,target=/.neurocontainer-cache/hf1d1aab2,readonly mkdir -p /opt/xnat-webapp \
        && unzip -o -d /opt/xnat-webapp /.neurocontainer-cache/hf1d1aab2/xnat-web-1.9.2.1.war
RUN --mount=type=bind,source=cache/hc3614055,target=/.neurocontainer-cache/hc3614055,readonly cp /.neurocontainer-cache/hc3614055/init-postgres.sh /usr/bin/init-postgres \
        && chmod +x /usr/bin/init-postgres
RUN --mount=type=bind,source=cache/hb444e063,target=/.neurocontainer-cache/hb444e063,readonly cp /.neurocontainer-cache/hb444e063/entrypoint.sh /usr/bin/xnat \
        && chmod +x /usr/bin/xnat
RUN test "$(getent passwd jovyan)" \
    || useradd --no-user-group --create-home --shell /bin/bash jovyan
USER jovyan
ENV DEPLOY_BINS="xnat"
COPY ["README.md", \
      "/README.md"]
COPY ["build.yaml", \
      "/build.yaml"]
ENTRYPOINT ["/neurodocker/startup.sh"]

# Save specification to JSON.
USER root
RUN printf '{ \
  "pkg_manager": "apt", \
  "existing_users": [ \
    "root" \
  ], \
  "instructions": [ \
    { \
      "name": "from_", \
      "kwds": { \
        "base_image": "ubuntu:20.04" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "root" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "LANG": "en_US.UTF-8", \
        "LC_ALL": "en_US.UTF-8", \
        "ND_ENTRYPOINT": "/neurodocker/startup.sh" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "export ND_ENTRYPOINT=\\"/neurodocker/startup.sh\\"\\napt-get update -qq\\napt-get install -y -q --no-install-recommends \\\\\\n    apt-utils \\\\\\n    bzip2 \\\\\\n    ca-certificates \\\\\\n    curl \\\\\\n    locales \\\\\\n    unzip\\nrm -rf /var/lib/apt/lists/*\\nsed -i -e '"'"'s/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/'"'"' /etc/locale.gen\\ndpkg-reconfigure --frontend=noninteractive locales\\nupdate-locale LANG=\\"en_US.UTF-8\\"\\nchmod 777 /opt && chmod a+s /opt\\nmkdir -p /neurodocker\\nif [ ! -f \\"$ND_ENTRYPOINT\\" ]; then\\n  echo '"'"'#!/usr/bin/env bash'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'set -e'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'export USER=\\"${USER:=`whoami`}\\"'"'"' >> \\"$ND_ENTRYPOINT\\"\\n  echo '"'"'if [ -n \\"$1\\" ]; then \\"$@\\"; else /usr/bin/env bash; fi'"'"' >> \\"$ND_ENTRYPOINT\\";\\nfi\\nchmod -R 777 /neurodocker && chmod a+s /neurodocker" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "printf '"'"'#!/bin/bash\\\\nls -la'"'"' > /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "chmod +x /usr/bin/ll" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "mkdir -p /afm01 /afm02 /cvmfs /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /neurodesktop-storage /local /gpfs1 /working /winmounts /state /tmp /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEBIAN_FRONTEND": "noninteractive" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "TZ": "UTC" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tzdata" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           tzdata \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "ln -snf /usr/share/zoneinfo/UTC /etc/localtime && echo UTC > /etc/timezone" \
      } \
    }, \
    { \
      "name": "install", \
      "kwds": { \
        "pkgs": [ \
          "tomcat9", \
          "postgresql", \
          "openjdk-8-jre-headless", \
          "wget", \
          "sudo" \
        ], \
        "opts": null \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "apt-get update -qq \\\\\\n    && apt-get install -y -q --no-install-recommends \\\\\\n           openjdk-8-jre-headless \\\\\\n           postgresql \\\\\\n           sudo \\\\\\n           tomcat9 \\\\\\n           wget \\\\\\n    && rm -rf /var/lib/apt/lists/*" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h8645c382,target=/.neurocontainer-cache/h8645c382,readonly mkdir -p /usr/share/tomcat9/conf \\\\\\n && cp /.neurocontainer-cache/h8645c382/server.xml /usr/share/tomcat9/conf/server.xml" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/hb90802fc,target=/.neurocontainer-cache/hb90802fc,readonly mkdir -p /opt/xnat-config \\\\\\n && cp /.neurocontainer-cache/hb90802fc/xnat-conf.properties.template /opt/xnat-config/xnat-conf.properties.template" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/h263c8f20,target=/.neurocontainer-cache/h263c8f20,readonly cp /.neurocontainer-cache/h263c8f20/web-default.xml /opt/xnat-config/web-default.xml" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/hf1d1aab2,target=/.neurocontainer-cache/hf1d1aab2,readonly mkdir -p /opt/xnat-webapp \\\\\\n && unzip -o -d /opt/xnat-webapp /.neurocontainer-cache/hf1d1aab2/xnat-web-1.9.2.1.war" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/hc3614055,target=/.neurocontainer-cache/hc3614055,readonly cp /.neurocontainer-cache/hc3614055/init-postgres.sh /usr/bin/init-postgres \\\\\\n && chmod +x /usr/bin/init-postgres" \
      } \
    }, \
    { \
      "name": "run", \
      "kwds": { \
        "command": "--mount=type=bind,source=cache/hb444e063,target=/.neurocontainer-cache/hb444e063,readonly cp /.neurocontainer-cache/hb444e063/entrypoint.sh /usr/bin/xnat \\\\\\n && chmod +x /usr/bin/xnat" \
      } \
    }, \
    { \
      "name": "user", \
      "kwds": { \
        "user": "jovyan" \
      } \
    }, \
    { \
      "name": "env", \
      "kwds": { \
        "DEPLOY_BINS": "xnat" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "README.md", \
          "/README.md" \
        ], \
        "destination": "/README.md" \
      } \
    }, \
    { \
      "name": "copy", \
      "kwds": { \
        "source": [ \
          "build.yaml", \
          "/build.yaml" \
        ], \
        "destination": "/build.yaml" \
      } \
    }, \
    { \
      "name": "entrypoint", \
      "kwds": { \
        "args": [ \
          "/neurodocker/startup.sh" \
        ] \
      } \
    } \
  ] \
}' > /.reproenv.json
USER jovyan
# End saving to specification to JSON.

